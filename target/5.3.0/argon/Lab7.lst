
/Users/admin/CTD_2023/Lab7/target/5.3.0/argon/Lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003a00  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7a20  000b7a20  00007a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000006c  2003e2ac  000b7a44  0000e2ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004d8  2003e318  2003e318  0001e318  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b7ab0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b7ab4  000b7ab4  00017ab4  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b7aba  000b7aba  00017aba  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b7ade  000b7ade  00017ade  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0013022a  00000000  00000000  00017ae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00014611  00000000  00000000  00147d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000397bb  00000000  00000000  0015c31d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002db0  00000000  00000000  00195ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000ad10  00000000  00000000  00198888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003c6db  00000000  00000000  001a3598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000444fe  00000000  00000000  001dfc73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013e07f  00000000  00000000  00224171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008168  00000000  00000000  003621f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__aeabi_d2f>:
   b47bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b47c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b47c4:	bf24      	itt	cs
   b47c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b47ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b47ce:	d90d      	bls.n	b47ec <__aeabi_d2f+0x30>
   b47d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b47d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b47d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b47dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b47e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b47e4:	bf08      	it	eq
   b47e6:	f020 0001 	biceq.w	r0, r0, #1
   b47ea:	4770      	bx	lr
   b47ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b47f0:	d121      	bne.n	b4836 <__aeabi_d2f+0x7a>
   b47f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b47f6:	bfbc      	itt	lt
   b47f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b47fc:	4770      	bxlt	lr
   b47fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4802:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b4806:	f1c2 0218 	rsb	r2, r2, #24
   b480a:	f1c2 0c20 	rsb	ip, r2, #32
   b480e:	fa10 f30c 	lsls.w	r3, r0, ip
   b4812:	fa20 f002 	lsr.w	r0, r0, r2
   b4816:	bf18      	it	ne
   b4818:	f040 0001 	orrne.w	r0, r0, #1
   b481c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4820:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b4824:	fa03 fc0c 	lsl.w	ip, r3, ip
   b4828:	ea40 000c 	orr.w	r0, r0, ip
   b482c:	fa23 f302 	lsr.w	r3, r3, r2
   b4830:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4834:	e7cc      	b.n	b47d0 <__aeabi_d2f+0x14>
   b4836:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b483a:	d107      	bne.n	b484c <__aeabi_d2f+0x90>
   b483c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b4840:	bf1e      	ittt	ne
   b4842:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4846:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b484a:	4770      	bxne	lr
   b484c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b4850:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b4854:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4858:	4770      	bx	lr
   b485a:	bf00      	nop

000b485c <strcmp>:
   b485c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4860:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4864:	2a01      	cmp	r2, #1
   b4866:	bf28      	it	cs
   b4868:	429a      	cmpcs	r2, r3
   b486a:	d0f7      	beq.n	b485c <strcmp>
   b486c:	1ad0      	subs	r0, r2, r3
   b486e:	4770      	bx	lr

000b4870 <strlen>:
   b4870:	4603      	mov	r3, r0
   b4872:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4876:	2a00      	cmp	r2, #0
   b4878:	d1fb      	bne.n	b4872 <strlen+0x2>
   b487a:	1a18      	subs	r0, r3, r0
   b487c:	3801      	subs	r0, #1
   b487e:	4770      	bx	lr

000b4880 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4880:	4809      	ldr	r0, [pc, #36]	; (b48a8 <module_user_pre_init+0x28>)
   b4882:	490a      	ldr	r1, [pc, #40]	; (b48ac <module_user_pre_init+0x2c>)
   b4884:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4886:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4888:	d005      	beq.n	b4896 <module_user_pre_init+0x16>
   b488a:	4a09      	ldr	r2, [pc, #36]	; (b48b0 <module_user_pre_init+0x30>)
   b488c:	4282      	cmp	r2, r0
   b488e:	d002      	beq.n	b4896 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4890:	1a12      	subs	r2, r2, r0
   b4892:	f002 fab1 	bl	b6df8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4896:	4807      	ldr	r0, [pc, #28]	; (b48b4 <module_user_pre_init+0x34>)
   b4898:	4a07      	ldr	r2, [pc, #28]	; (b48b8 <module_user_pre_init+0x38>)
   b489a:	2100      	movs	r1, #0
   b489c:	1a12      	subs	r2, r2, r0
   b489e:	f002 fab9 	bl	b6e14 <memset>
    return &link_global_data_start;
}
   b48a2:	4801      	ldr	r0, [pc, #4]	; (b48a8 <module_user_pre_init+0x28>)
   b48a4:	bd08      	pop	{r3, pc}
   b48a6:	bf00      	nop
   b48a8:	2003e2ac 	.word	0x2003e2ac
   b48ac:	000b7a44 	.word	0x000b7a44
   b48b0:	2003e318 	.word	0x2003e318
   b48b4:	2003e318 	.word	0x2003e318
   b48b8:	2003e7f0 	.word	0x2003e7f0

000b48bc <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b48bc:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b48be:	4e07      	ldr	r6, [pc, #28]	; (b48dc <module_user_init+0x20>)
   b48c0:	4c07      	ldr	r4, [pc, #28]	; (b48e0 <module_user_init+0x24>)
    module_user_init_hook();
   b48c2:	f002 f809 	bl	b68d8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b48c6:	1ba4      	subs	r4, r4, r6
   b48c8:	08a4      	lsrs	r4, r4, #2
   b48ca:	2500      	movs	r5, #0
   b48cc:	42ac      	cmp	r4, r5
   b48ce:	d100      	bne.n	b48d2 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b48d0:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b48d2:	f856 3b04 	ldr.w	r3, [r6], #4
   b48d6:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b48d8:	3501      	adds	r5, #1
   b48da:	e7f7      	b.n	b48cc <module_user_init+0x10>
   b48dc:	000b79fc 	.word	0x000b79fc
   b48e0:	000b7a20 	.word	0x000b7a20

000b48e4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b48e4:	f000 bb90 	b.w	b5008 <setup>

000b48e8 <module_user_loop>:
}

void module_user_loop() {
   b48e8:	b508      	push	{r3, lr}
    loop();
   b48ea:	f000 fd29 	bl	b5340 <loop>
    _post_loop();
}
   b48ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b48f2:	f001 bfa9 	b.w	b6848 <_post_loop>

000b48f6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b48f6:	f001 b8bb 	b.w	b5a70 <malloc>

000b48fa <_Znaj>:
   b48fa:	f001 b8b9 	b.w	b5a70 <malloc>

000b48fe <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b48fe:	f001 b8bf 	b.w	b5a80 <free>

000b4902 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4902:	7800      	ldrb	r0, [r0, #0]
   b4904:	fab0 f080 	clz	r0, r0
   b4908:	0940      	lsrs	r0, r0, #5
   b490a:	4770      	bx	lr

000b490c <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b490c:	2301      	movs	r3, #1
   b490e:	7003      	strb	r3, [r0, #0]
   b4910:	4770      	bx	lr
	...

000b4914 <_ZN10CloudClass7processEv.isra.0>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static bool process(void) {
   b4914:	b508      	push	{r3, lr}
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4916:	f000 fe9f 	bl	b5658 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b491a:	4b03      	ldr	r3, [pc, #12]	; (b4928 <_ZN10CloudClass7processEv.isra.0+0x14>)
   b491c:	6018      	str	r0, [r3, #0]
            application_checkin();
            return spark_process();
    }
   b491e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return spark_process();
   b4922:	f001 b835 	b.w	b5990 <spark_process>
   b4926:	bf00      	nop
   b4928:	2003e728 	.word	0x2003e728

000b492c <_ZNK10BlynkParam8iterator5asIntEv>:
#endif
#if !defined(BLYNK_NO_FLOAT)
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b492c:	6803      	ldr	r3, [r0, #0]
   b492e:	b12b      	cbz	r3, b493c <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   b4930:	6842      	ldr	r2, [r0, #4]
   b4932:	4293      	cmp	r3, r2
   b4934:	d202      	bcs.n	b493c <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   b4936:	4618      	mov	r0, r3
   b4938:	f002 ba56 	b.w	b6de8 <atoi>
   b493c:	2000      	movs	r0, #0
   b493e:	4770      	bx	lr

000b4940 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   b4940:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4942:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   b4944:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4946:	b145      	cbz	r5, b495a <_ZN10BlynkParam8iteratorppEv+0x1a>
   b4948:	6843      	ldr	r3, [r0, #4]
   b494a:	429d      	cmp	r5, r3
   b494c:	d205      	bcs.n	b495a <_ZN10BlynkParam8iteratorppEv+0x1a>
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   b494e:	4628      	mov	r0, r5
   b4950:	f7ff ff8e 	bl	b4870 <strlen>
   b4954:	3001      	adds	r0, #1
   b4956:	4405      	add	r5, r0
   b4958:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   b495a:	4620      	mov	r0, r4
   b495c:	bd38      	pop	{r3, r4, r5, pc}

000b495e <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   b495e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4960:	4604      	mov	r4, r0
   b4962:	6847      	ldr	r7, [r0, #4]
    if (str == NULL) {
   b4964:	460d      	mov	r5, r1
   b4966:	b921      	cbnz	r1, b4972 <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   b4968:	6803      	ldr	r3, [r0, #0]
   b496a:	1c7a      	adds	r2, r7, #1
   b496c:	6042      	str	r2, [r0, #4]
   b496e:	55d9      	strb	r1, [r3, r7]
        return;
    }
    add(str, strlen(str)+1);
}
   b4970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    add(str, strlen(str)+1);
   b4972:	4608      	mov	r0, r1
   b4974:	f7ff ff7c 	bl	b4870 <strlen>
    if (len + l > buff_size)
   b4978:	68a3      	ldr	r3, [r4, #8]
    add(str, strlen(str)+1);
   b497a:	1c46      	adds	r6, r0, #1
    if (len + l > buff_size)
   b497c:	19f2      	adds	r2, r6, r7
   b497e:	429a      	cmp	r2, r3
   b4980:	d8f6      	bhi.n	b4970 <_ZN10BlynkParam3addEPKc+0x12>
    memcpy(buff+len, b, l);
   b4982:	6820      	ldr	r0, [r4, #0]
   b4984:	4632      	mov	r2, r6
   b4986:	4629      	mov	r1, r5
   b4988:	4438      	add	r0, r7
   b498a:	f002 fa35 	bl	b6df8 <memcpy>
    len += l;
   b498e:	6860      	ldr	r0, [r4, #4]
   b4990:	4430      	add	r0, r6
   b4992:	6060      	str	r0, [r4, #4]
   b4994:	e7ec      	b.n	b4970 <_ZN10BlynkParam3addEPKc+0x12>
	...

000b4998 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   b4998:	b538      	push	{r3, r4, r5, lr}
   b499a:	4604      	mov	r4, r0
   b499c:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   b499e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b49a2:	6825      	ldr	r5, [r4, #0]
   b49a4:	4a04      	ldr	r2, [pc, #16]	; (b49b8 <_ZN10BlynkParam3addEi+0x20>)
   b49a6:	1a09      	subs	r1, r1, r0
   b49a8:	4428      	add	r0, r5
   b49aa:	f001 f871 	bl	b5a90 <snprintf>
   b49ae:	6863      	ldr	r3, [r4, #4]
   b49b0:	3001      	adds	r0, #1
   b49b2:	4403      	add	r3, r0
   b49b4:	6063      	str	r3, [r4, #4]
    }
   b49b6:	bd38      	pop	{r3, r4, r5, pc}
   b49b8:	000b70a0 	.word	0x000b70a0

000b49bc <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   b49bc:	b538      	push	{r3, r4, r5, lr}
   b49be:	4604      	mov	r4, r0
   b49c0:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   b49c2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b49c6:	6825      	ldr	r5, [r4, #0]
   b49c8:	4a04      	ldr	r2, [pc, #16]	; (b49dc <_ZN10BlynkParam3addEl+0x20>)
   b49ca:	1a09      	subs	r1, r1, r0
   b49cc:	4428      	add	r0, r5
   b49ce:	f001 f85f 	bl	b5a90 <snprintf>
   b49d2:	6863      	ldr	r3, [r4, #4]
   b49d4:	3001      	adds	r0, #1
   b49d6:	4403      	add	r3, r0
   b49d8:	6063      	str	r3, [r4, #4]
    }
   b49da:	bd38      	pop	{r3, r4, r5, pc}
   b49dc:	000b70a3 	.word	0x000b70a3

000b49e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   b49e0:	b508      	push	{r3, lr}
        state = CONNECTING;
   b49e2:	2300      	movs	r3, #0
   b49e4:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   b49e6:	6800      	ldr	r0, [r0, #0]
   b49e8:	f001 fd94 	bl	b6514 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   b49ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   b49f0:	f000 bd36 	b.w	b5460 <BlynkNoOpCbk>

000b49f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b49f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   b49f8:	eb01 0902 	add.w	r9, r1, r2
   b49fc:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   b49fe:	4549      	cmp	r1, r9
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b4a00:	e9cd 1905 	strd	r1, r9, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b4a04:	4680      	mov	r8, r0
   b4a06:	460d      	mov	r5, r1
   b4a08:	4616      	mov	r6, r2
    if (it >= param.end())
   b4a0a:	f080 8092 	bcs.w	b4b32 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   b4a0e:	a805      	add	r0, sp, #20
   b4a10:	880f      	ldrh	r7, [r1, #0]
   b4a12:	f7ff ff95 	bl	b4940 <_ZN10BlynkParam8iteratorppEv>
   b4a16:	6803      	ldr	r3, [r0, #0]
   b4a18:	454b      	cmp	r3, r9
   b4a1a:	f080 808a 	bcs.w	b4b32 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4a1e:	a805      	add	r0, sp, #20
   b4a20:	f7ff ff84 	bl	b492c <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
   b4a24:	f247 2376 	movw	r3, #29302	; 0x7276
   b4a28:	429f      	cmp	r7, r3
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4a2a:	b2c4      	uxtb	r4, r0
    switch(cmd16) {
   b4a2c:	f000 80a9 	beq.w	b4b82 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x18e>
   b4a30:	d827      	bhi.n	b4a82 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x8e>
   b4a32:	f247 2361 	movw	r3, #29281	; 0x7261
   b4a36:	429f      	cmp	r7, r3
   b4a38:	d07e      	beq.n	b4b38 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x144>
   b4a3a:	f247 2364 	movw	r3, #29284	; 0x7264
   b4a3e:	429f      	cmp	r7, r3
   b4a40:	d042      	beq.n	b4ac8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd4>
   b4a42:	f646 5370 	movw	r3, #28016	; 0x6d70
   b4a46:	429f      	cmp	r7, r3
   b4a48:	d128      	bne.n	b4a9c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa8>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   b4a4a:	4e63      	ldr	r6, [pc, #396]	; (b4bd8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e4>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b4a4c:	4f63      	ldr	r7, [pc, #396]	; (b4bdc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e8>)
   b4a4e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; b4bf0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>
        while (it < param.end()) {
   b4a52:	9b05      	ldr	r3, [sp, #20]
   b4a54:	4599      	cmp	r9, r3
   b4a56:	d96c      	bls.n	b4b32 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4a58:	a805      	add	r0, sp, #20
   b4a5a:	f7ff ff67 	bl	b492c <_ZNK10BlynkParam8iterator5asIntEv>
   b4a5e:	b2c4      	uxtb	r4, r0
            ++it;
   b4a60:	a805      	add	r0, sp, #20
   b4a62:	f7ff ff6d 	bl	b4940 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b4a66:	9d05      	ldr	r5, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   b4a68:	4631      	mov	r1, r6
   b4a6a:	4628      	mov	r0, r5
   b4a6c:	f7ff fef6 	bl	b485c <strcmp>
   b4a70:	4601      	mov	r1, r0
   b4a72:	b9e0      	cbnz	r0, b4aae <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xba>
                pinMode(pin, OUTPUT);
   b4a74:	4620      	mov	r0, r4
   b4a76:	f001 ff9f 	bl	b69b8 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   b4a7a:	a805      	add	r0, sp, #20
   b4a7c:	f7ff ff60 	bl	b4940 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   b4a80:	e7e7      	b.n	b4a52 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5e>
    switch(cmd16) {
   b4a82:	f247 7364 	movw	r3, #30564	; 0x7764
   b4a86:	429f      	cmp	r7, r3
   b4a88:	d03f      	beq.n	b4b0a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x116>
   b4a8a:	f247 7376 	movw	r3, #30582	; 0x7776
   b4a8e:	429f      	cmp	r7, r3
   b4a90:	f000 8087 	beq.w	b4ba2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ae>
   b4a94:	f247 7361 	movw	r3, #30561	; 0x7761
   b4a98:	429f      	cmp	r7, r3
   b4a9a:	d05f      	beq.n	b4b5c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x168>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b4a9c:	2300      	movs	r3, #0
   b4a9e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b4aa2:	2202      	movs	r2, #2
   b4aa4:	9200      	str	r2, [sp, #0]
   b4aa6:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   b4aaa:	4619      	mov	r1, r3
   b4aac:	e029      	b.n	b4b02 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10e>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b4aae:	4639      	mov	r1, r7
   b4ab0:	4628      	mov	r0, r5
   b4ab2:	f7ff fed3 	bl	b485c <strcmp>
   b4ab6:	b128      	cbz	r0, b4ac4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd0>
   b4ab8:	4641      	mov	r1, r8
   b4aba:	4628      	mov	r0, r5
   b4abc:	f7ff fece 	bl	b485c <strcmp>
   b4ac0:	2800      	cmp	r0, #0
   b4ac2:	d1da      	bne.n	b4a7a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x86>
                pinMode(pin, OUTPUT);
   b4ac4:	2101      	movs	r1, #1
   b4ac6:	e7d5      	b.n	b4a74 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x80>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4ac8:	ab0a      	add	r3, sp, #40	; 0x28
        rsp.add("dw");
   b4aca:	4945      	ldr	r1, [pc, #276]	; (b4be0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>)
   b4acc:	9307      	str	r3, [sp, #28]
   b4ace:	a807      	add	r0, sp, #28
   b4ad0:	2310      	movs	r3, #16
   b4ad2:	2500      	movs	r5, #0
   b4ad4:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b4ad8:	f7ff ff41 	bl	b495e <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b4adc:	a807      	add	r0, sp, #28
   b4ade:	4621      	mov	r1, r4
   b4ae0:	f7ff ff5a 	bl	b4998 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   b4ae4:	4620      	mov	r0, r4
   b4ae6:	f001 ff91 	bl	b6a0c <digitalRead>
        rsp.add(analogRead(pin));
   b4aea:	4601      	mov	r1, r0
   b4aec:	a807      	add	r0, sp, #28
   b4aee:	f7ff ff65 	bl	b49bc <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   b4af2:	9b08      	ldr	r3, [sp, #32]
   b4af4:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4af8:	3b01      	subs	r3, #1
   b4afa:	9300      	str	r3, [sp, #0]
   b4afc:	9b07      	ldr	r3, [sp, #28]
   b4afe:	462a      	mov	r2, r5
   b4b00:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b4b02:	4640      	mov	r0, r8
   b4b04:	f000 face 	bl	b50a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   b4b08:	e013      	b.n	b4b32 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        if (++it >= param.end())
   b4b0a:	a805      	add	r0, sp, #20
   b4b0c:	f7ff ff18 	bl	b4940 <_ZN10BlynkParam8iteratorppEv>
   b4b10:	6803      	ldr	r3, [r0, #0]
   b4b12:	4599      	cmp	r9, r3
   b4b14:	d90d      	bls.n	b4b32 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   b4b16:	b2a4      	uxth	r4, r4
   b4b18:	2101      	movs	r1, #1
   b4b1a:	4620      	mov	r0, r4
   b4b1c:	f001 ff4c 	bl	b69b8 <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   b4b20:	a805      	add	r0, sp, #20
   b4b22:	f7ff ff03 	bl	b492c <_ZNK10BlynkParam8iterator5asIntEv>
   b4b26:	1e01      	subs	r1, r0, #0
   b4b28:	bf18      	it	ne
   b4b2a:	2101      	movne	r1, #1
   b4b2c:	4620      	mov	r0, r4
   b4b2e:	f001 ff54 	bl	b69da <digitalWrite>
    }
}
   b4b32:	b00f      	add	sp, #60	; 0x3c
   b4b34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4b38:	ab0a      	add	r3, sp, #40	; 0x28
   b4b3a:	9307      	str	r3, [sp, #28]
        rsp.add("aw");
   b4b3c:	a807      	add	r0, sp, #28
   b4b3e:	2310      	movs	r3, #16
   b4b40:	4928      	ldr	r1, [pc, #160]	; (b4be4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>)
   b4b42:	2500      	movs	r5, #0
   b4b44:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b4b48:	f7ff ff09 	bl	b495e <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b4b4c:	a807      	add	r0, sp, #28
   b4b4e:	4621      	mov	r1, r4
   b4b50:	f7ff ff22 	bl	b4998 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   b4b54:	4620      	mov	r0, r4
   b4b56:	f001 ff6c 	bl	b6a32 <analogRead>
   b4b5a:	e7c6      	b.n	b4aea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
        if (++it >= param.end())
   b4b5c:	a805      	add	r0, sp, #20
   b4b5e:	f7ff feef 	bl	b4940 <_ZN10BlynkParam8iteratorppEv>
   b4b62:	6803      	ldr	r3, [r0, #0]
   b4b64:	4599      	cmp	r9, r3
   b4b66:	d9e4      	bls.n	b4b32 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   b4b68:	b2a4      	uxth	r4, r4
   b4b6a:	2101      	movs	r1, #1
   b4b6c:	4620      	mov	r0, r4
   b4b6e:	f001 ff23 	bl	b69b8 <pinMode>
        analogWrite(pin, it.asInt());
   b4b72:	a805      	add	r0, sp, #20
   b4b74:	f7ff feda 	bl	b492c <_ZNK10BlynkParam8iterator5asIntEv>
   b4b78:	4601      	mov	r1, r0
   b4b7a:	4620      	mov	r0, r4
   b4b7c:	f001 ff70 	bl	b6a60 <_Z11analogWritetm>
    } break;
   b4b80:	e7d7      	b.n	b4b32 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   b4b82:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   b4b84:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   b4b88:	f000 fc6c 	bl	b5464 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   b4b8c:	4603      	mov	r3, r0
            handler(req);
   b4b8e:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   b4b90:	b123      	cbz	r3, b4b9c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
   b4b92:	4a15      	ldr	r2, [pc, #84]	; (b4be8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>)
   b4b94:	4293      	cmp	r3, r2
   b4b96:	d001      	beq.n	b4b9c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
            handler(req);
   b4b98:	4798      	blx	r3
   b4b9a:	e7ca      	b.n	b4b32 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        } else {
            BlynkWidgetReadDefault(req);
   b4b9c:	f000 fc5e 	bl	b545c <BlynkWidgetRead>
        }
    }
   b4ba0:	e7c7      	b.n	b4b32 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        ++it;
   b4ba2:	a805      	add	r0, sp, #20
   b4ba4:	f7ff fecc 	bl	b4940 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b4ba8:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   b4baa:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   b4bae:	1b5d      	subs	r5, r3, r5
   b4bb0:	1b75      	subs	r5, r6, r5
        WidgetWriteHandler handler = GetWriteHandler(pin);
   b4bb2:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   b4bb4:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
   b4bb8:	950c      	str	r5, [sp, #48]	; 0x30
   b4bba:	f000 fc5d 	bl	b5478 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   b4bbe:	4603      	mov	r3, r0
            handler(req, param);
   b4bc0:	a90a      	add	r1, sp, #40	; 0x28
   b4bc2:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   b4bc4:	b123      	cbz	r3, b4bd0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
   b4bc6:	4a09      	ldr	r2, [pc, #36]	; (b4bec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f8>)
   b4bc8:	4293      	cmp	r3, r2
   b4bca:	d001      	beq.n	b4bd0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
            handler(req, param);
   b4bcc:	4798      	blx	r3
   b4bce:	e7b0      	b.n	b4b32 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            BlynkWidgetWriteDefault(req, param);
   b4bd0:	f000 fc45 	bl	b545e <BlynkWidgetWrite>
    } break;
   b4bd4:	e7ad      	b.n	b4b32 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
   b4bd6:	bf00      	nop
   b4bd8:	000b70a7 	.word	0x000b70a7
   b4bdc:	000b70aa 	.word	0x000b70aa
   b4be0:	000b70b2 	.word	0x000b70b2
   b4be4:	000b70b5 	.word	0x000b70b5
   b4be8:	000b545d 	.word	0x000b545d
   b4bec:	000b545f 	.word	0x000b545f
   b4bf0:	000b70ae 	.word	0x000b70ae

000b4bf4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   b4bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4bf8:	b08c      	sub	sp, #48	; 0x30
   b4bfa:	af04      	add	r7, sp, #16
   b4bfc:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   b4bfe:	2205      	movs	r2, #5
   b4c00:	6800      	ldr	r0, [r0, #0]
   b4c02:	1d39      	adds	r1, r7, #4
   b4c04:	f001 f9cd 	bl	b5fa2 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   b4c08:	b398      	cbz	r0, b4c72 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x7e>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   b4c0a:	2805      	cmp	r0, #5
   b4c0c:	d004      	beq.n	b4c18 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   b4c0e:	2000      	movs	r0, #0
}
   b4c10:	3720      	adds	r7, #32
   b4c12:	46bd      	mov	sp, r7
   b4c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   b4c18:	f8b7 0005 	ldrh.w	r0, [r7, #5]
   b4c1c:	f000 fdb4 	bl	b5788 <inet_ntohs>
   b4c20:	f8a7 0005 	strh.w	r0, [r7, #5]
    hdr.length = ntohs(hdr.length);
   b4c24:	f8b7 0007 	ldrh.w	r0, [r7, #7]
   b4c28:	f000 fdae 	bl	b5788 <inet_ntohs>
    if (ret < 0 || hdr.msg_id == 0) {
   b4c2c:	f8b7 3005 	ldrh.w	r3, [r7, #5]
    hdr.length = ntohs(hdr.length);
   b4c30:	f8a7 0007 	strh.w	r0, [r7, #7]
   b4c34:	4680      	mov	r8, r0
    if (ret < 0 || hdr.msg_id == 0) {
   b4c36:	2b00      	cmp	r3, #0
   b4c38:	d0e9      	beq.n	b4c0e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   b4c3a:	793b      	ldrb	r3, [r7, #4]
   b4c3c:	bb13      	cbnz	r3, b4c84 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
        lastActivityIn = BlynkMillis();
   b4c3e:	f000 fc0b 	bl	b5458 <_Z11BlynkMillisv>
   b4c42:	4602      	mov	r2, r0
   b4c44:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   b4c46:	7f60      	ldrb	r0, [r4, #29]
   b4c48:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b4c4c:	b9b0      	cbnz	r0, b4c7c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x88>
   b4c4e:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   b4c52:	2901      	cmp	r1, #1
   b4c54:	d112      	bne.n	b4c7c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x88>
            switch (hdr.length) {
   b4c56:	2b09      	cmp	r3, #9
   b4c58:	d00d      	beq.n	b4c76 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
   b4c5a:	2bc8      	cmp	r3, #200	; 0xc8
   b4c5c:	d001      	beq.n	b4c62 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6e>
   b4c5e:	2b04      	cmp	r3, #4
   b4c60:	d1d6      	bne.n	b4c10 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   b4c62:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   b4c64:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   b4c66:	4620      	mov	r0, r4
                state = CONNECTED;
   b4c68:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   b4c6a:	f000 fb07 	bl	b527c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   b4c6e:	f7ff fe51 	bl	b4914 <_ZN10CloudClass7processEv.isra.0>
        return true; // Considered OK (no data on input)
   b4c72:	2001      	movs	r0, #1
   b4c74:	e7cc      	b.n	b4c10 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   b4c76:	2303      	movs	r3, #3
   b4c78:	7763      	strb	r3, [r4, #29]
                break;
   b4c7a:	e7c9      	b.n	b4c10 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   b4c7c:	1f58      	subs	r0, r3, #5
   b4c7e:	bf18      	it	ne
   b4c80:	2001      	movne	r0, #1
   b4c82:	e7c5      	b.n	b4c10 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   b4c84:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b4c88:	d903      	bls.n	b4c92 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x9e>
        internalReconnect();
   b4c8a:	4620      	mov	r0, r4
   b4c8c:	f7ff fea8 	bl	b49e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b4c90:	e7ef      	b.n	b4c72 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x7e>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   b4c92:	f100 0308 	add.w	r3, r0, #8
   b4c96:	f023 0307 	bic.w	r3, r3, #7
   b4c9a:	466e      	mov	r6, sp
   b4c9c:	ebad 0d03 	sub.w	sp, sp, r3
   b4ca0:	ad04      	add	r5, sp, #16
   b4ca2:	4602      	mov	r2, r0
   b4ca4:	4629      	mov	r1, r5
   b4ca6:	6820      	ldr	r0, [r4, #0]
   b4ca8:	f001 f97b 	bl	b5fa2 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   b4cac:	4580      	cmp	r8, r0
   b4cae:	f04f 0000 	mov.w	r0, #0
   b4cb2:	d17d      	bne.n	b4db0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1bc>
    inputBuffer[hdr.length] = '\0';
   b4cb4:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b4cb8:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   b4cba:	f000 fbcd 	bl	b5458 <_Z11BlynkMillisv>
    switch (hdr.type)
   b4cbe:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   b4cc0:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   b4cc2:	2b14      	cmp	r3, #20
   b4cc4:	f000 80a4 	beq.w	b4e10 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21c>
   b4cc8:	d848      	bhi.n	b4d5c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x168>
   b4cca:	2b0f      	cmp	r3, #15
   b4ccc:	f000 80a0 	beq.w	b4e10 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21c>
   b4cd0:	d807      	bhi.n	b4ce2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
   b4cd2:	2b02      	cmp	r3, #2
   b4cd4:	d048      	beq.n	b4d68 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x174>
   b4cd6:	2b06      	cmp	r3, #6
   b4cd8:	d04f      	beq.n	b4d7a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x186>
        internalReconnect();
   b4cda:	4620      	mov	r0, r4
   b4cdc:	f7ff fe80 	bl	b49e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b4ce0:	e056      	b.n	b4d90 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x19c>
    switch (hdr.type)
   b4ce2:	2b11      	cmp	r3, #17
   b4ce4:	d1f9      	bne.n	b4cda <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xe6>
        BlynkReq req = { 0 };
   b4ce6:	2300      	movs	r3, #0
   b4ce8:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   b4cea:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b4cee:	442b      	add	r3, r5
        if (it >= param.end())
   b4cf0:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b4cf2:	e9c7 5303 	strd	r5, r3, [r7, #12]
   b4cf6:	d24b      	bcs.n	b4d90 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x19c>
        ++it;
   b4cf8:	f107 000c 	add.w	r0, r7, #12
   b4cfc:	f8d5 8000 	ldr.w	r8, [r5]
   b4d00:	f7ff fe1e 	bl	b4940 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b4d04:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   b4d06:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   b4d0a:	1b5d      	subs	r5, r3, r5
   b4d0c:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   b4d0e:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   b4d12:	687b      	ldr	r3, [r7, #4]
   b4d14:	61fd      	str	r5, [r7, #28]
   b4d16:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b4d1a:	8363      	strh	r3, [r4, #26]
   b4d1c:	4b63      	ldr	r3, [pc, #396]	; (b4eac <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b8>)
   b4d1e:	4598      	cmp	r8, r3
   b4d20:	f000 80bd 	beq.w	b4e9e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2aa>
   b4d24:	f200 808a 	bhi.w	b4e3c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
   b4d28:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   b4d2c:	f46f 7200 	mvn.w	r2, #512	; 0x200
   b4d30:	4413      	add	r3, r2
   b4d32:	4598      	cmp	r8, r3
   b4d34:	f000 809b 	beq.w	b4e6e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x27a>
   b4d38:	d877      	bhi.n	b4e2a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x236>
   b4d3a:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   b4d3e:	3b06      	subs	r3, #6
   b4d40:	4598      	cmp	r8, r3
   b4d42:	f000 809a 	beq.w	b4e7a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x286>
   b4d46:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b4d4a:	3303      	adds	r3, #3
   b4d4c:	4598      	cmp	r8, r3
   b4d4e:	d169      	bne.n	b4e24 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x230>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   b4d50:	f107 0114 	add.w	r1, r7, #20
   b4d54:	4638      	mov	r0, r7
   b4d56:	f000 fb82 	bl	b545e <BlynkWidgetWrite>
   b4d5a:	e063      	b.n	b4e24 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x230>
    switch (hdr.type)
   b4d5c:	2b29      	cmp	r3, #41	; 0x29
   b4d5e:	d019      	beq.n	b4d94 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
   b4d60:	2b37      	cmp	r3, #55	; 0x37
   b4d62:	d015      	beq.n	b4d90 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x19c>
   b4d64:	2b1d      	cmp	r3, #29
   b4d66:	d1b8      	bne.n	b4cda <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xe6>
        if (state == CONNECTING) {
   b4d68:	7f63      	ldrb	r3, [r4, #29]
   b4d6a:	b933      	cbnz	r3, b4d7a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x186>
            state = CONNECTED;
   b4d6c:	2301      	movs	r3, #1
   b4d6e:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   b4d70:	4620      	mov	r0, r4
   b4d72:	f000 fa83 	bl	b527c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   b4d76:	f7ff fdcd 	bl	b4914 <_ZN10CloudClass7processEv.isra.0>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   b4d7a:	2300      	movs	r3, #0
   b4d7c:	21c8      	movs	r1, #200	; 0xc8
   b4d7e:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   b4d82:	9100      	str	r1, [sp, #0]
   b4d84:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b4d88:	4619      	mov	r1, r3
   b4d8a:	4620      	mov	r0, r4
   b4d8c:	f000 f98a 	bl	b50a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   b4d90:	2001      	movs	r0, #1
   b4d92:	e00d      	b.n	b4db0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1bc>
        if (!redir_serv) {
   b4d94:	68a3      	ldr	r3, [r4, #8]
   b4d96:	b91b      	cbnz	r3, b4da0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ac>
             redir_serv = (char*)malloc(64);
   b4d98:	2040      	movs	r0, #64	; 0x40
   b4d9a:	f000 fe69 	bl	b5a70 <malloc>
   b4d9e:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   b4da0:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b4da4:	44a8      	add	r8, r5
        if (it >= param.end())
   b4da6:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b4da8:	e9c7 5805 	strd	r5, r8, [r7, #20]
   b4dac:	d302      	bcc.n	b4db4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
            return false;
   b4dae:	2000      	movs	r0, #0
   b4db0:	46b5      	mov	sp, r6
   b4db2:	e72d      	b.n	b4c10 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   b4db4:	4629      	mov	r1, r5
   b4db6:	2240      	movs	r2, #64	; 0x40
   b4db8:	68a0      	ldr	r0, [r4, #8]
   b4dba:	f002 f861 	bl	b6e80 <strncpy>
        redir_serv[63] = '\0';
   b4dbe:	68a3      	ldr	r3, [r4, #8]
   b4dc0:	2500      	movs	r5, #0
   b4dc2:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   b4dc6:	f107 0014 	add.w	r0, r7, #20
   b4dca:	f7ff fdb9 	bl	b4940 <_ZN10BlynkParam8iteratorppEv>
   b4dce:	6803      	ldr	r3, [r0, #0]
   b4dd0:	4598      	cmp	r8, r3
   b4dd2:	d91b      	bls.n	b4e0c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x218>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4dd4:	6978      	ldr	r0, [r7, #20]
   b4dd6:	b120      	cbz	r0, b4de2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ee>
   b4dd8:	69bb      	ldr	r3, [r7, #24]
   b4dda:	4298      	cmp	r0, r3
   b4ddc:	d214      	bcs.n	b4e08 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x214>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   b4dde:	f002 f807 	bl	b6df0 <atol>
            redir_port = it.asLong();
   b4de2:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   b4de4:	6820      	ldr	r0, [r4, #0]
   b4de6:	f001 fb95 	bl	b6514 <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   b4dea:	6823      	ldr	r3, [r4, #0]
   b4dec:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   b4dee:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   b4df0:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   b4df2:	2300      	movs	r3, #0
   b4df4:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b4df6:	f000 fb2f 	bl	b5458 <_Z11BlynkMillisv>
   b4dfa:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b4dfe:	3808      	subs	r0, #8
   b4e00:	e9c4 0003 	strd	r0, r0, [r4, #12]
   b4e04:	6160      	str	r0, [r4, #20]
   b4e06:	e7c3      	b.n	b4d90 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x19c>
   b4e08:	4628      	mov	r0, r5
   b4e0a:	e7ea      	b.n	b4de2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ee>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   b4e0c:	2550      	movs	r5, #80	; 0x50
   b4e0e:	e7e9      	b.n	b4de4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f0>
        msgIdOutOverride = hdr.msg_id;
   b4e10:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   b4e12:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   b4e16:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b4e1a:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   b4e1c:	4629      	mov	r1, r5
   b4e1e:	4620      	mov	r0, r4
   b4e20:	f7ff fde8 	bl	b49f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   b4e24:	2300      	movs	r3, #0
   b4e26:	8363      	strh	r3, [r4, #26]
   b4e28:	e7b2      	b.n	b4d90 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x19c>
   b4e2a:	4b21      	ldr	r3, [pc, #132]	; (b4eb0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2bc>)
   b4e2c:	4598      	cmp	r8, r3
   b4e2e:	d1f9      	bne.n	b4e24 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x230>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   b4e30:	f107 0114 	add.w	r1, r7, #20
   b4e34:	4638      	mov	r0, r7
   b4e36:	f000 fb12 	bl	b545e <BlynkWidgetWrite>
   b4e3a:	e7f3      	b.n	b4e24 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x230>
   b4e3c:	4b1d      	ldr	r3, [pc, #116]	; (b4eb4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c0>)
   b4e3e:	4598      	cmp	r8, r3
   b4e40:	d021      	beq.n	b4e86 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x292>
   b4e42:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   b4e46:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b4e4a:	f503 7380 	add.w	r3, r3, #256	; 0x100
   b4e4e:	4598      	cmp	r8, r3
   b4e50:	d01f      	beq.n	b4e92 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x29e>
   b4e52:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   b4e56:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   b4e5a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   b4e5e:	4598      	cmp	r8, r3
   b4e60:	d1e0      	bne.n	b4e24 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x230>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   b4e62:	f107 0114 	add.w	r1, r7, #20
   b4e66:	4638      	mov	r0, r7
   b4e68:	f000 faf9 	bl	b545e <BlynkWidgetWrite>
   b4e6c:	e7da      	b.n	b4e24 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x230>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   b4e6e:	f107 0114 	add.w	r1, r7, #20
   b4e72:	4638      	mov	r0, r7
   b4e74:	f000 faf3 	bl	b545e <BlynkWidgetWrite>
   b4e78:	e7d4      	b.n	b4e24 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x230>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   b4e7a:	f107 0114 	add.w	r1, r7, #20
   b4e7e:	4638      	mov	r0, r7
   b4e80:	f000 faed 	bl	b545e <BlynkWidgetWrite>
   b4e84:	e7ce      	b.n	b4e24 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x230>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   b4e86:	f107 0114 	add.w	r1, r7, #20
   b4e8a:	4638      	mov	r0, r7
   b4e8c:	f000 fae7 	bl	b545e <BlynkWidgetWrite>
   b4e90:	e7c8      	b.n	b4e24 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x230>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   b4e92:	f107 0114 	add.w	r1, r7, #20
   b4e96:	4638      	mov	r0, r7
   b4e98:	f000 fae1 	bl	b545e <BlynkWidgetWrite>
   b4e9c:	e7c2      	b.n	b4e24 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x230>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   b4e9e:	f107 0114 	add.w	r1, r7, #20
   b4ea2:	4638      	mov	r0, r7
   b4ea4:	f000 fadb 	bl	b545e <BlynkWidgetWrite>
   b4ea8:	e7bc      	b.n	b4e24 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x230>
   b4eaa:	bf00      	nop
   b4eac:	00736676 	.word	0x00736676
   b4eb0:	00676264 	.word	0x00676264
   b4eb4:	6e6f6361 	.word	0x6e6f6361

000b4eb8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>:
bool BlynkProtocol<Transp>::run(bool avail)
   b4eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4ebc:	4604      	mov	r4, r0
   b4ebe:	b08c      	sub	sp, #48	; 0x30
   b4ec0:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   b4ec2:	f7ff fd27 	bl	b4914 <_ZN10CloudClass7processEv.isra.0>
    if (state == DISCONNECTED) {
   b4ec6:	7f63      	ldrb	r3, [r4, #29]
   b4ec8:	2b02      	cmp	r3, #2
   b4eca:	d01e      	beq.n	b4f0a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x52>
    return false;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   b4ecc:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   b4ece:	8b62      	ldrh	r2, [r4, #26]
   b4ed0:	3301      	adds	r3, #1
   b4ed2:	b2db      	uxtb	r3, r3
   b4ed4:	7723      	strb	r3, [r4, #28]
   b4ed6:	b9aa      	cbnz	r2, b4f04 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b4ed8:	2b02      	cmp	r3, #2
   b4eda:	d813      	bhi.n	b4f04 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   b4edc:	6820      	ldr	r0, [r4, #0]
   b4ede:	f001 f9e1 	bl	b62a4 <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   b4ee2:	b1a8      	cbz	r0, b4f10 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
        while (avail || conn.available() > 0) {
   b4ee4:	b925      	cbnz	r5, b4ef0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x38>
    int available() { return client.available(); }
   b4ee6:	6820      	ldr	r0, [r4, #0]
   b4ee8:	f001 faba 	bl	b6460 <_ZN9TCPClient9availableEv>
   b4eec:	2800      	cmp	r0, #0
   b4eee:	dd0f      	ble.n	b4f10 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
            if (!processInput()) {
   b4ef0:	4620      	mov	r0, r4
   b4ef2:	f7ff fe7f 	bl	b4bf4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   b4ef6:	2800      	cmp	r0, #0
   b4ef8:	d1f5      	bne.n	b4ee6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x2e>
    void disconnect() { client.stop(); }
   b4efa:	6820      	ldr	r0, [r4, #0]
   b4efc:	f001 fb0a 	bl	b6514 <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   b4f00:	f000 faae 	bl	b5460 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   b4f04:	7f23      	ldrb	r3, [r4, #28]
   b4f06:	3b01      	subs	r3, #1
   b4f08:	7723      	strb	r3, [r4, #28]
}
   b4f0a:	b00c      	add	sp, #48	; 0x30
   b4f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   b4f10:	f000 faa2 	bl	b5458 <_Z11BlynkMillisv>
   b4f14:	4605      	mov	r5, r0
    bool connected() { return client.connected(); }
   b4f16:	6820      	ldr	r0, [r4, #0]
   b4f18:	f001 f9c4 	bl	b62a4 <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   b4f1c:	7f67      	ldrb	r7, [r4, #29]
   b4f1e:	2f01      	cmp	r7, #1
   b4f20:	4606      	mov	r6, r0
   b4f22:	d124      	bne.n	b4f6e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb6>
        if (!tconn) {
   b4f24:	b920      	cbnz	r0, b4f30 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x78>
            lastHeartbeat = t;
   b4f26:	6165      	str	r5, [r4, #20]
            internalReconnect();
   b4f28:	4620      	mov	r0, r4
   b4f2a:	f7ff fd59 	bl	b49e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   b4f2e:	e7e9      	b.n	b4f04 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   b4f30:	68e3      	ldr	r3, [r4, #12]
   b4f32:	f24f 6218 	movw	r2, #63000	; 0xf618
   b4f36:	1aeb      	subs	r3, r5, r3
   b4f38:	4293      	cmp	r3, r2
   b4f3a:	d8f5      	bhi.n	b4f28 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x70>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b4f3c:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   b4f40:	4293      	cmp	r3, r2
   b4f42:	d803      	bhi.n	b4f4c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x94>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b4f44:	6923      	ldr	r3, [r4, #16]
   b4f46:	1aeb      	subs	r3, r5, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b4f48:	4293      	cmp	r3, r2
   b4f4a:	d9db      	bls.n	b4f04 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b4f4c:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b4f4e:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b4f52:	1aeb      	subs	r3, r5, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b4f54:	4293      	cmp	r3, r2
   b4f56:	d9d5      	bls.n	b4f04 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
            sendCmd(BLYNK_CMD_PING);
   b4f58:	2300      	movs	r3, #0
   b4f5a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b4f5e:	9300      	str	r3, [sp, #0]
   b4f60:	461a      	mov	r2, r3
   b4f62:	2106      	movs	r1, #6
   b4f64:	4620      	mov	r0, r4
   b4f66:	f000 f89d 	bl	b50a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
                lastLogin = t;
   b4f6a:	6165      	str	r5, [r4, #20]
                return false;
   b4f6c:	e7ca      	b.n	b4f04 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    } else if (state == CONNECTING) {
   b4f6e:	2f00      	cmp	r7, #0
   b4f70:	d1c8      	bne.n	b4f04 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b4f72:	6963      	ldr	r3, [r4, #20]
   b4f74:	1aeb      	subs	r3, r5, r3
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   b4f76:	b140      	cbz	r0, b4f8a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xd2>
   b4f78:	f241 7270 	movw	r2, #6000	; 0x1770
   b4f7c:	4293      	cmp	r3, r2
   b4f7e:	d9c1      	bls.n	b4f04 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    void disconnect() { client.stop(); }
   b4f80:	6820      	ldr	r0, [r4, #0]
   b4f82:	f001 fac7 	bl	b6514 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b4f86:	7767      	strb	r7, [r4, #29]
            return false;
   b4f88:	e7bc      	b.n	b4f04 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   b4f8a:	f241 3288 	movw	r2, #5000	; 0x1388
   b4f8e:	4293      	cmp	r3, r2
   b4f90:	d9b8      	bls.n	b4f04 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b4f92:	6820      	ldr	r0, [r4, #0]
   b4f94:	f001 fabe 	bl	b6514 <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   b4f98:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   b4f9c:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   b4fa0:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   b4fa4:	f1be 0f00 	cmp.w	lr, #0
   b4fa8:	d01b      	beq.n	b4fe2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x12a>
            return (1 == client.connect(domain, port));
   b4faa:	4633      	mov	r3, r6
   b4fac:	4642      	mov	r2, r8
   b4fae:	4671      	mov	r1, lr
   b4fb0:	4660      	mov	r0, ip
   b4fb2:	f001 f8f9 	bl	b61a8 <_ZN9TCPClient7connectEPKctm>
   b4fb6:	2801      	cmp	r0, #1
   b4fb8:	d1d7      	bne.n	b4f6a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb2>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b4fba:	6863      	ldr	r3, [r4, #4]
   b4fbc:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   b4fbe:	2501      	movs	r5, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b4fc0:	4618      	mov	r0, r3
            msgIdOut = 1;
   b4fc2:	8325      	strh	r5, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b4fc4:	f7ff fc54 	bl	b4870 <strlen>
   b4fc8:	2200      	movs	r2, #0
   b4fca:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b4fce:	9b05      	ldr	r3, [sp, #20]
   b4fd0:	9000      	str	r0, [sp, #0]
   b4fd2:	462a      	mov	r2, r5
   b4fd4:	211d      	movs	r1, #29
   b4fd6:	4620      	mov	r0, r4
   b4fd8:	f000 f864 	bl	b50a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   b4fdc:	6923      	ldr	r3, [r4, #16]
   b4fde:	6163      	str	r3, [r4, #20]
            return true;
   b4fe0:	e790      	b.n	b4f04 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b4fe2:	4b08      	ldr	r3, [pc, #32]	; (b5004 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x14c>)
   b4fe4:	9306      	str	r3, [sp, #24]
   b4fe6:	f10c 0720 	add.w	r7, ip, #32
   b4fea:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b4fec:	ae07      	add	r6, sp, #28
   b4fee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b4ff0:	683b      	ldr	r3, [r7, #0]
   b4ff2:	7033      	strb	r3, [r6, #0]
            return (1 == client.connect(addr, port));
   b4ff4:	4642      	mov	r2, r8
   b4ff6:	4673      	mov	r3, lr
   b4ff8:	a906      	add	r1, sp, #24
   b4ffa:	4660      	mov	r0, ip
   b4ffc:	f001 f9b4 	bl	b6368 <_ZN9TCPClient7connectE9IPAddresstm>
   b5000:	e7d9      	b.n	b4fb6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xfe>
   b5002:	bf00      	nop
   b5004:	000b7610 	.word	0x000b7610

000b5008 <setup>:
}

// This function sends Arduino's uptime every second to Virtual Pin 2.

void setup()
{
   b5008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // Debug console
  pinMode(D5, OUTPUT);
   b500a:	2101      	movs	r1, #1
   b500c:	2005      	movs	r0, #5
   b500e:	f001 fcd3 	bl	b69b8 <pinMode>
  pinMode(D6, OUTPUT);
   b5012:	2101      	movs	r1, #1
   b5014:	2006      	movs	r0, #6
   b5016:	f001 fccf 	bl	b69b8 <pinMode>
  pinMode(D7, OUTPUT);
   b501a:	2101      	movs	r1, #1
   b501c:	2007      	movs	r0, #7
   b501e:	f001 fccb 	bl	b69b8 <pinMode>
  pinMode(D3, INPUT);
   b5022:	2100      	movs	r1, #0
   b5024:	2003      	movs	r0, #3
   b5026:	f001 fcc7 	bl	b69b8 <pinMode>
  pinMode(A5, INPUT);
   b502a:	2100      	movs	r1, #0
   b502c:	200e      	movs	r0, #14
   b502e:	f001 fcc3 	bl	b69b8 <pinMode>

  delay(5000); // Allow board to settle
   b5032:	f241 3088 	movw	r0, #5000	; 0x1388
   b5036:	f000 fd53 	bl	b5ae0 <delay>
        this->authkey = auth;
   b503a:	4c17      	ldr	r4, [pc, #92]	; (b5098 <setup+0x90>)

    void begin( const char* auth,
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   b503c:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b5040:	f000 fa08 	bl	b5454 <_Z10BlynkDelaym>
   b5044:	4b15      	ldr	r3, [pc, #84]	; (b509c <setup+0x94>)
   b5046:	6063      	str	r3, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b5048:	f000 fa06 	bl	b5458 <_Z11BlynkMillisv>
   b504c:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
        this->conn.begin(domain, port);
   b5050:	6823      	ldr	r3, [r4, #0]
        domain = d;
   b5052:	4a13      	ldr	r2, [pc, #76]	; (b50a0 <setup+0x98>)
   b5054:	635a      	str	r2, [r3, #52]	; 0x34
   b5056:	3808      	subs	r0, #8
   b5058:	e9c4 0003 	strd	r0, r0, [r4, #12]
        port = p;
   b505c:	2250      	movs	r2, #80	; 0x50
   b505e:	6160      	str	r0, [r4, #20]
   b5060:	871a      	strh	r2, [r3, #56]	; 0x38
        state = CONNECTING;
   b5062:	2600      	movs	r6, #0
        while ((state != CONNECTED) &&
   b5064:	f244 674f 	movw	r7, #17999	; 0x464f
    void disconnect() { client.stop(); }
   b5068:	6820      	ldr	r0, [r4, #0]
   b506a:	f001 fa53 	bl	b6514 <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   b506e:	7766      	strb	r6, [r4, #29]
        millis_time_t started = BlynkMillis();
   b5070:	f000 f9f2 	bl	b5458 <_Z11BlynkMillisv>
   b5074:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   b5076:	7f63      	ldrb	r3, [r4, #29]
   b5078:	2b01      	cmp	r3, #1
   b507a:	d00c      	beq.n	b5096 <setup+0x8e>
               (BlynkMillis() - started < timeout))
   b507c:	f000 f9ec 	bl	b5458 <_Z11BlynkMillisv>
   b5080:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
   b5082:	42b8      	cmp	r0, r7
   b5084:	d804      	bhi.n	b5090 <setup+0x88>
            run();
   b5086:	2100      	movs	r1, #0
   b5088:	4620      	mov	r0, r4
   b508a:	f7ff ff15 	bl	b4eb8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
        while ((state != CONNECTED) &&
   b508e:	e7f2      	b.n	b5076 <setup+0x6e>
        config(auth, domain, port);
        while(this->connect() != true) {}
   b5090:	7f63      	ldrb	r3, [r4, #29]
   b5092:	2b01      	cmp	r3, #1
   b5094:	d1e8      	bne.n	b5068 <setup+0x60>
  Blynk.begin(BLYNK_AUTH_TOKEN);

  // Setup a function to be called every second
}
   b5096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5098:	2003e318 	.word	0x2003e318
   b509c:	000b70b8 	.word	0x000b70b8
   b50a0:	000b70d9 	.word	0x000b70d9

000b50a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   b50a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b50a8:	b083      	sub	sp, #12
   b50aa:	af00      	add	r7, sp, #0
   b50ac:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   b50ae:	6800      	ldr	r0, [r0, #0]
   b50b0:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   b50b2:	4688      	mov	r8, r1
   b50b4:	4616      	mov	r6, r2
   b50b6:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   b50b8:	46eb      	mov	fp, sp
   b50ba:	f001 f8f3 	bl	b62a4 <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   b50be:	2800      	cmp	r0, #0
   b50c0:	f000 8081 	beq.w	b51c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
   b50c4:	f1b8 0f1d 	cmp.w	r8, #29
   b50c8:	d804      	bhi.n	b50d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x30>
   b50ca:	4b4d      	ldr	r3, [pc, #308]	; (b5200 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x15c>)
   b50cc:	fa23 f308 	lsr.w	r3, r3, r8
   b50d0:	07db      	lsls	r3, r3, #31
   b50d2:	d402      	bmi.n	b50da <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x36>
   b50d4:	7f63      	ldrb	r3, [r4, #29]
   b50d6:	2b01      	cmp	r3, #1
   b50d8:	d175      	bne.n	b51c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
    if (0 == id) {
   b50da:	b946      	cbnz	r6, b50ee <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x4a>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   b50dc:	8b66      	ldrh	r6, [r4, #26]
   b50de:	b936      	cbnz	r6, b50ee <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x4a>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   b50e0:	8b23      	ldrh	r3, [r4, #24]
   b50e2:	3301      	adds	r3, #1
   b50e4:	b29b      	uxth	r3, r3
   b50e6:	2b00      	cmp	r3, #0
   b50e8:	d072      	beq.n	b51d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
        msgIdOut = 1;
   b50ea:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   b50ec:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   b50ee:	f1a8 030c 	sub.w	r3, r8, #12
   b50f2:	2b08      	cmp	r3, #8
   b50f4:	d816      	bhi.n	b5124 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x80>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   b50f6:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   b50fa:	4293      	cmp	r3, r2
   b50fc:	bf38      	it	cc
   b50fe:	4613      	movcc	r3, r2
   b5100:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   b5104:	f000 f9a8 	bl	b5458 <_Z11BlynkMillisv>
   b5108:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   b510c:	2800      	cmp	r0, #0
   b510e:	db61      	blt.n	b51d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x130>
                run();
   b5110:	2100      	movs	r1, #0
   b5112:	4620      	mov	r0, r4
   b5114:	f7ff fed0 	bl	b4eb8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
                wait_time = allowed_time - BlynkMillis();
   b5118:	f000 f99e 	bl	b5458 <_Z11BlynkMillisv>
   b511c:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   b5120:	2800      	cmp	r0, #0
   b5122:	daf5      	bge.n	b5110 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6c>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b5124:	f1b9 0f00 	cmp.w	r9, #0
   b5128:	d05b      	beq.n	b51e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   b512a:	1d6b      	adds	r3, r5, #5
                               (data2 ? length2 : 0);
   b512c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   b512e:	2a00      	cmp	r2, #0
   b5130:	6bba      	ldr	r2, [r7, #56]	; 0x38
   b5132:	bf08      	it	eq
   b5134:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   b5136:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   b513a:	f10a 0307 	add.w	r3, sl, #7
   b513e:	f023 0307 	bic.w	r3, r3, #7
   b5142:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->msg_id = htons(id);
   b5146:	4630      	mov	r0, r6
    hdr->type = cmd;
   b5148:	f88d 8000 	strb.w	r8, [sp]
    uint8_t buff[full_length];
   b514c:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->msg_id = htons(id);
   b5150:	f000 fb22 	bl	b5798 <inet_htons>
    hdr->length = htons(length+length2);
   b5154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    hdr->msg_id = htons(id);
   b5156:	f8ad 0001 	strh.w	r0, [sp, #1]
    hdr->length = htons(length+length2);
   b515a:	18e8      	adds	r0, r5, r3
   b515c:	b280      	uxth	r0, r0
   b515e:	f000 fb1b 	bl	b5798 <inet_htons>
   b5162:	f8ad 0003 	strh.w	r0, [sp, #3]
    if (data && length) {
   b5166:	f1b9 0f00 	cmp.w	r9, #0
   b516a:	d03c      	beq.n	b51e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
   b516c:	2d00      	cmp	r5, #0
   b516e:	d03a      	beq.n	b51e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
        memcpy(buff + pos, data, length);
   b5170:	462a      	mov	r2, r5
   b5172:	4649      	mov	r1, r9
   b5174:	f10d 0005 	add.w	r0, sp, #5
   b5178:	f001 fe3e 	bl	b6df8 <memcpy>
        pos += length;
   b517c:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   b517e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   b5180:	b13b      	cbz	r3, b5192 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xee>
   b5182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   b5184:	b12b      	cbz	r3, b5192 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xee>
        memcpy(buff + pos, data2, length2);
   b5186:	461a      	mov	r2, r3
   b5188:	687b      	ldr	r3, [r7, #4]
   b518a:	6b79      	ldr	r1, [r7, #52]	; 0x34
   b518c:	4418      	add	r0, r3
   b518e:	f001 fe33 	bl	b6df8 <memcpy>
    size_t pos = sizeof(BlynkHeader);
   b5192:	2500      	movs	r5, #0
    while (wlen < full_length) {
   b5194:	4555      	cmp	r5, sl
   b5196:	d22a      	bcs.n	b51ee <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x14a>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   b5198:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   b519c:	687b      	ldr	r3, [r7, #4]
   b519e:	6820      	ldr	r0, [r4, #0]
   b51a0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   b51a4:	bf28      	it	cs
   b51a6:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   b51aa:	1959      	adds	r1, r3, r5
   b51ac:	f000 ff2d 	bl	b600a <_ZN9TCPClient5writeEPKhj>
   b51b0:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   b51b2:	2000      	movs	r0, #0
   b51b4:	f000 f94e 	bl	b5454 <_Z10BlynkDelaym>
        if (w == 0) {
   b51b8:	b9be      	cbnz	r6, b51ea <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
    void disconnect() { client.stop(); }
   b51ba:	6820      	ldr	r0, [r4, #0]
   b51bc:	f001 f9aa 	bl	b6514 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b51c0:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   b51c2:	f000 f94d 	bl	b5460 <BlynkNoOpCbk>
}
   b51c6:	370c      	adds	r7, #12
   b51c8:	46dd      	mov	sp, fp
   b51ca:	46bd      	mov	sp, r7
   b51cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   b51d0:	2301      	movs	r3, #1
   b51d2:	e78a      	b.n	b50ea <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x46>
        } else if (nesting == 0) {
   b51d4:	7f21      	ldrb	r1, [r4, #28]
   b51d6:	2900      	cmp	r1, #0
   b51d8:	d1a4      	bne.n	b5124 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x80>
            run();
   b51da:	4620      	mov	r0, r4
   b51dc:	f7ff fe6c 	bl	b4eb8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
   b51e0:	e7a0      	b.n	b5124 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x80>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b51e2:	2305      	movs	r3, #5
   b51e4:	e7a2      	b.n	b512c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x88>
    size_t pos = sizeof(BlynkHeader);
   b51e6:	2005      	movs	r0, #5
   b51e8:	e7c9      	b.n	b517e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xda>
        wlen += w;
   b51ea:	4435      	add	r5, r6
    while (wlen < full_length) {
   b51ec:	e7d2      	b.n	b5194 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xf0>
    if (wlen != full_length) {
   b51ee:	d003      	beq.n	b51f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x154>
        internalReconnect();
   b51f0:	4620      	mov	r0, r4
   b51f2:	f7ff fbf5 	bl	b49e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   b51f6:	e7e6      	b.n	b51c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
    lastActivityOut = BlynkMillis();
   b51f8:	f000 f92e 	bl	b5458 <_Z11BlynkMillisv>
   b51fc:	6120      	str	r0, [r4, #16]
   b51fe:	e7e2      	b.n	b51c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
   b5200:	20000045 	.word	0x20000045

000b5204 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8logEventIA7_cA22_cEEvRKT_RKT0_>:
        cmd.add(event_name);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_EVENT_LOG, 0, cmd.getBuffer(), cmd.getLength()-1);
    }

    template <typename NAME, typename DESCR>
    void logEvent(const NAME& event_name, const DESCR& description) {
   b5204:	b570      	push	{r4, r5, r6, lr}
   b5206:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
        : buff((char*)addr), len(length), buff_size(buffsize)
   b520a:	ab08      	add	r3, sp, #32
   b520c:	4616      	mov	r6, r2
   b520e:	2400      	movs	r4, #0
   b5210:	4605      	mov	r5, r0
   b5212:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add(event_name);
   b5214:	a805      	add	r0, sp, #20
   b5216:	f44f 6380 	mov.w	r3, #1024	; 0x400
   b521a:	e9cd 4306 	strd	r4, r3, [sp, #24]
   b521e:	f7ff fb9e 	bl	b495e <_ZN10BlynkParam3addEPKc>
        cmd.add(description);
   b5222:	4631      	mov	r1, r6
   b5224:	a805      	add	r0, sp, #20
   b5226:	f7ff fb9a 	bl	b495e <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_EVENT_LOG, 0, cmd.getBuffer(), cmd.getLength()-1);
   b522a:	9b06      	ldr	r3, [sp, #24]
   b522c:	3b01      	subs	r3, #1
   b522e:	9300      	str	r3, [sp, #0]
   b5230:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b5234:	9b05      	ldr	r3, [sp, #20]
   b5236:	4622      	mov	r2, r4
   b5238:	2140      	movs	r1, #64	; 0x40
   b523a:	4628      	mov	r0, r5
   b523c:	f7ff ff32 	bl	b50a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   b5240:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
   b5244:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5248 <BlynkWidgetWrite0>:
{
   b5248:	b510      	push	{r4, lr}
   b524a:	460c      	mov	r4, r1
	Serial.println("Button Tapped");
   b524c:	f001 fa76 	bl	b673c <_Z16_fetch_usbserialv>
   b5250:	4906      	ldr	r1, [pc, #24]	; (b526c <BlynkWidgetWrite0+0x24>)
   b5252:	f000 fe58 	bl	b5f06 <_ZN5Print7printlnEPKc>
    int         asInt() const       { return atoi(buff); }
   b5256:	6820      	ldr	r0, [r4, #0]
   b5258:	f001 fdc6 	bl	b6de8 <atoi>
	if (param.asInt() == 1)
   b525c:	2801      	cmp	r0, #1
   b525e:	d104      	bne.n	b526a <BlynkWidgetWrite0+0x22>
		Blynk.logEvent("notify", "Hey, Blynk push here!");
   b5260:	4a03      	ldr	r2, [pc, #12]	; (b5270 <BlynkWidgetWrite0+0x28>)
   b5262:	4904      	ldr	r1, [pc, #16]	; (b5274 <BlynkWidgetWrite0+0x2c>)
   b5264:	4804      	ldr	r0, [pc, #16]	; (b5278 <BlynkWidgetWrite0+0x30>)
   b5266:	f7ff ffcd 	bl	b5204 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8logEventIA7_cA22_cEEvRKT_RKT0_>
}
   b526a:	bd10      	pop	{r4, pc}
   b526c:	000b70e5 	.word	0x000b70e5
   b5270:	000b70f3 	.word	0x000b70f3
   b5274:	000b7109 	.word	0x000b7109
   b5278:	2003e318 	.word	0x2003e318

000b527c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   b527c:	b530      	push	{r4, r5, lr}
   b527e:	b099      	sub	sp, #100	; 0x64
        : buff((char*)addr), len(length), buff_size(buffsize)
   b5280:	ab08      	add	r3, sp, #32
   b5282:	4604      	mov	r4, r0
   b5284:	9305      	str	r3, [sp, #20]
   b5286:	2500      	movs	r5, #0
   b5288:	2340      	movs	r3, #64	; 0x40
        add(key);
   b528a:	a805      	add	r0, sp, #20
   b528c:	490b      	ldr	r1, [pc, #44]	; (b52bc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x40>)
        : buff((char*)addr), len(length), buff_size(buffsize)
   b528e:	e9cd 5306 	strd	r5, r3, [sp, #24]
        add(key);
   b5292:	f7ff fb64 	bl	b495e <_ZN10BlynkParam3addEPKc>
        add(val);
   b5296:	a805      	add	r0, sp, #20
   b5298:	4909      	ldr	r1, [pc, #36]	; (b52c0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x44>)
   b529a:	f7ff fb60 	bl	b495e <_ZN10BlynkParam3addEPKc>
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   b529e:	9b06      	ldr	r3, [sp, #24]
   b52a0:	9302      	str	r3, [sp, #8]
   b52a2:	9b05      	ldr	r3, [sp, #20]
   b52a4:	9301      	str	r3, [sp, #4]
   b52a6:	2365      	movs	r3, #101	; 0x65
   b52a8:	9300      	str	r3, [sp, #0]
   b52aa:	462a      	mov	r2, r5
   b52ac:	4b05      	ldr	r3, [pc, #20]	; (b52c4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x48>)
   b52ae:	2111      	movs	r1, #17
   b52b0:	4620      	mov	r0, r4
   b52b2:	f7ff fef7 	bl	b50a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   b52b6:	b019      	add	sp, #100	; 0x64
   b52b8:	bd30      	pop	{r4, r5, pc}
   b52ba:	bf00      	nop
   b52bc:	000b7110 	.word	0x000b7110
   b52c0:	000b7115 	.word	0x000b7115
   b52c4:	000b7134 	.word	0x000b7134

000b52c8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
   b52c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b52cc:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
        : buff((char*)addr), len(length), buff_size(buffsize)
   b52d0:	ab08      	add	r3, sp, #32
   b52d2:	2400      	movs	r4, #0
   b52d4:	4605      	mov	r5, r0
   b52d6:	460e      	mov	r6, r1
   b52d8:	9305      	str	r3, [sp, #20]
        cmd.add("vw");
   b52da:	a805      	add	r0, sp, #20
   b52dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   b52e0:	4915      	ldr	r1, [pc, #84]	; (b5338 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_+0x70>)
    void virtualWrite(int pin, Args... values) {
   b52e2:	ee10 8a10 	vmov	r8, s0
   b52e6:	e9cd 4306 	strd	r4, r3, [sp, #24]
        cmd.add("vw");
   b52ea:	f7ff fb38 	bl	b495e <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   b52ee:	a805      	add	r0, sp, #20
   b52f0:	4631      	mov	r1, r6
   b52f2:	f7ff fb51 	bl	b4998 <_ZN10BlynkParam3addEi>
#else

    inline
    void BlynkParam::add(float value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.3f", value)+1;
   b52f6:	e9dd 6106 	ldrd	r6, r1, [sp, #24]
   b52fa:	9b05      	ldr	r3, [sp, #20]
   b52fc:	4640      	mov	r0, r8
   b52fe:	1b8f      	subs	r7, r1, r6
   b5300:	441e      	add	r6, r3
   b5302:	f7fe fff1 	bl	b42e8 <__aeabi_f2d>
   b5306:	4a0d      	ldr	r2, [pc, #52]	; (b533c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_+0x74>)
   b5308:	e9cd 0100 	strd	r0, r1, [sp]
   b530c:	4639      	mov	r1, r7
   b530e:	4630      	mov	r0, r6
   b5310:	f000 fbbe 	bl	b5a90 <snprintf>
   b5314:	1c43      	adds	r3, r0, #1
   b5316:	9806      	ldr	r0, [sp, #24]
   b5318:	4403      	add	r3, r0
   b531a:	9306      	str	r3, [sp, #24]
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   b531c:	3b01      	subs	r3, #1
   b531e:	9300      	str	r3, [sp, #0]
   b5320:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b5324:	9b05      	ldr	r3, [sp, #20]
   b5326:	4622      	mov	r2, r4
   b5328:	2114      	movs	r1, #20
   b532a:	4628      	mov	r0, r5
   b532c:	f7ff feba 	bl	b50a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   b5330:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
   b5334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5338:	000b7123 	.word	0x000b7123
   b533c:	000b7126 	.word	0x000b7126

000b5340 <loop>:

void loop()
{
   b5340:	b510      	push	{r4, lr}
  Blynk.run();
   b5342:	4829      	ldr	r0, [pc, #164]	; (b53e8 <loop+0xa8>)
   b5344:	2100      	movs	r1, #0
   b5346:	f7ff fdb7 	bl	b4eb8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
  timer.run();
   b534a:	4828      	ldr	r0, [pc, #160]	; (b53ec <loop+0xac>)
   b534c:	f000 f920 	bl	b5590 <_ZN10BlynkTimer3runEv>

  if (digitalRead(D3)) {
   b5350:	2003      	movs	r0, #3
   b5352:	f001 fb5b 	bl	b6a0c <digitalRead>
   b5356:	b120      	cbz	r0, b5362 <loop+0x22>
    Blynk.logEvent("notify", "Hey, Blynk push here!");
   b5358:	4a25      	ldr	r2, [pc, #148]	; (b53f0 <loop+0xb0>)
   b535a:	4926      	ldr	r1, [pc, #152]	; (b53f4 <loop+0xb4>)
   b535c:	4822      	ldr	r0, [pc, #136]	; (b53e8 <loop+0xa8>)
   b535e:	f7ff ff51 	bl	b5204 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8logEventIA7_cA22_cEEvRKT_RKT0_>
  }
  float celsius = ((analogRead(A5) * 3.3 / 4095.0) - 0.5) * 100;
   b5362:	200e      	movs	r0, #14
   b5364:	f001 fb65 	bl	b6a32 <analogRead>
   b5368:	f7fe ffac 	bl	b42c4 <__aeabi_i2d>
   b536c:	a31a      	add	r3, pc, #104	; (adr r3, b53d8 <loop+0x98>)
   b536e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5372:	f7ff f811 	bl	b4398 <__aeabi_dmul>
   b5376:	a31a      	add	r3, pc, #104	; (adr r3, b53e0 <loop+0xa0>)
   b5378:	e9d3 2300 	ldrd	r2, r3, [r3]
   b537c:	f7ff f936 	bl	b45ec <__aeabi_ddiv>
   b5380:	4b1d      	ldr	r3, [pc, #116]	; (b53f8 <loop+0xb8>)
   b5382:	2200      	movs	r2, #0
   b5384:	f7fe fe50 	bl	b4028 <__aeabi_dsub>
   b5388:	4b1c      	ldr	r3, [pc, #112]	; (b53fc <loop+0xbc>)
   b538a:	2200      	movs	r2, #0
   b538c:	f7ff f804 	bl	b4398 <__aeabi_dmul>
   b5390:	f7ff fa14 	bl	b47bc <__aeabi_d2f>
  float fahrenheit = celsius * 9.0 / 5.0 + 32.0;

  Blynk.virtualWrite(V6, celsius);
   b5394:	2106      	movs	r1, #6
   b5396:	ee00 0a10 	vmov	s0, r0
  float celsius = ((analogRead(A5) * 3.3 / 4095.0) - 0.5) * 100;
   b539a:	4604      	mov	r4, r0
  Blynk.virtualWrite(V6, celsius);
   b539c:	4812      	ldr	r0, [pc, #72]	; (b53e8 <loop+0xa8>)
   b539e:	f7ff ff93 	bl	b52c8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_>
  float fahrenheit = celsius * 9.0 / 5.0 + 32.0;
   b53a2:	4620      	mov	r0, r4
   b53a4:	f7fe ffa0 	bl	b42e8 <__aeabi_f2d>
   b53a8:	4b15      	ldr	r3, [pc, #84]	; (b5400 <loop+0xc0>)
   b53aa:	2200      	movs	r2, #0
   b53ac:	f7fe fff4 	bl	b4398 <__aeabi_dmul>
   b53b0:	4b14      	ldr	r3, [pc, #80]	; (b5404 <loop+0xc4>)
   b53b2:	2200      	movs	r2, #0
   b53b4:	f7ff f91a 	bl	b45ec <__aeabi_ddiv>
   b53b8:	4b13      	ldr	r3, [pc, #76]	; (b5408 <loop+0xc8>)
   b53ba:	2200      	movs	r2, #0
   b53bc:	f7fe fe36 	bl	b402c <__adddf3>
   b53c0:	f7ff f9fc 	bl	b47bc <__aeabi_d2f>
  Blynk.virtualWrite(V7, fahrenheit);
   b53c4:	2107      	movs	r1, #7
   b53c6:	ee00 0a10 	vmov	s0, r0
   b53ca:	4807      	ldr	r0, [pc, #28]	; (b53e8 <loop+0xa8>)
   b53cc:	f7ff ff7c 	bl	b52c8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_>
  // You can inject your own code or combine it with other sketches.
  // Check other examples on how to communicate with Blynk. Remember
  // to avoid delay() function!
   b53d0:	bd10      	pop	{r4, pc}
   b53d2:	bf00      	nop
   b53d4:	f3af 8000 	nop.w
   b53d8:	66666666 	.word	0x66666666
   b53dc:	400a6666 	.word	0x400a6666
   b53e0:	00000000 	.word	0x00000000
   b53e4:	40affe00 	.word	0x40affe00
   b53e8:	2003e318 	.word	0x2003e318
   b53ec:	2003e374 	.word	0x2003e374
   b53f0:	000b70f3 	.word	0x000b70f3
   b53f4:	000b7109 	.word	0x000b7109
   b53f8:	3fe00000 	.word	0x3fe00000
   b53fc:	40590000 	.word	0x40590000
   b5400:	40220000 	.word	0x40220000
   b5404:	40140000 	.word	0x40140000
   b5408:	40400000 	.word	0x40400000

000b540c <_GLOBAL__sub_I_Blynk>:
   b540c:	b510      	push	{r4, lr}
        : domain(NULL), port(0)
   b540e:	4c0e      	ldr	r4, [pc, #56]	; (b5448 <_GLOBAL__sub_I_Blynk+0x3c>)
SYSTEM_THREAD(ENABLED);
   b5410:	2100      	movs	r1, #0
   b5412:	2001      	movs	r0, #1
   b5414:	f000 faa0 	bl	b5958 <system_thread_set_state>
   b5418:	4620      	mov	r0, r4
   b541a:	f001 f8c5 	bl	b65a8 <_ZN9TCPClientC1Ev>
   b541e:	f104 001c 	add.w	r0, r4, #28
   b5422:	f000 fc2b 	bl	b5c7c <_ZN9IPAddressC1Ev>
        , state(CONNECTING)
   b5426:	4a09      	ldr	r2, [pc, #36]	; (b544c <_GLOBAL__sub_I_Blynk+0x40>)
BlynkTimer timer;
   b5428:	4809      	ldr	r0, [pc, #36]	; (b5450 <_GLOBAL__sub_I_Blynk+0x44>)
   b542a:	2300      	movs	r3, #0
   b542c:	e9c2 4300 	strd	r4, r3, [r2]
   b5430:	e9c2 3302 	strd	r3, r3, [r2, #8]
   b5434:	e9c2 3304 	strd	r3, r3, [r2, #16]
   b5438:	6193      	str	r3, [r2, #24]
   b543a:	8393      	strh	r3, [r2, #28]
   b543c:	6363      	str	r3, [r4, #52]	; 0x34
   b543e:	8723      	strh	r3, [r4, #56]	; 0x38
   b5440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
BlynkTimer timer;
   b5444:	f000 b837 	b.w	b54b6 <_ZN10BlynkTimerC1Ev>
   b5448:	2003e338 	.word	0x2003e338
   b544c:	2003e318 	.word	0x2003e318
   b5450:	2003e374 	.word	0x2003e374

000b5454 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   b5454:	f000 bb44 	b.w	b5ae0 <delay>

000b5458 <_Z11BlynkMillisv>:

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5458:	f000 b8fe 	b.w	b5658 <HAL_Timer_Get_Milli_Seconds>

000b545c <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   b545c:	4770      	bx	lr

000b545e <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   b545e:	4770      	bx	lr

000b5460 <BlynkNoOpCbk>:
{}
   b5460:	4770      	bx	lr
	...

000b5464 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   b5464:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   b5466:	bf5a      	itte	pl
   b5468:	4b02      	ldrpl	r3, [pc, #8]	; (b5474 <GetReadHandler+0x10>)
   b546a:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b546e:	2000      	movmi	r0, #0
#endif
}
   b5470:	4770      	bx	lr
   b5472:	bf00      	nop
   b5474:	000b719c 	.word	0x000b719c

000b5478 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   b5478:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   b547a:	bf5a      	itte	pl
   b547c:	4b02      	ldrpl	r3, [pc, #8]	; (b5488 <GetWriteHandler+0x10>)
   b547e:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b5482:	2000      	movmi	r0, #0
#endif
}
   b5484:	4770      	bx	lr
   b5486:	bf00      	nop
   b5488:	000b739c 	.word	0x000b739c

000b548c <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b548c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b548e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5490:	4604      	mov	r4, r0
      if (_M_manager)
   b5492:	b113      	cbz	r3, b549a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5494:	2203      	movs	r2, #3
   b5496:	4601      	mov	r1, r0
   b5498:	4798      	blx	r3
    }
   b549a:	4620      	mov	r0, r4
   b549c:	bd10      	pop	{r4, pc}

000b549e <_ZN10BlynkTimer12isValidTimerEj>:

    bool _M_empty() const { return !_M_manager; }
   b549e:	2334      	movs	r3, #52	; 0x34
   b54a0:	fb03 0101 	mla	r1, r3, r1, r0
    // -1 on failure (f == NULL) or no free timers
    int setupTimer(unsigned long d, const timer_callback& f, unsigned n);
    int setupTimer(unsigned long d,      timer_callback_p f, void* p, unsigned n);

    bool isValidTimer(unsigned id) {
        return timer[id].callback || timer[id].callback_p;
   b54a4:	68cb      	ldr	r3, [r1, #12]
   b54a6:	b923      	cbnz	r3, b54b2 <_ZN10BlynkTimer12isValidTimerEj+0x14>
   b54a8:	6948      	ldr	r0, [r1, #20]
   b54aa:	3800      	subs	r0, #0
   b54ac:	bf18      	it	ne
   b54ae:	2001      	movne	r0, #1
   b54b0:	4770      	bx	lr
   b54b2:	2001      	movs	r0, #1
    }
   b54b4:	4770      	bx	lr

000b54b6 <_ZN10BlynkTimerC1Ev>:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }


SimpleTimer::SimpleTimer()
    : numTimers (-1)
   b54b6:	4603      	mov	r3, r0
   b54b8:	f500 7250 	add.w	r2, r0, #832	; 0x340
    _Function_base() : _M_manager(nullptr) { }
   b54bc:	2100      	movs	r1, #0
   b54be:	60d9      	str	r1, [r3, #12]
   b54c0:	3334      	adds	r3, #52	; 0x34
   b54c2:	429a      	cmp	r2, r3
   b54c4:	d1fb      	bne.n	b54be <_ZN10BlynkTimerC1Ev+0x8>
   b54c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b54ca:	f8c0 3340 	str.w	r3, [r0, #832]	; 0x340
{
}
   b54ce:	4770      	bx	lr

000b54d0 <_ZNSt8functionIFvvEE4swapERS1_>:
       *  @param __x A %function with identical call signature.
       *
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x) noexcept
   b54d0:	b513      	push	{r0, r1, r4, lr}
   b54d2:	460b      	mov	r3, r1
   b54d4:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b54d6:	e9d0 0100 	ldrd	r0, r1, [r0]
   b54da:	466c      	mov	r4, sp
   b54dc:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b54e0:	e893 0003 	ldmia.w	r3, {r0, r1}
   b54e4:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b54e8:	e894 0003 	ldmia.w	r4, {r0, r1}
   b54ec:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b54f0:	6898      	ldr	r0, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b54f2:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b54f4:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b54f6:	6099      	str	r1, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b54f8:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b54fa:	68d8      	ldr	r0, [r3, #12]
   b54fc:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b54fe:	60d9      	str	r1, [r3, #12]
      {
	std::swap(_M_functor, __x._M_functor);
	std::swap(_M_manager, __x._M_manager);
	std::swap(_M_invoker, __x._M_invoker);
      }
   b5500:	b002      	add	sp, #8
   b5502:	bd10      	pop	{r4, pc}

000b5504 <_ZN10BlynkTimer11deleteTimerEj>:
    }
    // false return for non-used numTimer, no callback
    return false;
}

void SimpleTimer::deleteTimer(unsigned timerId) {
   b5504:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (timerId >= MAX_TIMERS) {
   b5506:	290f      	cmp	r1, #15
void SimpleTimer::deleteTimer(unsigned timerId) {
   b5508:	b093      	sub	sp, #76	; 0x4c
   b550a:	4604      	mov	r4, r0
   b550c:	460d      	mov	r5, r1
    if (timerId >= MAX_TIMERS) {
   b550e:	d83d      	bhi.n	b558c <_ZN10BlynkTimer11deleteTimerEj+0x88>
        return;
    }

    // nothing to delete if no timers are in use
    if (numTimers == 0) {
   b5510:	f8d0 3340 	ldr.w	r3, [r0, #832]	; 0x340
   b5514:	2b00      	cmp	r3, #0
   b5516:	d039      	beq.n	b558c <_ZN10BlynkTimer11deleteTimerEj+0x88>
        return;
    }

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (isValidTimer(timerId)) {
   b5518:	f7ff ffc1 	bl	b549e <_ZN10BlynkTimer12isValidTimerEj>
   b551c:	2800      	cmp	r0, #0
   b551e:	d035      	beq.n	b558c <_ZN10BlynkTimer11deleteTimerEj+0x88>
        timer[timerId] = timer_t();
   b5520:	2634      	movs	r6, #52	; 0x34
   b5522:	4632      	mov	r2, r6
   b5524:	4375      	muls	r5, r6
   b5526:	2100      	movs	r1, #0
   b5528:	a805      	add	r0, sp, #20
   b552a:	f001 fc73 	bl	b6e14 <memset>
      unsigned long delay;              // delay value
      unsigned maxNumRuns;              // number of runs to be executed
      unsigned numRuns;                 // number of executed runs
      bool enabled;                  // true if enabled
      unsigned toBeCalled;              // deferred function call (sort of) - N.B.: only used in run()
    } timer_t;
   b552e:	1d2f      	adds	r7, r5, #4
    _Function_base() : _M_manager(nullptr) { }
   b5530:	2300      	movs	r3, #0
   b5532:	5163      	str	r3, [r4, r5]
	__x.swap(*this);
   b5534:	a901      	add	r1, sp, #4
   b5536:	a806      	add	r0, sp, #24
   b5538:	4427      	add	r7, r4
    _Function_base() : _M_manager(nullptr) { }
   b553a:	9303      	str	r3, [sp, #12]
	__x.swap(*this);
   b553c:	f7ff ffc8 	bl	b54d0 <_ZNSt8functionIFvvEE4swapERS1_>
	function(std::move(__x)).swap(*this);
   b5540:	4639      	mov	r1, r7
   b5542:	a801      	add	r0, sp, #4
   b5544:	1966      	adds	r6, r4, r5
   b5546:	f7ff ffc3 	bl	b54d0 <_ZNSt8functionIFvvEE4swapERS1_>
    class function<_Res(_ArgTypes...)>
   b554a:	a801      	add	r0, sp, #4
   b554c:	f7ff ff9e 	bl	b548c <_ZNSt14_Function_baseD1Ev>
   b5550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5552:	6173      	str	r3, [r6, #20]
   b5554:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b5556:	61b3      	str	r3, [r6, #24]
   b5558:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   b555c:	7733      	strb	r3, [r6, #28]
   b555e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b5560:	6233      	str	r3, [r6, #32]
   b5562:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b5564:	6273      	str	r3, [r6, #36]	; 0x24
   b5566:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b5568:	62b3      	str	r3, [r6, #40]	; 0x28
   b556a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   b556e:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
   b5572:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b5574:	6333      	str	r3, [r6, #48]	; 0x30
   b5576:	a806      	add	r0, sp, #24
   b5578:	f7ff ff88 	bl	b548c <_ZNSt14_Function_baseD1Ev>
static inline unsigned long elapsed() { return BlynkMillis(); }
   b557c:	f7ff ff6c 	bl	b5458 <_Z11BlynkMillisv>
        timer[timerId].prev_millis = elapsed();
   b5580:	5160      	str	r0, [r4, r5]

        // update number of timers
        numTimers--;
   b5582:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
   b5586:	3b01      	subs	r3, #1
   b5588:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    }
}
   b558c:	b013      	add	sp, #76	; 0x4c
   b558e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5590 <_ZN10BlynkTimer3runEv>:
void SimpleTimer::run() {
   b5590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5594:	4605      	mov	r5, r0
static inline unsigned long elapsed() { return BlynkMillis(); }
   b5596:	f7ff ff5f 	bl	b5458 <_Z11BlynkMillisv>
    for (i = 0; i < MAX_TIMERS; i++) {
   b559a:	2600      	movs	r6, #0
static inline unsigned long elapsed() { return BlynkMillis(); }
   b559c:	4607      	mov	r7, r0
    for (i = 0; i < MAX_TIMERS; i++) {
   b559e:	462c      	mov	r4, r5
        timer[i].toBeCalled = DEFCALL_DONTRUN;
   b55a0:	46b1      	mov	r9, r6
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   b55a2:	f04f 0801 	mov.w	r8, #1
                            timer[i].toBeCalled = DEFCALL_RUNANDDEL;
   b55a6:	f04f 0a02 	mov.w	sl, #2
        timer[i].toBeCalled = DEFCALL_DONTRUN;
   b55aa:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
        if (isValidTimer(i)) {
   b55ae:	4631      	mov	r1, r6
   b55b0:	4628      	mov	r0, r5
   b55b2:	f7ff ff74 	bl	b549e <_ZN10BlynkTimer12isValidTimerEj>
   b55b6:	b180      	cbz	r0, b55da <_ZN10BlynkTimer3runEv+0x4a>
            if ((current_millis - timer[i].prev_millis) >= timer[i].delay) {
   b55b8:	6823      	ldr	r3, [r4, #0]
   b55ba:	6a21      	ldr	r1, [r4, #32]
   b55bc:	1afa      	subs	r2, r7, r3
   b55be:	428a      	cmp	r2, r1
   b55c0:	d30b      	bcc.n	b55da <_ZN10BlynkTimer3runEv+0x4a>
                unsigned long skipTimes = (current_millis - timer[i].prev_millis) / timer[i].delay;
   b55c2:	fbb2 f2f1 	udiv	r2, r2, r1
                timer[i].prev_millis += timer[i].delay * skipTimes;
   b55c6:	fb01 3302 	mla	r3, r1, r2, r3
   b55ca:	6023      	str	r3, [r4, #0]
                if (timer[i].enabled) {
   b55cc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b55d0:	b11b      	cbz	r3, b55da <_ZN10BlynkTimer3runEv+0x4a>
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
   b55d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b55d4:	b9ea      	cbnz	r2, b5612 <_ZN10BlynkTimer3runEv+0x82>
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   b55d6:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
    for (i = 0; i < MAX_TIMERS; i++) {
   b55da:	3601      	adds	r6, #1
   b55dc:	2e10      	cmp	r6, #16
   b55de:	f104 0434 	add.w	r4, r4, #52	; 0x34
   b55e2:	d1e2      	bne.n	b55aa <_ZN10BlynkTimer3runEv+0x1a>
   b55e4:	1d2c      	adds	r4, r5, #4
    for (i = 0; i < MAX_TIMERS; i++) {
   b55e6:	2600      	movs	r6, #0
        if (timer[i].toBeCalled == DEFCALL_DONTRUN)
   b55e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b55ea:	b15b      	cbz	r3, b5604 <_ZN10BlynkTimer3runEv+0x74>
        if (timer[i].hasParam)
   b55ec:	7e23      	ldrb	r3, [r4, #24]
   b55ee:	b1db      	cbz	r3, b5628 <_ZN10BlynkTimer3runEv+0x98>
            timer[i].callback_p(timer[i].param);
   b55f0:	e9d4 3004 	ldrd	r3, r0, [r4, #16]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b55f4:	4798      	blx	r3
        if (timer[i].toBeCalled == DEFCALL_RUNANDDEL)
   b55f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b55f8:	2b02      	cmp	r3, #2
   b55fa:	d103      	bne.n	b5604 <_ZN10BlynkTimer3runEv+0x74>
            deleteTimer(i);
   b55fc:	4631      	mov	r1, r6
   b55fe:	4628      	mov	r0, r5
   b5600:	f7ff ff80 	bl	b5504 <_ZN10BlynkTimer11deleteTimerEj>
    for (i = 0; i < MAX_TIMERS; i++) {
   b5604:	3601      	adds	r6, #1
   b5606:	2e10      	cmp	r6, #16
   b5608:	f104 0434 	add.w	r4, r4, #52	; 0x34
   b560c:	d1ec      	bne.n	b55e8 <_ZN10BlynkTimer3runEv+0x58>
}
   b560e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
   b5612:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b5614:	429a      	cmp	r2, r3
   b5616:	d9e0      	bls.n	b55da <_ZN10BlynkTimer3runEv+0x4a>
                        timer[i].numRuns++;
   b5618:	3301      	adds	r3, #1
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
   b561a:	429a      	cmp	r2, r3
                        timer[i].numRuns++;
   b561c:	62a3      	str	r3, [r4, #40]	; 0x28
                            timer[i].toBeCalled = DEFCALL_RUNANDDEL;
   b561e:	bf8c      	ite	hi
   b5620:	4643      	movhi	r3, r8
   b5622:	4653      	movls	r3, sl
   b5624:	6323      	str	r3, [r4, #48]	; 0x30
   b5626:	e7d8      	b.n	b55da <_ZN10BlynkTimer3runEv+0x4a>
      if (_M_empty())
   b5628:	68a3      	ldr	r3, [r4, #8]
   b562a:	b90b      	cbnz	r3, b5630 <_ZN10BlynkTimer3runEv+0xa0>
	__throw_bad_function_call();
   b562c:	f001 fac0 	bl	b6bb0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5630:	68e3      	ldr	r3, [r4, #12]
   b5632:	4620      	mov	r0, r4
   b5634:	e7de      	b.n	b55f4 <_ZN10BlynkTimer3runEv+0x64>
	...

000b5638 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5638:	b508      	push	{r3, lr}
   b563a:	4b02      	ldr	r3, [pc, #8]	; (b5644 <os_mutex_recursive_create+0xc>)
   b563c:	681b      	ldr	r3, [r3, #0]
   b563e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5640:	9301      	str	r3, [sp, #4]
   b5642:	bd08      	pop	{r3, pc}
   b5644:	00030248 	.word	0x00030248

000b5648 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5648:	b508      	push	{r3, lr}
   b564a:	4b02      	ldr	r3, [pc, #8]	; (b5654 <HAL_RNG_GetRandomNumber+0xc>)
   b564c:	681b      	ldr	r3, [r3, #0]
   b564e:	685b      	ldr	r3, [r3, #4]
   b5650:	9301      	str	r3, [sp, #4]
   b5652:	bd08      	pop	{r3, pc}
   b5654:	00030218 	.word	0x00030218

000b5658 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5658:	b508      	push	{r3, lr}
   b565a:	4b02      	ldr	r3, [pc, #8]	; (b5664 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b565c:	681b      	ldr	r3, [r3, #0]
   b565e:	695b      	ldr	r3, [r3, #20]
   b5660:	9301      	str	r3, [sp, #4]
   b5662:	bd08      	pop	{r3, pc}
   b5664:	00030218 	.word	0x00030218

000b5668 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b5668:	b508      	push	{r3, lr}
   b566a:	4b02      	ldr	r3, [pc, #8]	; (b5674 <hal_pin_validate_function+0xc>)
   b566c:	681b      	ldr	r3, [r3, #0]
   b566e:	685b      	ldr	r3, [r3, #4]
   b5670:	9301      	str	r3, [sp, #4]
   b5672:	bd08      	pop	{r3, pc}
   b5674:	0003022c 	.word	0x0003022c

000b5678 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b5678:	b508      	push	{r3, lr}
   b567a:	4b02      	ldr	r3, [pc, #8]	; (b5684 <hal_gpio_mode+0xc>)
   b567c:	681b      	ldr	r3, [r3, #0]
   b567e:	689b      	ldr	r3, [r3, #8]
   b5680:	9301      	str	r3, [sp, #4]
   b5682:	bd08      	pop	{r3, pc}
   b5684:	0003022c 	.word	0x0003022c

000b5688 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b5688:	b508      	push	{r3, lr}
   b568a:	4b02      	ldr	r3, [pc, #8]	; (b5694 <hal_gpio_get_mode+0xc>)
   b568c:	681b      	ldr	r3, [r3, #0]
   b568e:	68db      	ldr	r3, [r3, #12]
   b5690:	9301      	str	r3, [sp, #4]
   b5692:	bd08      	pop	{r3, pc}
   b5694:	0003022c 	.word	0x0003022c

000b5698 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b5698:	b508      	push	{r3, lr}
   b569a:	4b02      	ldr	r3, [pc, #8]	; (b56a4 <hal_gpio_write+0xc>)
   b569c:	681b      	ldr	r3, [r3, #0]
   b569e:	691b      	ldr	r3, [r3, #16]
   b56a0:	9301      	str	r3, [sp, #4]
   b56a2:	bd08      	pop	{r3, pc}
   b56a4:	0003022c 	.word	0x0003022c

000b56a8 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b56a8:	b508      	push	{r3, lr}
   b56aa:	4b02      	ldr	r3, [pc, #8]	; (b56b4 <hal_gpio_read+0xc>)
   b56ac:	681b      	ldr	r3, [r3, #0]
   b56ae:	695b      	ldr	r3, [r3, #20]
   b56b0:	9301      	str	r3, [sp, #4]
   b56b2:	bd08      	pop	{r3, pc}
   b56b4:	0003022c 	.word	0x0003022c

000b56b8 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
   b56b8:	b508      	push	{r3, lr}
   b56ba:	4b02      	ldr	r3, [pc, #8]	; (b56c4 <HAL_DAC_Write+0xc>)
   b56bc:	681b      	ldr	r3, [r3, #0]
   b56be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b56c0:	9301      	str	r3, [sp, #4]
   b56c2:	bd08      	pop	{r3, pc}
   b56c4:	0003022c 	.word	0x0003022c

000b56c8 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b56c8:	b508      	push	{r3, lr}
   b56ca:	4b02      	ldr	r3, [pc, #8]	; (b56d4 <hal_adc_read+0xc>)
   b56cc:	681b      	ldr	r3, [r3, #0]
   b56ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b56d0:	9301      	str	r3, [sp, #4]
   b56d2:	bd08      	pop	{r3, pc}
   b56d4:	0003022c 	.word	0x0003022c

000b56d8 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(hal_pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(hal_pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(hal_pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b56d8:	b508      	push	{r3, lr}
   b56da:	4b02      	ldr	r3, [pc, #8]	; (b56e4 <hal_pwm_write_ext+0xc>)
   b56dc:	681b      	ldr	r3, [r3, #0]
   b56de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b56e0:	9301      	str	r3, [sp, #4]
   b56e2:	bd08      	pop	{r3, pc}
   b56e4:	0003022c 	.word	0x0003022c

000b56e8 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b56e8:	b508      	push	{r3, lr}
   b56ea:	4b02      	ldr	r3, [pc, #8]	; (b56f4 <hal_i2c_write+0xc>)
   b56ec:	681b      	ldr	r3, [r3, #0]
   b56ee:	6a1b      	ldr	r3, [r3, #32]
   b56f0:	9301      	str	r3, [sp, #4]
   b56f2:	bd08      	pop	{r3, pc}
   b56f4:	00030228 	.word	0x00030228

000b56f8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b56f8:	b508      	push	{r3, lr}
   b56fa:	4b02      	ldr	r3, [pc, #8]	; (b5704 <hal_i2c_available+0xc>)
   b56fc:	681b      	ldr	r3, [r3, #0]
   b56fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5700:	9301      	str	r3, [sp, #4]
   b5702:	bd08      	pop	{r3, pc}
   b5704:	00030228 	.word	0x00030228

000b5708 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5708:	b508      	push	{r3, lr}
   b570a:	4b02      	ldr	r3, [pc, #8]	; (b5714 <hal_i2c_read+0xc>)
   b570c:	681b      	ldr	r3, [r3, #0]
   b570e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5710:	9301      	str	r3, [sp, #4]
   b5712:	bd08      	pop	{r3, pc}
   b5714:	00030228 	.word	0x00030228

000b5718 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5718:	b508      	push	{r3, lr}
   b571a:	4b02      	ldr	r3, [pc, #8]	; (b5724 <hal_i2c_peek+0xc>)
   b571c:	681b      	ldr	r3, [r3, #0]
   b571e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5720:	9301      	str	r3, [sp, #4]
   b5722:	bd08      	pop	{r3, pc}
   b5724:	00030228 	.word	0x00030228

000b5728 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5728:	b508      	push	{r3, lr}
   b572a:	4b02      	ldr	r3, [pc, #8]	; (b5734 <hal_i2c_flush+0xc>)
   b572c:	681b      	ldr	r3, [r3, #0]
   b572e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5730:	9301      	str	r3, [sp, #4]
   b5732:	bd08      	pop	{r3, pc}
   b5734:	00030228 	.word	0x00030228

000b5738 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5738:	b508      	push	{r3, lr}
   b573a:	4b02      	ldr	r3, [pc, #8]	; (b5744 <hal_i2c_is_enabled+0xc>)
   b573c:	681b      	ldr	r3, [r3, #0]
   b573e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5740:	9301      	str	r3, [sp, #4]
   b5742:	bd08      	pop	{r3, pc}
   b5744:	00030228 	.word	0x00030228

000b5748 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5748:	b508      	push	{r3, lr}
   b574a:	4b02      	ldr	r3, [pc, #8]	; (b5754 <hal_i2c_init+0xc>)
   b574c:	681b      	ldr	r3, [r3, #0]
   b574e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5750:	9301      	str	r3, [sp, #4]
   b5752:	bd08      	pop	{r3, pc}
   b5754:	00030228 	.word	0x00030228

000b5758 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5758:	b508      	push	{r3, lr}
   b575a:	4b02      	ldr	r3, [pc, #8]	; (b5764 <if_index_to_name+0xc>)
   b575c:	681b      	ldr	r3, [r3, #0]
   b575e:	695b      	ldr	r3, [r3, #20]
   b5760:	9301      	str	r3, [sp, #4]
   b5762:	bd08      	pop	{r3, pc}
   b5764:	0003026c 	.word	0x0003026c

000b5768 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5768:	b508      	push	{r3, lr}
   b576a:	4b02      	ldr	r3, [pc, #8]	; (b5774 <inet_inet_ntop+0xc>)
   b576c:	681b      	ldr	r3, [r3, #0]
   b576e:	695b      	ldr	r3, [r3, #20]
   b5770:	9301      	str	r3, [sp, #4]
   b5772:	bd08      	pop	{r3, pc}
   b5774:	00030264 	.word	0x00030264

000b5778 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5778:	b508      	push	{r3, lr}
   b577a:	4b02      	ldr	r3, [pc, #8]	; (b5784 <inet_htonl+0xc>)
   b577c:	681b      	ldr	r3, [r3, #0]
   b577e:	6a1b      	ldr	r3, [r3, #32]
   b5780:	9301      	str	r3, [sp, #4]
   b5782:	bd08      	pop	{r3, pc}
   b5784:	00030264 	.word	0x00030264

000b5788 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   b5788:	b508      	push	{r3, lr}
   b578a:	4b02      	ldr	r3, [pc, #8]	; (b5794 <inet_ntohs+0xc>)
   b578c:	681b      	ldr	r3, [r3, #0]
   b578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5790:	9301      	str	r3, [sp, #4]
   b5792:	bd08      	pop	{r3, pc}
   b5794:	00030264 	.word	0x00030264

000b5798 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5798:	b508      	push	{r3, lr}
   b579a:	4b02      	ldr	r3, [pc, #8]	; (b57a4 <inet_htons+0xc>)
   b579c:	681b      	ldr	r3, [r3, #0]
   b579e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b57a0:	9301      	str	r3, [sp, #4]
   b57a2:	bd08      	pop	{r3, pc}
   b57a4:	00030264 	.word	0x00030264

000b57a8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b57a8:	b508      	push	{r3, lr}
   b57aa:	4b02      	ldr	r3, [pc, #8]	; (b57b4 <netdb_freeaddrinfo+0xc>)
   b57ac:	681b      	ldr	r3, [r3, #0]
   b57ae:	689b      	ldr	r3, [r3, #8]
   b57b0:	9301      	str	r3, [sp, #4]
   b57b2:	bd08      	pop	{r3, pc}
   b57b4:	00030268 	.word	0x00030268

000b57b8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b57b8:	b508      	push	{r3, lr}
   b57ba:	4b02      	ldr	r3, [pc, #8]	; (b57c4 <netdb_getaddrinfo+0xc>)
   b57bc:	681b      	ldr	r3, [r3, #0]
   b57be:	68db      	ldr	r3, [r3, #12]
   b57c0:	9301      	str	r3, [sp, #4]
   b57c2:	bd08      	pop	{r3, pc}
   b57c4:	00030268 	.word	0x00030268

000b57c8 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b57c8:	b508      	push	{r3, lr}
   b57ca:	4b02      	ldr	r3, [pc, #8]	; (b57d4 <sock_setsockopt+0xc>)
   b57cc:	681b      	ldr	r3, [r3, #0]
   b57ce:	699b      	ldr	r3, [r3, #24]
   b57d0:	9301      	str	r3, [sp, #4]
   b57d2:	bd08      	pop	{r3, pc}
   b57d4:	00030238 	.word	0x00030238

000b57d8 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b57d8:	b508      	push	{r3, lr}
   b57da:	4b02      	ldr	r3, [pc, #8]	; (b57e4 <sock_close+0xc>)
   b57dc:	681b      	ldr	r3, [r3, #0]
   b57de:	69db      	ldr	r3, [r3, #28]
   b57e0:	9301      	str	r3, [sp, #4]
   b57e2:	bd08      	pop	{r3, pc}
   b57e4:	00030238 	.word	0x00030238

000b57e8 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b57e8:	b508      	push	{r3, lr}
   b57ea:	4b02      	ldr	r3, [pc, #8]	; (b57f4 <sock_connect+0xc>)
   b57ec:	681b      	ldr	r3, [r3, #0]
   b57ee:	6a1b      	ldr	r3, [r3, #32]
   b57f0:	9301      	str	r3, [sp, #4]
   b57f2:	bd08      	pop	{r3, pc}
   b57f4:	00030238 	.word	0x00030238

000b57f8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b57f8:	b508      	push	{r3, lr}
   b57fa:	4b02      	ldr	r3, [pc, #8]	; (b5804 <sock_recv+0xc>)
   b57fc:	681b      	ldr	r3, [r3, #0]
   b57fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5800:	9301      	str	r3, [sp, #4]
   b5802:	bd08      	pop	{r3, pc}
   b5804:	00030238 	.word	0x00030238

000b5808 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b5808:	b508      	push	{r3, lr}
   b580a:	4b02      	ldr	r3, [pc, #8]	; (b5814 <sock_send+0xc>)
   b580c:	681b      	ldr	r3, [r3, #0]
   b580e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5810:	9301      	str	r3, [sp, #4]
   b5812:	bd08      	pop	{r3, pc}
   b5814:	00030238 	.word	0x00030238

000b5818 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5818:	b508      	push	{r3, lr}
   b581a:	4b02      	ldr	r3, [pc, #8]	; (b5824 <sock_socket+0xc>)
   b581c:	681b      	ldr	r3, [r3, #0]
   b581e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5820:	9301      	str	r3, [sp, #4]
   b5822:	bd08      	pop	{r3, pc}
   b5824:	00030238 	.word	0x00030238

000b5828 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5828:	b508      	push	{r3, lr}
   b582a:	4b02      	ldr	r3, [pc, #8]	; (b5834 <hal_spi_init+0xc>)
   b582c:	681b      	ldr	r3, [r3, #0]
   b582e:	69db      	ldr	r3, [r3, #28]
   b5830:	9301      	str	r3, [sp, #4]
   b5832:	bd08      	pop	{r3, pc}
   b5834:	00030230 	.word	0x00030230

000b5838 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5838:	b508      	push	{r3, lr}
   b583a:	4b02      	ldr	r3, [pc, #8]	; (b5844 <hal_spi_is_enabled+0xc>)
   b583c:	681b      	ldr	r3, [r3, #0]
   b583e:	6a1b      	ldr	r3, [r3, #32]
   b5840:	9301      	str	r3, [sp, #4]
   b5842:	bd08      	pop	{r3, pc}
   b5844:	00030230 	.word	0x00030230

000b5848 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5848:	b508      	push	{r3, lr}
   b584a:	4b02      	ldr	r3, [pc, #8]	; (b5854 <hal_usart_write+0xc>)
   b584c:	681b      	ldr	r3, [r3, #0]
   b584e:	68db      	ldr	r3, [r3, #12]
   b5850:	9301      	str	r3, [sp, #4]
   b5852:	bd08      	pop	{r3, pc}
   b5854:	0003023c 	.word	0x0003023c

000b5858 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5858:	b508      	push	{r3, lr}
   b585a:	4b02      	ldr	r3, [pc, #8]	; (b5864 <hal_usart_available+0xc>)
   b585c:	681b      	ldr	r3, [r3, #0]
   b585e:	691b      	ldr	r3, [r3, #16]
   b5860:	9301      	str	r3, [sp, #4]
   b5862:	bd08      	pop	{r3, pc}
   b5864:	0003023c 	.word	0x0003023c

000b5868 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5868:	b508      	push	{r3, lr}
   b586a:	4b02      	ldr	r3, [pc, #8]	; (b5874 <hal_usart_read+0xc>)
   b586c:	681b      	ldr	r3, [r3, #0]
   b586e:	695b      	ldr	r3, [r3, #20]
   b5870:	9301      	str	r3, [sp, #4]
   b5872:	bd08      	pop	{r3, pc}
   b5874:	0003023c 	.word	0x0003023c

000b5878 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5878:	b508      	push	{r3, lr}
   b587a:	4b02      	ldr	r3, [pc, #8]	; (b5884 <hal_usart_peek+0xc>)
   b587c:	681b      	ldr	r3, [r3, #0]
   b587e:	699b      	ldr	r3, [r3, #24]
   b5880:	9301      	str	r3, [sp, #4]
   b5882:	bd08      	pop	{r3, pc}
   b5884:	0003023c 	.word	0x0003023c

000b5888 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5888:	b508      	push	{r3, lr}
   b588a:	4b02      	ldr	r3, [pc, #8]	; (b5894 <hal_usart_flush+0xc>)
   b588c:	681b      	ldr	r3, [r3, #0]
   b588e:	69db      	ldr	r3, [r3, #28]
   b5890:	9301      	str	r3, [sp, #4]
   b5892:	bd08      	pop	{r3, pc}
   b5894:	0003023c 	.word	0x0003023c

000b5898 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5898:	b508      	push	{r3, lr}
   b589a:	4b02      	ldr	r3, [pc, #8]	; (b58a4 <hal_usart_is_enabled+0xc>)
   b589c:	681b      	ldr	r3, [r3, #0]
   b589e:	6a1b      	ldr	r3, [r3, #32]
   b58a0:	9301      	str	r3, [sp, #4]
   b58a2:	bd08      	pop	{r3, pc}
   b58a4:	0003023c 	.word	0x0003023c

000b58a8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b58a8:	b508      	push	{r3, lr}
   b58aa:	4b02      	ldr	r3, [pc, #8]	; (b58b4 <hal_usart_available_data_for_write+0xc>)
   b58ac:	681b      	ldr	r3, [r3, #0]
   b58ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b58b0:	9301      	str	r3, [sp, #4]
   b58b2:	bd08      	pop	{r3, pc}
   b58b4:	0003023c 	.word	0x0003023c

000b58b8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b58b8:	b508      	push	{r3, lr}
   b58ba:	4b02      	ldr	r3, [pc, #8]	; (b58c4 <hal_usart_init_ex+0xc>)
   b58bc:	681b      	ldr	r3, [r3, #0]
   b58be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b58c0:	9301      	str	r3, [sp, #4]
   b58c2:	bd08      	pop	{r3, pc}
   b58c4:	0003023c 	.word	0x0003023c

000b58c8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b58c8:	b508      	push	{r3, lr}
   b58ca:	4b02      	ldr	r3, [pc, #8]	; (b58d4 <HAL_USB_USART_Init+0xc>)
   b58cc:	681b      	ldr	r3, [r3, #0]
   b58ce:	681b      	ldr	r3, [r3, #0]
   b58d0:	9301      	str	r3, [sp, #4]
   b58d2:	bd08      	pop	{r3, pc}
   b58d4:	0003024c 	.word	0x0003024c

000b58d8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b58d8:	b508      	push	{r3, lr}
   b58da:	4b02      	ldr	r3, [pc, #8]	; (b58e4 <HAL_USB_USART_Available_Data+0xc>)
   b58dc:	681b      	ldr	r3, [r3, #0]
   b58de:	691b      	ldr	r3, [r3, #16]
   b58e0:	9301      	str	r3, [sp, #4]
   b58e2:	bd08      	pop	{r3, pc}
   b58e4:	0003024c 	.word	0x0003024c

000b58e8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b58e8:	b508      	push	{r3, lr}
   b58ea:	4b02      	ldr	r3, [pc, #8]	; (b58f4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b58ec:	681b      	ldr	r3, [r3, #0]
   b58ee:	695b      	ldr	r3, [r3, #20]
   b58f0:	9301      	str	r3, [sp, #4]
   b58f2:	bd08      	pop	{r3, pc}
   b58f4:	0003024c 	.word	0x0003024c

000b58f8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b58f8:	b508      	push	{r3, lr}
   b58fa:	4b02      	ldr	r3, [pc, #8]	; (b5904 <HAL_USB_USART_Receive_Data+0xc>)
   b58fc:	681b      	ldr	r3, [r3, #0]
   b58fe:	699b      	ldr	r3, [r3, #24]
   b5900:	9301      	str	r3, [sp, #4]
   b5902:	bd08      	pop	{r3, pc}
   b5904:	0003024c 	.word	0x0003024c

000b5908 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5908:	b508      	push	{r3, lr}
   b590a:	4b02      	ldr	r3, [pc, #8]	; (b5914 <HAL_USB_USART_Send_Data+0xc>)
   b590c:	681b      	ldr	r3, [r3, #0]
   b590e:	69db      	ldr	r3, [r3, #28]
   b5910:	9301      	str	r3, [sp, #4]
   b5912:	bd08      	pop	{r3, pc}
   b5914:	0003024c 	.word	0x0003024c

000b5918 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5918:	b508      	push	{r3, lr}
   b591a:	4b02      	ldr	r3, [pc, #8]	; (b5924 <HAL_USB_USART_Flush_Data+0xc>)
   b591c:	681b      	ldr	r3, [r3, #0]
   b591e:	6a1b      	ldr	r3, [r3, #32]
   b5920:	9301      	str	r3, [sp, #4]
   b5922:	bd08      	pop	{r3, pc}
   b5924:	0003024c 	.word	0x0003024c

000b5928 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5928:	b508      	push	{r3, lr}
   b592a:	4b02      	ldr	r3, [pc, #8]	; (b5934 <log_message+0xc>)
   b592c:	681b      	ldr	r3, [r3, #0]
   b592e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5930:	9301      	str	r3, [sp, #4]
   b5932:	bd08      	pop	{r3, pc}
   b5934:	00030260 	.word	0x00030260

000b5938 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5938:	b508      	push	{r3, lr}
   b593a:	4b02      	ldr	r3, [pc, #8]	; (b5944 <set_system_mode+0xc>)
   b593c:	681b      	ldr	r3, [r3, #0]
   b593e:	685b      	ldr	r3, [r3, #4]
   b5940:	9301      	str	r3, [sp, #4]
   b5942:	bd08      	pop	{r3, pc}
   b5944:	00030220 	.word	0x00030220

000b5948 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5948:	b508      	push	{r3, lr}
   b594a:	4b02      	ldr	r3, [pc, #8]	; (b5954 <system_delay_ms+0xc>)
   b594c:	681b      	ldr	r3, [r3, #0]
   b594e:	695b      	ldr	r3, [r3, #20]
   b5950:	9301      	str	r3, [sp, #4]
   b5952:	bd08      	pop	{r3, pc}
   b5954:	00030220 	.word	0x00030220

000b5958 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b5958:	b508      	push	{r3, lr}
   b595a:	4b02      	ldr	r3, [pc, #8]	; (b5964 <system_thread_set_state+0xc>)
   b595c:	681b      	ldr	r3, [r3, #0]
   b595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5960:	9301      	str	r3, [sp, #4]
   b5962:	bd08      	pop	{r3, pc}
   b5964:	00030220 	.word	0x00030220

000b5968 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5968:	b508      	push	{r3, lr}
   b596a:	4b03      	ldr	r3, [pc, #12]	; (b5978 <system_ctrl_set_app_request_handler+0x10>)
   b596c:	681b      	ldr	r3, [r3, #0]
   b596e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5972:	9301      	str	r3, [sp, #4]
   b5974:	bd08      	pop	{r3, pc}
   b5976:	0000      	.short	0x0000
   b5978:	00030220 	.word	0x00030220

000b597c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b597c:	b508      	push	{r3, lr}
   b597e:	4b03      	ldr	r3, [pc, #12]	; (b598c <system_ctrl_set_result+0x10>)
   b5980:	681b      	ldr	r3, [r3, #0]
   b5982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5986:	9301      	str	r3, [sp, #4]
   b5988:	bd08      	pop	{r3, pc}
   b598a:	0000      	.short	0x0000
   b598c:	00030220 	.word	0x00030220

000b5990 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b5990:	b508      	push	{r3, lr}
   b5992:	4b02      	ldr	r3, [pc, #8]	; (b599c <spark_process+0xc>)
   b5994:	681b      	ldr	r3, [r3, #0]
   b5996:	689b      	ldr	r3, [r3, #8]
   b5998:	9301      	str	r3, [sp, #4]
   b599a:	bd08      	pop	{r3, pc}
   b599c:	00030244 	.word	0x00030244

000b59a0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b59a0:	b508      	push	{r3, lr}
   b59a2:	4b02      	ldr	r3, [pc, #8]	; (b59ac <spark_set_random_seed_from_cloud_handler+0xc>)
   b59a4:	681b      	ldr	r3, [r3, #0]
   b59a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b59a8:	9301      	str	r3, [sp, #4]
   b59aa:	bd08      	pop	{r3, pc}
   b59ac:	00030244 	.word	0x00030244

000b59b0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b59b0:	b508      	push	{r3, lr}
   b59b2:	4b02      	ldr	r3, [pc, #8]	; (b59bc <network_connect+0xc>)
   b59b4:	681b      	ldr	r3, [r3, #0]
   b59b6:	685b      	ldr	r3, [r3, #4]
   b59b8:	9301      	str	r3, [sp, #4]
   b59ba:	bd08      	pop	{r3, pc}
   b59bc:	00030240 	.word	0x00030240

000b59c0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b59c0:	b508      	push	{r3, lr}
   b59c2:	4b02      	ldr	r3, [pc, #8]	; (b59cc <network_connecting+0xc>)
   b59c4:	681b      	ldr	r3, [r3, #0]
   b59c6:	689b      	ldr	r3, [r3, #8]
   b59c8:	9301      	str	r3, [sp, #4]
   b59ca:	bd08      	pop	{r3, pc}
   b59cc:	00030240 	.word	0x00030240

000b59d0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b59d0:	b508      	push	{r3, lr}
   b59d2:	4b02      	ldr	r3, [pc, #8]	; (b59dc <network_disconnect+0xc>)
   b59d4:	681b      	ldr	r3, [r3, #0]
   b59d6:	68db      	ldr	r3, [r3, #12]
   b59d8:	9301      	str	r3, [sp, #4]
   b59da:	bd08      	pop	{r3, pc}
   b59dc:	00030240 	.word	0x00030240

000b59e0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b59e0:	b508      	push	{r3, lr}
   b59e2:	4b02      	ldr	r3, [pc, #8]	; (b59ec <network_ready+0xc>)
   b59e4:	681b      	ldr	r3, [r3, #0]
   b59e6:	691b      	ldr	r3, [r3, #16]
   b59e8:	9301      	str	r3, [sp, #4]
   b59ea:	bd08      	pop	{r3, pc}
   b59ec:	00030240 	.word	0x00030240

000b59f0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b59f0:	b508      	push	{r3, lr}
   b59f2:	4b02      	ldr	r3, [pc, #8]	; (b59fc <network_on+0xc>)
   b59f4:	681b      	ldr	r3, [r3, #0]
   b59f6:	695b      	ldr	r3, [r3, #20]
   b59f8:	9301      	str	r3, [sp, #4]
   b59fa:	bd08      	pop	{r3, pc}
   b59fc:	00030240 	.word	0x00030240

000b5a00 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5a00:	b508      	push	{r3, lr}
   b5a02:	4b02      	ldr	r3, [pc, #8]	; (b5a0c <network_off+0xc>)
   b5a04:	681b      	ldr	r3, [r3, #0]
   b5a06:	699b      	ldr	r3, [r3, #24]
   b5a08:	9301      	str	r3, [sp, #4]
   b5a0a:	bd08      	pop	{r3, pc}
   b5a0c:	00030240 	.word	0x00030240

000b5a10 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5a10:	b508      	push	{r3, lr}
   b5a12:	4b02      	ldr	r3, [pc, #8]	; (b5a1c <network_listen+0xc>)
   b5a14:	681b      	ldr	r3, [r3, #0]
   b5a16:	69db      	ldr	r3, [r3, #28]
   b5a18:	9301      	str	r3, [sp, #4]
   b5a1a:	bd08      	pop	{r3, pc}
   b5a1c:	00030240 	.word	0x00030240

000b5a20 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5a20:	b508      	push	{r3, lr}
   b5a22:	4b02      	ldr	r3, [pc, #8]	; (b5a2c <network_listening+0xc>)
   b5a24:	681b      	ldr	r3, [r3, #0]
   b5a26:	6a1b      	ldr	r3, [r3, #32]
   b5a28:	9301      	str	r3, [sp, #4]
   b5a2a:	bd08      	pop	{r3, pc}
   b5a2c:	00030240 	.word	0x00030240

000b5a30 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5a30:	b508      	push	{r3, lr}
   b5a32:	4b02      	ldr	r3, [pc, #8]	; (b5a3c <network_set_listen_timeout+0xc>)
   b5a34:	681b      	ldr	r3, [r3, #0]
   b5a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5a38:	9301      	str	r3, [sp, #4]
   b5a3a:	bd08      	pop	{r3, pc}
   b5a3c:	00030240 	.word	0x00030240

000b5a40 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5a40:	b508      	push	{r3, lr}
   b5a42:	4b02      	ldr	r3, [pc, #8]	; (b5a4c <network_get_listen_timeout+0xc>)
   b5a44:	681b      	ldr	r3, [r3, #0]
   b5a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5a48:	9301      	str	r3, [sp, #4]
   b5a4a:	bd08      	pop	{r3, pc}
   b5a4c:	00030240 	.word	0x00030240

000b5a50 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5a50:	b508      	push	{r3, lr}
   b5a52:	4b02      	ldr	r3, [pc, #8]	; (b5a5c <network_is_on+0xc>)
   b5a54:	681b      	ldr	r3, [r3, #0]
   b5a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5a58:	9301      	str	r3, [sp, #4]
   b5a5a:	bd08      	pop	{r3, pc}
   b5a5c:	00030240 	.word	0x00030240

000b5a60 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5a60:	b508      	push	{r3, lr}
   b5a62:	4b02      	ldr	r3, [pc, #8]	; (b5a6c <network_is_off+0xc>)
   b5a64:	681b      	ldr	r3, [r3, #0]
   b5a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5a68:	9301      	str	r3, [sp, #4]
   b5a6a:	bd08      	pop	{r3, pc}
   b5a6c:	00030240 	.word	0x00030240

000b5a70 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5a70:	b508      	push	{r3, lr}
   b5a72:	4b02      	ldr	r3, [pc, #8]	; (b5a7c <malloc+0xc>)
   b5a74:	681b      	ldr	r3, [r3, #0]
   b5a76:	681b      	ldr	r3, [r3, #0]
   b5a78:	9301      	str	r3, [sp, #4]
   b5a7a:	bd08      	pop	{r3, pc}
   b5a7c:	0003021c 	.word	0x0003021c

000b5a80 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5a80:	b508      	push	{r3, lr}
   b5a82:	4b02      	ldr	r3, [pc, #8]	; (b5a8c <free+0xc>)
   b5a84:	681b      	ldr	r3, [r3, #0]
   b5a86:	685b      	ldr	r3, [r3, #4]
   b5a88:	9301      	str	r3, [sp, #4]
   b5a8a:	bd08      	pop	{r3, pc}
   b5a8c:	0003021c 	.word	0x0003021c

000b5a90 <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b5a90:	b508      	push	{r3, lr}
   b5a92:	4b02      	ldr	r3, [pc, #8]	; (b5a9c <snprintf+0xc>)
   b5a94:	681b      	ldr	r3, [r3, #0]
   b5a96:	69db      	ldr	r3, [r3, #28]
   b5a98:	9301      	str	r3, [sp, #4]
   b5a9a:	bd08      	pop	{r3, pc}
   b5a9c:	0003021c 	.word	0x0003021c

000b5aa0 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b5aa0:	b508      	push	{r3, lr}
   b5aa2:	4b02      	ldr	r3, [pc, #8]	; (b5aac <abort+0xc>)
   b5aa4:	681b      	ldr	r3, [r3, #0]
   b5aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5aa8:	9301      	str	r3, [sp, #4]
   b5aaa:	bd08      	pop	{r3, pc}
   b5aac:	0003021c 	.word	0x0003021c

000b5ab0 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5ab0:	b508      	push	{r3, lr}
   b5ab2:	4b02      	ldr	r3, [pc, #8]	; (b5abc <__errno+0xc>)
   b5ab4:	681b      	ldr	r3, [r3, #0]
   b5ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5ab8:	9301      	str	r3, [sp, #4]
   b5aba:	bd08      	pop	{r3, pc}
   b5abc:	0003021c 	.word	0x0003021c

000b5ac0 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5ac0:	b508      	push	{r3, lr}
   b5ac2:	4b02      	ldr	r3, [pc, #8]	; (b5acc <__assert_func+0xc>)
   b5ac4:	681b      	ldr	r3, [r3, #0]
   b5ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5ac8:	9301      	str	r3, [sp, #4]
   b5aca:	bd08      	pop	{r3, pc}
   b5acc:	0003021c 	.word	0x0003021c

000b5ad0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5ad0:	b508      	push	{r3, lr}
   b5ad2:	4b02      	ldr	r3, [pc, #8]	; (b5adc <newlib_impure_ptr_callback+0xc>)
   b5ad4:	681b      	ldr	r3, [r3, #0]
   b5ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5ad8:	9301      	str	r3, [sp, #4]
   b5ada:	bd08      	pop	{r3, pc}
   b5adc:	0003021c 	.word	0x0003021c

000b5ae0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5ae0:	2100      	movs	r1, #0
   b5ae2:	f7ff bf31 	b.w	b5948 <system_delay_ms>
	...

000b5ae8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5ae8:	4802      	ldr	r0, [pc, #8]	; (b5af4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5aea:	2300      	movs	r3, #0
   b5aec:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5aee:	f7ff bda3 	b.w	b5638 <os_mutex_recursive_create>
   b5af2:	bf00      	nop
   b5af4:	2003e6b8 	.word	0x2003e6b8

000b5af8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5af8:	2200      	movs	r2, #0
   b5afa:	6840      	ldr	r0, [r0, #4]
   b5afc:	4611      	mov	r1, r2
   b5afe:	f7ff bf8f 	b.w	b5a20 <network_listening>

000b5b02 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5b02:	2200      	movs	r2, #0
   b5b04:	6840      	ldr	r0, [r0, #4]
   b5b06:	4611      	mov	r1, r2
   b5b08:	f7ff bf9a 	b.w	b5a40 <network_get_listen_timeout>

000b5b0c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5b0c:	6840      	ldr	r0, [r0, #4]
   b5b0e:	2200      	movs	r2, #0
   b5b10:	f7ff bf8e 	b.w	b5a30 <network_set_listen_timeout>

000b5b14 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5b14:	6840      	ldr	r0, [r0, #4]
   b5b16:	2200      	movs	r2, #0
   b5b18:	f081 0101 	eor.w	r1, r1, #1
   b5b1c:	f7ff bf78 	b.w	b5a10 <network_listen>

000b5b20 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5b20:	2300      	movs	r3, #0
   b5b22:	6840      	ldr	r0, [r0, #4]
   b5b24:	461a      	mov	r2, r3
   b5b26:	4619      	mov	r1, r3
   b5b28:	f7ff bf6a 	b.w	b5a00 <network_off>

000b5b2c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5b2c:	2300      	movs	r3, #0
   b5b2e:	6840      	ldr	r0, [r0, #4]
   b5b30:	461a      	mov	r2, r3
   b5b32:	4619      	mov	r1, r3
   b5b34:	f7ff bf5c 	b.w	b59f0 <network_on>

000b5b38 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5b38:	2200      	movs	r2, #0
   b5b3a:	6840      	ldr	r0, [r0, #4]
   b5b3c:	4611      	mov	r1, r2
   b5b3e:	f7ff bf4f 	b.w	b59e0 <network_ready>

000b5b42 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5b42:	2200      	movs	r2, #0
   b5b44:	6840      	ldr	r0, [r0, #4]
   b5b46:	4611      	mov	r1, r2
   b5b48:	f7ff bf3a 	b.w	b59c0 <network_connecting>

000b5b4c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5b4c:	6840      	ldr	r0, [r0, #4]
   b5b4e:	2200      	movs	r2, #0
   b5b50:	2102      	movs	r1, #2
   b5b52:	f7ff bf3d 	b.w	b59d0 <network_disconnect>

000b5b56 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5b56:	2300      	movs	r3, #0
   b5b58:	6840      	ldr	r0, [r0, #4]
   b5b5a:	461a      	mov	r2, r3
   b5b5c:	f7ff bf28 	b.w	b59b0 <network_connect>

000b5b60 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5b60:	4b02      	ldr	r3, [pc, #8]	; (b5b6c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5b62:	2203      	movs	r2, #3
   b5b64:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5b66:	4a02      	ldr	r2, [pc, #8]	; (b5b70 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5b68:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5b6a:	4770      	bx	lr
   b5b6c:	2003e6bc 	.word	0x2003e6bc
   b5b70:	000b75ac 	.word	0x000b75ac

000b5b74 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5b74:	4770      	bx	lr

000b5b76 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b78:	4606      	mov	r6, r0
   b5b7a:	4615      	mov	r5, r2
   b5b7c:	460c      	mov	r4, r1
   b5b7e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5b80:	42bc      	cmp	r4, r7
   b5b82:	d006      	beq.n	b5b92 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5b84:	6833      	ldr	r3, [r6, #0]
   b5b86:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5b8a:	689b      	ldr	r3, [r3, #8]
   b5b8c:	4630      	mov	r0, r6
   b5b8e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5b90:	e7f6      	b.n	b5b80 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5b92:	4628      	mov	r0, r5
   b5b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5b96 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5b96:	7c00      	ldrb	r0, [r0, #16]
   b5b98:	2200      	movs	r2, #0
   b5b9a:	f7ff bda5 	b.w	b56e8 <hal_i2c_write>

000b5b9e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5b9e:	7c00      	ldrb	r0, [r0, #16]
   b5ba0:	2100      	movs	r1, #0
   b5ba2:	f7ff bda9 	b.w	b56f8 <hal_i2c_available>

000b5ba6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5ba6:	7c00      	ldrb	r0, [r0, #16]
   b5ba8:	2100      	movs	r1, #0
   b5baa:	f7ff bdad 	b.w	b5708 <hal_i2c_read>

000b5bae <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5bae:	7c00      	ldrb	r0, [r0, #16]
   b5bb0:	2100      	movs	r1, #0
   b5bb2:	f7ff bdb1 	b.w	b5718 <hal_i2c_peek>

000b5bb6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5bb6:	7c00      	ldrb	r0, [r0, #16]
   b5bb8:	2100      	movs	r1, #0
   b5bba:	f7ff bdb5 	b.w	b5728 <hal_i2c_flush>

000b5bbe <_ZN7TwoWireD0Ev>:
   b5bbe:	b510      	push	{r4, lr}
   b5bc0:	2114      	movs	r1, #20
   b5bc2:	4604      	mov	r4, r0
   b5bc4:	f7fe fe9b 	bl	b48fe <_ZdlPvj>
   b5bc8:	4620      	mov	r0, r4
   b5bca:	bd10      	pop	{r4, pc}

000b5bcc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5bcc:	b538      	push	{r3, r4, r5, lr}
   b5bce:	4604      	mov	r4, r0
   b5bd0:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5bd6:	2200      	movs	r2, #0
   b5bd8:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5bdc:	4b09      	ldr	r3, [pc, #36]	; (b5c04 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b5bde:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5be0:	4608      	mov	r0, r1
   b5be2:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b5be4:	4629      	mov	r1, r5
   b5be6:	f7ff fdaf 	bl	b5748 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5bea:	30bf      	adds	r0, #191	; 0xbf
   b5bec:	d108      	bne.n	b5c00 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b5bee:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5bf0:	07db      	lsls	r3, r3, #31
   b5bf2:	d505      	bpl.n	b5c00 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b5bf4:	6868      	ldr	r0, [r5, #4]
   b5bf6:	f7ff ff43 	bl	b5a80 <free>
    free(conf.tx_buffer);
   b5bfa:	68e8      	ldr	r0, [r5, #12]
   b5bfc:	f7ff ff40 	bl	b5a80 <free>
}
   b5c00:	4620      	mov	r0, r4
   b5c02:	bd38      	pop	{r3, r4, r5, pc}
   b5c04:	000b75e8 	.word	0x000b75e8

000b5c08 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5c08:	4770      	bx	lr

000b5c0a <_ZN9IPAddressD0Ev>:
   b5c0a:	b510      	push	{r4, lr}
   b5c0c:	2118      	movs	r1, #24
   b5c0e:	4604      	mov	r4, r0
   b5c10:	f7fe fe75 	bl	b48fe <_ZdlPvj>
   b5c14:	4620      	mov	r0, r4
   b5c16:	bd10      	pop	{r4, pc}

000b5c18 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5c18:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5c1a:	7d03      	ldrb	r3, [r0, #20]
   b5c1c:	2b06      	cmp	r3, #6
{
   b5c1e:	b08d      	sub	sp, #52	; 0x34
   b5c20:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5c22:	f100 0704 	add.w	r7, r0, #4
   b5c26:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5c2a:	d012      	beq.n	b5c52 <_ZNK9IPAddress7printToER5Print+0x3a>
   b5c2c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5c30:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5c34:	220a      	movs	r2, #10
   b5c36:	4630      	mov	r0, r6
   b5c38:	f000 f96f 	bl	b5f1a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5c3c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5c3e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5c40:	d019      	beq.n	b5c76 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5c42:	2c00      	cmp	r4, #0
   b5c44:	d0f4      	beq.n	b5c30 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5c46:	212e      	movs	r1, #46	; 0x2e
   b5c48:	4630      	mov	r0, r6
   b5c4a:	f000 f94d 	bl	b5ee8 <_ZN5Print5printEc>
   b5c4e:	4404      	add	r4, r0
   b5c50:	e7ee      	b.n	b5c30 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5c52:	232f      	movs	r3, #47	; 0x2f
   b5c54:	466a      	mov	r2, sp
   b5c56:	4639      	mov	r1, r7
   b5c58:	200a      	movs	r0, #10
		buf[0] = 0;
   b5c5a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5c5e:	f7ff fd83 	bl	b5768 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5c62:	4668      	mov	r0, sp
   b5c64:	f7fe fe04 	bl	b4870 <strlen>
   b5c68:	6833      	ldr	r3, [r6, #0]
   b5c6a:	4602      	mov	r2, r0
   b5c6c:	68db      	ldr	r3, [r3, #12]
   b5c6e:	4669      	mov	r1, sp
   b5c70:	4630      	mov	r0, r6
   b5c72:	4798      	blx	r3
   b5c74:	4604      	mov	r4, r0
    }
    return n;
}
   b5c76:	4620      	mov	r0, r4
   b5c78:	b00d      	add	sp, #52	; 0x34
   b5c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5c7c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5c7c:	b510      	push	{r4, lr}
   b5c7e:	4b05      	ldr	r3, [pc, #20]	; (b5c94 <_ZN9IPAddressC1Ev+0x18>)
   b5c80:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5c82:	2211      	movs	r2, #17
   b5c84:	f840 3b04 	str.w	r3, [r0], #4
   b5c88:	2100      	movs	r1, #0
   b5c8a:	f001 f8c3 	bl	b6e14 <memset>
}
   b5c8e:	4620      	mov	r0, r4
   b5c90:	bd10      	pop	{r4, pc}
   b5c92:	bf00      	nop
   b5c94:	000b7610 	.word	0x000b7610

000b5c98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5c98:	4603      	mov	r3, r0
   b5c9a:	4a07      	ldr	r2, [pc, #28]	; (b5cb8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5c9c:	b510      	push	{r4, lr}
   b5c9e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5ca2:	f101 0210 	add.w	r2, r1, #16
   b5ca6:	f851 4b04 	ldr.w	r4, [r1], #4
   b5caa:	f843 4b04 	str.w	r4, [r3], #4
   b5cae:	4291      	cmp	r1, r2
   b5cb0:	d1f9      	bne.n	b5ca6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5cb2:	780a      	ldrb	r2, [r1, #0]
   b5cb4:	701a      	strb	r2, [r3, #0]
}
   b5cb6:	bd10      	pop	{r4, pc}
   b5cb8:	000b7610 	.word	0x000b7610

000b5cbc <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b5cbc:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b5cbe:	2b04      	cmp	r3, #4
   b5cc0:	d104      	bne.n	b5ccc <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b5cc2:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5cc4:	3800      	subs	r0, #0
   b5cc6:	bf18      	it	ne
   b5cc8:	2001      	movne	r0, #1
   b5cca:	4770      	bx	lr
    } else if (version() == 6) {
   b5ccc:	2b06      	cmp	r3, #6
   b5cce:	d107      	bne.n	b5ce0 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5cd0:	6843      	ldr	r3, [r0, #4]
   b5cd2:	b93b      	cbnz	r3, b5ce4 <_ZNK9IPAddresscvbEv+0x28>
   b5cd4:	6883      	ldr	r3, [r0, #8]
   b5cd6:	b92b      	cbnz	r3, b5ce4 <_ZNK9IPAddresscvbEv+0x28>
   b5cd8:	68c3      	ldr	r3, [r0, #12]
   b5cda:	b91b      	cbnz	r3, b5ce4 <_ZNK9IPAddresscvbEv+0x28>
   b5cdc:	6900      	ldr	r0, [r0, #16]
   b5cde:	e7f1      	b.n	b5cc4 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b5ce0:	2000      	movs	r0, #0
   b5ce2:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5ce4:	2001      	movs	r0, #1
}
   b5ce6:	4770      	bx	lr

000b5ce8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5ce8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5cea:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5cee:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5cf2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5cf6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5cfa:	2304      	movs	r3, #4
   b5cfc:	6041      	str	r1, [r0, #4]
   b5cfe:	7503      	strb	r3, [r0, #20]
}
   b5d00:	bd10      	pop	{r4, pc}
	...

000b5d04 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5d04:	b507      	push	{r0, r1, r2, lr}
   b5d06:	4b06      	ldr	r3, [pc, #24]	; (b5d20 <_ZN9IPAddressC1EPKh+0x1c>)
   b5d08:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5d0a:	78cb      	ldrb	r3, [r1, #3]
   b5d0c:	9300      	str	r3, [sp, #0]
   b5d0e:	788b      	ldrb	r3, [r1, #2]
   b5d10:	784a      	ldrb	r2, [r1, #1]
   b5d12:	7809      	ldrb	r1, [r1, #0]
   b5d14:	f7ff ffe8 	bl	b5ce8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5d18:	b003      	add	sp, #12
   b5d1a:	f85d fb04 	ldr.w	pc, [sp], #4
   b5d1e:	bf00      	nop
   b5d20:	000b7610 	.word	0x000b7610

000b5d24 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5d24:	4b01      	ldr	r3, [pc, #4]	; (b5d2c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5d26:	4a02      	ldr	r2, [pc, #8]	; (b5d30 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5d28:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5d2a:	4770      	bx	lr
   b5d2c:	2003e6c4 	.word	0x2003e6c4
   b5d30:	000b761c 	.word	0x000b761c

000b5d34 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5d34:	2300      	movs	r3, #0
   b5d36:	6840      	ldr	r0, [r0, #4]
   b5d38:	461a      	mov	r2, r3
   b5d3a:	f7ff be39 	b.w	b59b0 <network_connect>

000b5d3e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5d3e:	6840      	ldr	r0, [r0, #4]
   b5d40:	2200      	movs	r2, #0
   b5d42:	2102      	movs	r1, #2
   b5d44:	f7ff be44 	b.w	b59d0 <network_disconnect>

000b5d48 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5d48:	2200      	movs	r2, #0
   b5d4a:	6840      	ldr	r0, [r0, #4]
   b5d4c:	4611      	mov	r1, r2
   b5d4e:	f7ff be37 	b.w	b59c0 <network_connecting>

000b5d52 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5d52:	2200      	movs	r2, #0
   b5d54:	6840      	ldr	r0, [r0, #4]
   b5d56:	4611      	mov	r1, r2
   b5d58:	f7ff be42 	b.w	b59e0 <network_ready>

000b5d5c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5d5c:	2300      	movs	r3, #0
   b5d5e:	6840      	ldr	r0, [r0, #4]
   b5d60:	461a      	mov	r2, r3
   b5d62:	4619      	mov	r1, r3
   b5d64:	f7ff be44 	b.w	b59f0 <network_on>

000b5d68 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5d68:	2300      	movs	r3, #0
   b5d6a:	6840      	ldr	r0, [r0, #4]
   b5d6c:	461a      	mov	r2, r3
   b5d6e:	4619      	mov	r1, r3
   b5d70:	f7ff be46 	b.w	b5a00 <network_off>

000b5d74 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5d74:	6840      	ldr	r0, [r0, #4]
   b5d76:	2100      	movs	r1, #0
   b5d78:	f7ff be6a 	b.w	b5a50 <network_is_on>

000b5d7c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5d7c:	6840      	ldr	r0, [r0, #4]
   b5d7e:	2100      	movs	r1, #0
   b5d80:	f7ff be6e 	b.w	b5a60 <network_is_off>

000b5d84 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5d84:	6840      	ldr	r0, [r0, #4]
   b5d86:	2200      	movs	r2, #0
   b5d88:	f081 0101 	eor.w	r1, r1, #1
   b5d8c:	f7ff be40 	b.w	b5a10 <network_listen>

000b5d90 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5d90:	6840      	ldr	r0, [r0, #4]
   b5d92:	2200      	movs	r2, #0
   b5d94:	f7ff be4c 	b.w	b5a30 <network_set_listen_timeout>

000b5d98 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5d98:	2200      	movs	r2, #0
   b5d9a:	6840      	ldr	r0, [r0, #4]
   b5d9c:	4611      	mov	r1, r2
   b5d9e:	f7ff be4f 	b.w	b5a40 <network_get_listen_timeout>

000b5da2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5da2:	2200      	movs	r2, #0
   b5da4:	6840      	ldr	r0, [r0, #4]
   b5da6:	4611      	mov	r1, r2
   b5da8:	f7ff be3a 	b.w	b5a20 <network_listening>

000b5dac <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5db0:	b095      	sub	sp, #84	; 0x54
   b5db2:	4614      	mov	r4, r2
   b5db4:	460d      	mov	r5, r1
   b5db6:	4607      	mov	r7, r0
    IPAddress addr;
   b5db8:	f7ff ff60 	bl	b5c7c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5dbc:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5dbe:	221c      	movs	r2, #28
   b5dc0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5dc2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5dc4:	f001 f826 	bl	b6e14 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5dc8:	2340      	movs	r3, #64	; 0x40
   b5dca:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5dcc:	4620      	mov	r0, r4
   b5dce:	466b      	mov	r3, sp
   b5dd0:	aa0c      	add	r2, sp, #48	; 0x30
   b5dd2:	2100      	movs	r1, #0
   b5dd4:	f7ff fcf0 	bl	b57b8 <netdb_getaddrinfo>
    if (!r) {
   b5dd8:	4604      	mov	r4, r0
   b5dda:	2800      	cmp	r0, #0
   b5ddc:	d14b      	bne.n	b5e76 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5dde:	4602      	mov	r2, r0
   b5de0:	2101      	movs	r1, #1
   b5de2:	6868      	ldr	r0, [r5, #4]
   b5de4:	f7ff fdfc 	bl	b59e0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5de8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5dea:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5dec:	4622      	mov	r2, r4
   b5dee:	6868      	ldr	r0, [r5, #4]
   b5df0:	f7ff fdf6 	bl	b59e0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5df4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5df6:	4681      	mov	r9, r0
        bool ok = false;
   b5df8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5dfa:	2e00      	cmp	r6, #0
   b5dfc:	d03b      	beq.n	b5e76 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5dfe:	2900      	cmp	r1, #0
   b5e00:	d139      	bne.n	b5e76 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5e02:	6873      	ldr	r3, [r6, #4]
   b5e04:	2b02      	cmp	r3, #2
   b5e06:	d003      	beq.n	b5e10 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5e08:	2b0a      	cmp	r3, #10
   b5e0a:	d011      	beq.n	b5e30 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5e0c:	69f6      	ldr	r6, [r6, #28]
   b5e0e:	e7f4      	b.n	b5dfa <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5e10:	f1b8 0f00 	cmp.w	r8, #0
   b5e14:	d0fa      	beq.n	b5e0c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5e16:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5e18:	a806      	add	r0, sp, #24
   b5e1a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5e1c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5e1e:	f7ff ff71 	bl	b5d04 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5e22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5e24:	1d3c      	adds	r4, r7, #4
   b5e26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5e28:	682b      	ldr	r3, [r5, #0]
   b5e2a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5e2c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5e2e:	e7ed      	b.n	b5e0c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5e30:	f1b9 0f00 	cmp.w	r9, #0
   b5e34:	d0ea      	beq.n	b5e0c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5e36:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5e38:	2210      	movs	r2, #16
   b5e3a:	a801      	add	r0, sp, #4
   b5e3c:	f000 ffea 	bl	b6e14 <memset>
                    a.v = 6;
   b5e40:	2306      	movs	r3, #6
   b5e42:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5e46:	ad01      	add	r5, sp, #4
   b5e48:	f104 0308 	add.w	r3, r4, #8
   b5e4c:	3418      	adds	r4, #24
   b5e4e:	6818      	ldr	r0, [r3, #0]
   b5e50:	6859      	ldr	r1, [r3, #4]
   b5e52:	462a      	mov	r2, r5
   b5e54:	c203      	stmia	r2!, {r0, r1}
   b5e56:	3308      	adds	r3, #8
   b5e58:	42a3      	cmp	r3, r4
   b5e5a:	4615      	mov	r5, r2
   b5e5c:	d1f7      	bne.n	b5e4e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5e5e:	a901      	add	r1, sp, #4
   b5e60:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5e62:	ad07      	add	r5, sp, #28
   b5e64:	f7ff ff18 	bl	b5c98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5e68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5e6a:	1d3c      	adds	r4, r7, #4
   b5e6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5e6e:	682b      	ldr	r3, [r5, #0]
   b5e70:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5e72:	4649      	mov	r1, r9
   b5e74:	e7ca      	b.n	b5e0c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5e76:	9800      	ldr	r0, [sp, #0]
   b5e78:	f7ff fc96 	bl	b57a8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5e7c:	4638      	mov	r0, r7
   b5e7e:	b015      	add	sp, #84	; 0x54
   b5e80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5e84 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5e84:	4b02      	ldr	r3, [pc, #8]	; (b5e90 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5e86:	4a03      	ldr	r2, [pc, #12]	; (b5e94 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5e88:	601a      	str	r2, [r3, #0]
   b5e8a:	2200      	movs	r2, #0
   b5e8c:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b5e8e:	4770      	bx	lr
   b5e90:	2003e6c8 	.word	0x2003e6c8
   b5e94:	000b7628 	.word	0x000b7628

000b5e98 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5e9a:	4606      	mov	r6, r0
   b5e9c:	460d      	mov	r5, r1
  size_t n = 0;
   b5e9e:	188f      	adds	r7, r1, r2
   b5ea0:	2400      	movs	r4, #0
  while (size--) {
   b5ea2:	42bd      	cmp	r5, r7
   b5ea4:	d00c      	beq.n	b5ec0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5ea6:	6833      	ldr	r3, [r6, #0]
   b5ea8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5eac:	689b      	ldr	r3, [r3, #8]
   b5eae:	4630      	mov	r0, r6
   b5eb0:	4798      	blx	r3
     if (chunk>=0)
   b5eb2:	1e03      	subs	r3, r0, #0
   b5eb4:	db01      	blt.n	b5eba <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5eb6:	441c      	add	r4, r3
  while (size--) {
   b5eb8:	e7f3      	b.n	b5ea2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5eba:	2c00      	cmp	r4, #0
   b5ebc:	bf08      	it	eq
   b5ebe:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5ec0:	4620      	mov	r0, r4
   b5ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5ec4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5ec4:	b513      	push	{r0, r1, r4, lr}
   b5ec6:	4604      	mov	r4, r0
    }
   b5ec8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5eca:	b159      	cbz	r1, b5ee4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5ecc:	9101      	str	r1, [sp, #4]
   b5ece:	f7fe fccf 	bl	b4870 <strlen>
   b5ed2:	6823      	ldr	r3, [r4, #0]
   b5ed4:	9901      	ldr	r1, [sp, #4]
   b5ed6:	68db      	ldr	r3, [r3, #12]
   b5ed8:	4602      	mov	r2, r0
   b5eda:	4620      	mov	r0, r4
    }
   b5edc:	b002      	add	sp, #8
   b5ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5ee2:	4718      	bx	r3
    }
   b5ee4:	b002      	add	sp, #8
   b5ee6:	bd10      	pop	{r4, pc}

000b5ee8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5ee8:	6803      	ldr	r3, [r0, #0]
   b5eea:	689b      	ldr	r3, [r3, #8]
   b5eec:	4718      	bx	r3

000b5eee <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5eee:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5ef0:	210d      	movs	r1, #13
{
   b5ef2:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5ef4:	f7ff fff8 	bl	b5ee8 <_ZN5Print5printEc>
  n += print('\n');
   b5ef8:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5efa:	4604      	mov	r4, r0
  n += print('\n');
   b5efc:	4628      	mov	r0, r5
   b5efe:	f7ff fff3 	bl	b5ee8 <_ZN5Print5printEc>
  return n;
}
   b5f02:	4420      	add	r0, r4
   b5f04:	bd38      	pop	{r3, r4, r5, pc}

000b5f06 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b5f06:	b538      	push	{r3, r4, r5, lr}
   b5f08:	4605      	mov	r5, r0
  return write(str);
   b5f0a:	f7ff ffdb 	bl	b5ec4 <_ZN5Print5writeEPKc>
   b5f0e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5f10:	4628      	mov	r0, r5
   b5f12:	f7ff ffec 	bl	b5eee <_ZN5Print7printlnEv>
  return n;
}
   b5f16:	4420      	add	r0, r4
   b5f18:	bd38      	pop	{r3, r4, r5, pc}

000b5f1a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5f1a:	b530      	push	{r4, r5, lr}
   b5f1c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5f1e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5f20:	2a01      	cmp	r2, #1
  *str = '\0';
   b5f22:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5f26:	bf98      	it	ls
   b5f28:	220a      	movls	r2, #10
   b5f2a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5f2c:	460d      	mov	r5, r1
   b5f2e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5f32:	fb01 5312 	mls	r3, r1, r2, r5
   b5f36:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5f3a:	2b09      	cmp	r3, #9
   b5f3c:	bf94      	ite	ls
   b5f3e:	3330      	addls	r3, #48	; 0x30
   b5f40:	3337      	addhi	r3, #55	; 0x37
   b5f42:	b2db      	uxtb	r3, r3
  } while(n);
   b5f44:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5f46:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5f4a:	d9ef      	bls.n	b5f2c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5f4c:	4621      	mov	r1, r4
   b5f4e:	f7ff ffb9 	bl	b5ec4 <_ZN5Print5writeEPKc>
}
   b5f52:	b00b      	add	sp, #44	; 0x2c
   b5f54:	bd30      	pop	{r4, r5, pc}
	...

000b5f58 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5f58:	4b01      	ldr	r3, [pc, #4]	; (b5f60 <_GLOBAL__sub_I_RGB+0x8>)
   b5f5a:	2200      	movs	r2, #0
   b5f5c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5f5e:	4770      	bx	lr
   b5f60:	2003e6d0 	.word	0x2003e6d0

000b5f64 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5f64:	b510      	push	{r4, lr}
   b5f66:	4604      	mov	r4, r0
   b5f68:	4608      	mov	r0, r1
{
    _spi = spi;
   b5f6a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5f6c:	f7ff fc5c 	bl	b5828 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5f70:	2300      	movs	r3, #0
   b5f72:	6063      	str	r3, [r4, #4]
}
   b5f74:	4620      	mov	r0, r4
   b5f76:	bd10      	pop	{r4, pc}

000b5f78 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b5f78:	b510      	push	{r4, lr}
   b5f7a:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5f7c:	f7ff fb6c 	bl	b5658 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b5f80:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b5f82:	6823      	ldr	r3, [r4, #0]
   b5f84:	4620      	mov	r0, r4
   b5f86:	695b      	ldr	r3, [r3, #20]
   b5f88:	4798      	blx	r3
    if (c >= 0) return c;
   b5f8a:	2800      	cmp	r0, #0
   b5f8c:	da08      	bge.n	b5fa0 <_ZN6Stream9timedReadEv+0x28>
   b5f8e:	f7ff fb63 	bl	b5658 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b5f92:	68e3      	ldr	r3, [r4, #12]
   b5f94:	1ac0      	subs	r0, r0, r3
   b5f96:	68a3      	ldr	r3, [r4, #8]
   b5f98:	4298      	cmp	r0, r3
   b5f9a:	d3f2      	bcc.n	b5f82 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b5f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b5fa0:	bd10      	pop	{r4, pc}

000b5fa2 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b5fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5fa6:	4607      	mov	r7, r0
   b5fa8:	460c      	mov	r4, r1
   b5faa:	188e      	adds	r6, r1, r2
   b5fac:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b5fae:	42b5      	cmp	r5, r6
   b5fb0:	eba5 0804 	sub.w	r8, r5, r4
   b5fb4:	d007      	beq.n	b5fc6 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b5fb6:	4638      	mov	r0, r7
   b5fb8:	f7ff ffde 	bl	b5f78 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b5fbc:	1e03      	subs	r3, r0, #0
   b5fbe:	db02      	blt.n	b5fc6 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b5fc0:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b5fc4:	e7f3      	b.n	b5fae <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b5fc6:	4640      	mov	r0, r8
   b5fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5fcc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5fcc:	4b05      	ldr	r3, [pc, #20]	; (b5fe4 <_GLOBAL__sub_I_System+0x18>)
   b5fce:	2202      	movs	r2, #2
   b5fd0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5fd2:	4b05      	ldr	r3, [pc, #20]	; (b5fe8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5fd4:	4a05      	ldr	r2, [pc, #20]	; (b5fec <_GLOBAL__sub_I_System+0x20>)
   b5fd6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5fd8:	2000      	movs	r0, #0
   b5fda:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5fde:	f7ff bcab 	b.w	b5938 <set_system_mode>
   b5fe2:	bf00      	nop
   b5fe4:	2003e6ec 	.word	0x2003e6ec
   b5fe8:	2003e6e0 	.word	0x2003e6e0
   b5fec:	ffff0000 	.word	0xffff0000

000b5ff0 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b5ff0:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b5ff2:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b5ff4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b5ff8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b5ffa:	2201      	movs	r2, #1
   b5ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6000:	f10d 0107 	add.w	r1, sp, #7
   b6004:	47a0      	blx	r4
}
   b6006:	b002      	add	sp, #8
   b6008:	bd10      	pop	{r4, pc}

000b600a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b600a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b600c:	6803      	ldr	r3, [r0, #0]
   b600e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6010:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6014:	46a4      	mov	ip, r4
}
   b6016:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b601a:	4760      	bx	ip

000b601c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b601c:	b513      	push	{r0, r1, r4, lr}
   b601e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b6020:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6022:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b6026:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b6028:	f10d 0107 	add.w	r1, sp, #7
   b602c:	2201      	movs	r2, #1
   b602e:	47a0      	blx	r4
}
   b6030:	b002      	add	sp, #8
   b6032:	bd10      	pop	{r4, pc}

000b6034 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b6034:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6036:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6038:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b603c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6040:	429a      	cmp	r2, r3
int TCPClient::read() {
   b6042:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6044:	d008      	beq.n	b6058 <_ZN9TCPClient4readEv+0x24>
   b6046:	6963      	ldr	r3, [r4, #20]
   b6048:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b604c:	1c51      	adds	r1, r2, #1
   b604e:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b6052:	4413      	add	r3, r2
   b6054:	7918      	ldrb	r0, [r3, #4]
}
   b6056:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6058:	6803      	ldr	r3, [r0, #0]
   b605a:	691b      	ldr	r3, [r3, #16]
   b605c:	4798      	blx	r3
   b605e:	2800      	cmp	r0, #0
   b6060:	d1f1      	bne.n	b6046 <_ZN9TCPClient4readEv+0x12>
   b6062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6066:	e7f6      	b.n	b6056 <_ZN9TCPClient4readEv+0x22>

000b6068 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b6068:	4770      	bx	lr

000b606a <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b606a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b606c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b606e:	43c0      	mvns	r0, r0
   b6070:	0fc0      	lsrs	r0, r0, #31
   b6072:	4770      	bx	lr

000b6074 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6074:	4770      	bx	lr
	...

000b6078 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6078:	4b06      	ldr	r3, [pc, #24]	; (b6094 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b607a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b607c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b607e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6082:	d005      	beq.n	b6090 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6084:	4608      	mov	r0, r1
   b6086:	f000 fd97 	bl	b6bb8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b608a:	2800      	cmp	r0, #0
   b608c:	bf08      	it	eq
   b608e:	2400      	moveq	r4, #0
      }
   b6090:	4620      	mov	r0, r4
   b6092:	bd10      	pop	{r4, pc}
   b6094:	000b759c 	.word	0x000b759c

000b6098 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6098:	b510      	push	{r4, lr}
   b609a:	21ac      	movs	r1, #172	; 0xac
   b609c:	4604      	mov	r4, r0
   b609e:	f7fe fc2e 	bl	b48fe <_ZdlPvj>
   b60a2:	4620      	mov	r0, r4
   b60a4:	bd10      	pop	{r4, pc}

000b60a6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b60a6:	21ac      	movs	r1, #172	; 0xac
   b60a8:	f7fe bc29 	b.w	b48fe <_ZdlPvj>

000b60ac <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b60ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b60b0:	f04f 0800 	mov.w	r8, #0
   b60b4:	b086      	sub	sp, #24
   b60b6:	461c      	mov	r4, r3
   b60b8:	f8c0 8004 	str.w	r8, [r0, #4]
   b60bc:	4605      	mov	r5, r0
   b60be:	460e      	mov	r6, r1
   b60c0:	4617      	mov	r7, r2
    struct timeval tv = {};
   b60c2:	4641      	mov	r1, r8
   b60c4:	2210      	movs	r2, #16
   b60c6:	a802      	add	r0, sp, #8
   b60c8:	f000 fea4 	bl	b6e14 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b60cc:	1c63      	adds	r3, r4, #1
   b60ce:	d009      	beq.n	b60e4 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b60d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b60d4:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b60d8:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b60dc:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b60e0:	435c      	muls	r4, r3
   b60e2:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b60e4:	6968      	ldr	r0, [r5, #20]
   b60e6:	2310      	movs	r3, #16
   b60e8:	9300      	str	r3, [sp, #0]
   b60ea:	6800      	ldr	r0, [r0, #0]
   b60ec:	ab02      	add	r3, sp, #8
   b60ee:	f241 0205 	movw	r2, #4101	; 0x1005
   b60f2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b60f6:	f7ff fb67 	bl	b57c8 <sock_setsockopt>
    if (ret < 0) {
   b60fa:	2800      	cmp	r0, #0
   b60fc:	da07      	bge.n	b610e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b60fe:	f7ff fcd7 	bl	b5ab0 <__errno>
   b6102:	6803      	ldr	r3, [r0, #0]
   b6104:	606b      	str	r3, [r5, #4]
        return 0;
   b6106:	2000      	movs	r0, #0
}
   b6108:	b006      	add	sp, #24
   b610a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b610e:	6968      	ldr	r0, [r5, #20]
   b6110:	2300      	movs	r3, #0
   b6112:	6800      	ldr	r0, [r0, #0]
   b6114:	463a      	mov	r2, r7
   b6116:	4631      	mov	r1, r6
   b6118:	f7ff fb76 	bl	b5808 <sock_send>
    if (ret < 0) {
   b611c:	1e03      	subs	r3, r0, #0
   b611e:	dbee      	blt.n	b60fe <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b6120:	4618      	mov	r0, r3
   b6122:	e7f1      	b.n	b6108 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b6124 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b6124:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b6126:	6984      	ldr	r4, [r0, #24]
   b6128:	4b0a      	ldr	r3, [pc, #40]	; (b6154 <_ZN9TCPClientD1Ev+0x30>)
   b612a:	6003      	str	r3, [r0, #0]
   b612c:	4605      	mov	r5, r0
   b612e:	b17c      	cbz	r4, b6150 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b6130:	6863      	ldr	r3, [r4, #4]
   b6132:	3b01      	subs	r3, #1
   b6134:	6063      	str	r3, [r4, #4]
   b6136:	b95b      	cbnz	r3, b6150 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b6138:	6823      	ldr	r3, [r4, #0]
   b613a:	4620      	mov	r0, r4
   b613c:	689b      	ldr	r3, [r3, #8]
   b613e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6140:	68a3      	ldr	r3, [r4, #8]
   b6142:	3b01      	subs	r3, #1
   b6144:	60a3      	str	r3, [r4, #8]
   b6146:	b91b      	cbnz	r3, b6150 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b6148:	6823      	ldr	r3, [r4, #0]
   b614a:	4620      	mov	r0, r4
   b614c:	68db      	ldr	r3, [r3, #12]
   b614e:	4798      	blx	r3
   b6150:	4628      	mov	r0, r5
   b6152:	bd38      	pop	{r3, r4, r5, pc}
   b6154:	000b7698 	.word	0x000b7698

000b6158 <_ZN9TCPClientD0Ev>:
   b6158:	b510      	push	{r4, lr}
   b615a:	4604      	mov	r4, r0
   b615c:	f7ff ffe2 	bl	b6124 <_ZN9TCPClientD1Ev>
   b6160:	4620      	mov	r0, r4
   b6162:	211c      	movs	r1, #28
   b6164:	f7fe fbcb 	bl	b48fe <_ZdlPvj>
   b6168:	4620      	mov	r0, r4
   b616a:	bd10      	pop	{r4, pc}

000b616c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b616c:	b530      	push	{r4, r5, lr}
   b616e:	b087      	sub	sp, #28
   b6170:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b6172:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b6174:	4668      	mov	r0, sp
   b6176:	f7ff fdc5 	bl	b5d04 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b617a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b617c:	3404      	adds	r4, #4
   b617e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6180:	682b      	ldr	r3, [r5, #0]
   b6182:	7023      	strb	r3, [r4, #0]
    }
   b6184:	b007      	add	sp, #28
   b6186:	bd30      	pop	{r4, r5, pc}

000b6188 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b6188:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b618a:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b618c:	4b05      	ldr	r3, [pc, #20]	; (b61a4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b618e:	4604      	mov	r4, r0
   b6190:	358c      	adds	r5, #140	; 0x8c
   b6192:	f844 3b04 	str.w	r3, [r4], #4
   b6196:	4606      	mov	r6, r0
   b6198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b619a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b619c:	682b      	ldr	r3, [r5, #0]
   b619e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b61a0:	4630      	mov	r0, r6
   b61a2:	bd70      	pop	{r4, r5, r6, pc}
   b61a4:	000b7610 	.word	0x000b7610

000b61a8 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b61a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b61ac:	4698      	mov	r8, r3
    stop();
   b61ae:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b61b0:	b093      	sub	sp, #76	; 0x4c
   b61b2:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b61b4:	2400      	movs	r4, #0
    stop();
   b61b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b61b8:	4606      	mov	r6, r0
   b61ba:	4617      	mov	r7, r2
    stop();
   b61bc:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b61be:	4628      	mov	r0, r5
   b61c0:	466b      	mov	r3, sp
   b61c2:	4622      	mov	r2, r4
   b61c4:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b61c6:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b61c8:	f7ff faf6 	bl	b57b8 <netdb_getaddrinfo>
   b61cc:	4605      	mov	r5, r0
   b61ce:	2800      	cmp	r0, #0
   b61d0:	d163      	bne.n	b629a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b61d2:	9b00      	ldr	r3, [sp, #0]
   b61d4:	2b00      	cmp	r3, #0
   b61d6:	d04b      	beq.n	b6270 <_ZN9TCPClient7connectEPKctm+0xc8>
   b61d8:	695b      	ldr	r3, [r3, #20]
   b61da:	2b00      	cmp	r3, #0
   b61dc:	d048      	beq.n	b6270 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b61de:	a806      	add	r0, sp, #24
   b61e0:	f7ff fd4c 	bl	b5c7c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b61e4:	9b00      	ldr	r3, [sp, #0]
   b61e6:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b61e8:	7863      	ldrb	r3, [r4, #1]
   b61ea:	2b02      	cmp	r3, #2
   b61ec:	d104      	bne.n	b61f8 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b61ee:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b61f0:	a806      	add	r0, sp, #24
   b61f2:	f7ff ffbb 	bl	b616c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b61f6:	e026      	b.n	b6246 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b61f8:	2b0a      	cmp	r3, #10
   b61fa:	d124      	bne.n	b6246 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b61fc:	2211      	movs	r2, #17
   b61fe:	4629      	mov	r1, r5
   b6200:	a801      	add	r0, sp, #4
   b6202:	f000 fe07 	bl	b6e14 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6206:	68a3      	ldr	r3, [r4, #8]
   b6208:	2b00      	cmp	r3, #0
   b620a:	d038      	beq.n	b627e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b620c:	f104 0308 	add.w	r3, r4, #8
   b6210:	f10d 0c04 	add.w	ip, sp, #4
   b6214:	3418      	adds	r4, #24
   b6216:	6818      	ldr	r0, [r3, #0]
   b6218:	6859      	ldr	r1, [r3, #4]
   b621a:	4662      	mov	r2, ip
   b621c:	c203      	stmia	r2!, {r0, r1}
   b621e:	3308      	adds	r3, #8
   b6220:	42a3      	cmp	r3, r4
   b6222:	4694      	mov	ip, r2
   b6224:	d1f7      	bne.n	b6216 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b6226:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b6228:	a901      	add	r1, sp, #4
   b622a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b622c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b6230:	f7ff fd32 	bl	b5c98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6234:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b6238:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b623c:	ac07      	add	r4, sp, #28
   b623e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6240:	f8dc 3000 	ldr.w	r3, [ip]
   b6244:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b6246:	a806      	add	r0, sp, #24
   b6248:	f7ff fd38 	bl	b5cbc <_ZNK9IPAddresscvbEv>
        if (addr) {
   b624c:	b180      	cbz	r0, b6270 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b624e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b6250:	ad07      	add	r5, sp, #28
   b6252:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b6256:	4b12      	ldr	r3, [pc, #72]	; (b62a0 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b6258:	930c      	str	r3, [sp, #48]	; 0x30
   b625a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b625c:	ac0d      	add	r4, sp, #52	; 0x34
   b625e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6260:	682b      	ldr	r3, [r5, #0]
   b6262:	7023      	strb	r3, [r4, #0]
   b6264:	463a      	mov	r2, r7
   b6266:	4643      	mov	r3, r8
   b6268:	a90c      	add	r1, sp, #48	; 0x30
   b626a:	4630      	mov	r0, r6
   b626c:	47c8      	blx	r9
   b626e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b6270:	9800      	ldr	r0, [sp, #0]
   b6272:	f7ff fa99 	bl	b57a8 <netdb_freeaddrinfo>
}
   b6276:	4628      	mov	r0, r5
   b6278:	b013      	add	sp, #76	; 0x4c
   b627a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b627e:	68e3      	ldr	r3, [r4, #12]
   b6280:	2b00      	cmp	r3, #0
   b6282:	d1c3      	bne.n	b620c <_ZN9TCPClient7connectEPKctm+0x64>
   b6284:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b6288:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b628c:	f7ff fa74 	bl	b5778 <inet_htonl>
   b6290:	4581      	cmp	r9, r0
   b6292:	d1bb      	bne.n	b620c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b6294:	f104 0114 	add.w	r1, r4, #20
   b6298:	e7aa      	b.n	b61f0 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b629a:	4625      	mov	r5, r4
   b629c:	e7e8      	b.n	b6270 <_ZN9TCPClient7connectEPKctm+0xc8>
   b629e:	bf00      	nop
   b62a0:	000b7610 	.word	0x000b7610

000b62a4 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b62a4:	b538      	push	{r3, r4, r5, lr}
   b62a6:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b62a8:	681a      	ldr	r2, [r3, #0]
   b62aa:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b62ac:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b62ae:	da10      	bge.n	b62d2 <_ZN9TCPClient9connectedEv+0x2e>
   b62b0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b62b4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b62b8:	429a      	cmp	r2, r3
   b62ba:	d10a      	bne.n	b62d2 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b62bc:	6803      	ldr	r3, [r0, #0]
   b62be:	691b      	ldr	r3, [r3, #16]
   b62c0:	4798      	blx	r3
        if (!rv) {
   b62c2:	4604      	mov	r4, r0
   b62c4:	b928      	cbnz	r0, b62d2 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b62c6:	682b      	ldr	r3, [r5, #0]
   b62c8:	4628      	mov	r0, r5
   b62ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b62cc:	4798      	blx	r3
        rv = available();
   b62ce:	4620      	mov	r0, r4
}
   b62d0:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b62d2:	2001      	movs	r0, #1
   b62d4:	e7fc      	b.n	b62d0 <_ZN9TCPClient9connectedEv+0x2c>

000b62d6 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b62d6:	b510      	push	{r4, lr}
   b62d8:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b62da:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b62de:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b62e2:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b62e4:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b62e6:	d005      	beq.n	b62f4 <_ZN9TCPClient4peekEv+0x1e>
   b62e8:	6963      	ldr	r3, [r4, #20]
   b62ea:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b62ee:	4413      	add	r3, r2
   b62f0:	7918      	ldrb	r0, [r3, #4]
}
   b62f2:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b62f4:	6803      	ldr	r3, [r0, #0]
   b62f6:	691b      	ldr	r3, [r3, #16]
   b62f8:	4798      	blx	r3
   b62fa:	2800      	cmp	r0, #0
   b62fc:	d1f4      	bne.n	b62e8 <_ZN9TCPClient4peekEv+0x12>
   b62fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6302:	e7f6      	b.n	b62f2 <_ZN9TCPClient4peekEv+0x1c>

000b6304 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6306:	6943      	ldr	r3, [r0, #20]
   b6308:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b630a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b630e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6312:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6314:	4605      	mov	r5, r0
   b6316:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b6318:	d016      	beq.n	b6348 <_ZN9TCPClient4readEPhj+0x44>
   b631a:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b631c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b6320:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b6324:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b6326:	42bc      	cmp	r4, r7
   b6328:	bf28      	it	cs
   b632a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b632c:	3304      	adds	r3, #4
   b632e:	4622      	mov	r2, r4
   b6330:	4419      	add	r1, r3
   b6332:	4630      	mov	r0, r6
   b6334:	f000 fd60 	bl	b6df8 <memcpy>
   b6338:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b633a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b633e:	4423      	add	r3, r4
   b6340:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b6344:	4620      	mov	r0, r4
   b6346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b6348:	6803      	ldr	r3, [r0, #0]
   b634a:	691b      	ldr	r3, [r3, #16]
   b634c:	4798      	blx	r3
   b634e:	2800      	cmp	r0, #0
   b6350:	d1e3      	bne.n	b631a <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b6352:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b6356:	e7f5      	b.n	b6344 <_ZN9TCPClient4readEPhj+0x40>

000b6358 <_ZN9TCPClient12flush_bufferEv>:
   b6358:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b635a:	2300      	movs	r3, #0
   b635c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b6360:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b6362:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b6366:	4770      	bx	lr

000b6368 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b636c:	461f      	mov	r7, r3
    stop();
   b636e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6370:	460c      	mov	r4, r1
    stop();
   b6372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6374:	b08a      	sub	sp, #40	; 0x28
   b6376:	4605      	mov	r5, r0
   b6378:	4616      	mov	r6, r2
    stop();
   b637a:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b637c:	7d23      	ldrb	r3, [r4, #20]
   b637e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b6382:	2b04      	cmp	r3, #4
   b6384:	bf0c      	ite	eq
   b6386:	2002      	moveq	r0, #2
   b6388:	200a      	movne	r0, #10
   b638a:	2206      	movs	r2, #6
   b638c:	2101      	movs	r1, #1
   b638e:	f7ff fa43 	bl	b5818 <sock_socket>
   b6392:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b6396:	696b      	ldr	r3, [r5, #20]
   b6398:	681b      	ldr	r3, [r3, #0]
   b639a:	2b00      	cmp	r3, #0
   b639c:	da08      	bge.n	b63b0 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b639e:	682b      	ldr	r3, [r5, #0]
   b63a0:	4628      	mov	r0, r5
   b63a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b63a4:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b63a6:	4798      	blx	r3
}
   b63a8:	4620      	mov	r0, r4
   b63aa:	b00a      	add	sp, #40	; 0x28
   b63ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b63b0:	4628      	mov	r0, r5
   b63b2:	f7ff ffd1 	bl	b6358 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b63b6:	b1b7      	cbz	r7, b63e6 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b63b8:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b63ba:	a903      	add	r1, sp, #12
   b63bc:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b63be:	9303      	str	r3, [sp, #12]
   b63c0:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b63c4:	f7ff f9c8 	bl	b5758 <if_index_to_name>
   b63c8:	2800      	cmp	r0, #0
   b63ca:	d1e8      	bne.n	b639e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b63cc:	6968      	ldr	r0, [r5, #20]
   b63ce:	2306      	movs	r3, #6
   b63d0:	9300      	str	r3, [sp, #0]
   b63d2:	6800      	ldr	r0, [r0, #0]
   b63d4:	ab03      	add	r3, sp, #12
   b63d6:	f241 020b 	movw	r2, #4107	; 0x100b
   b63da:	f640 71ff 	movw	r1, #4095	; 0xfff
   b63de:	f7ff f9f3 	bl	b57c8 <sock_setsockopt>
   b63e2:	2800      	cmp	r0, #0
   b63e4:	d1db      	bne.n	b639e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b63e6:	221c      	movs	r2, #28
   b63e8:	2100      	movs	r1, #0
   b63ea:	a803      	add	r0, sp, #12
   b63ec:	f000 fd12 	bl	b6e14 <memset>
    if (ip.version() == 4) {
   b63f0:	7d23      	ldrb	r3, [r4, #20]
   b63f2:	2b04      	cmp	r3, #4
   b63f4:	d11d      	bne.n	b6432 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b63f6:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b63fa:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b63fc:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b6400:	f7ff f9ca 	bl	b5798 <inet_htons>
   b6404:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b6408:	6860      	ldr	r0, [r4, #4]
   b640a:	f7ff f9b5 	bl	b5778 <inet_htonl>
   b640e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b6410:	696b      	ldr	r3, [r5, #20]
   b6412:	221c      	movs	r2, #28
   b6414:	6818      	ldr	r0, [r3, #0]
   b6416:	a903      	add	r1, sp, #12
   b6418:	f7ff f9e6 	bl	b57e8 <sock_connect>
   b641c:	2800      	cmp	r0, #0
   b641e:	d1be      	bne.n	b639e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b6420:	3404      	adds	r4, #4
   b6422:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6424:	696d      	ldr	r5, [r5, #20]
   b6426:	358c      	adds	r5, #140	; 0x8c
   b6428:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b642a:	6823      	ldr	r3, [r4, #0]
   b642c:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b642e:	2401      	movs	r4, #1
   b6430:	e7ba      	b.n	b63a8 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b6432:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b6436:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b6438:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b643c:	f7ff f9ac 	bl	b5798 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6440:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b6442:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6446:	1d23      	adds	r3, r4, #4
   b6448:	f104 0714 	add.w	r7, r4, #20
   b644c:	6818      	ldr	r0, [r3, #0]
   b644e:	6859      	ldr	r1, [r3, #4]
   b6450:	4632      	mov	r2, r6
   b6452:	c203      	stmia	r2!, {r0, r1}
   b6454:	3308      	adds	r3, #8
   b6456:	42bb      	cmp	r3, r7
   b6458:	4616      	mov	r6, r2
   b645a:	d1f7      	bne.n	b644c <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b645c:	e7d8      	b.n	b6410 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b6460 <_ZN9TCPClient9availableEv>:
{
   b6460:	b530      	push	{r4, r5, lr}
   b6462:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b6464:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b6468:	b08b      	sub	sp, #44	; 0x2c
   b646a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b646c:	b12b      	cbz	r3, b647a <_ZN9TCPClient9availableEv+0x1a>
   b646e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b6472:	429a      	cmp	r2, r3
   b6474:	d101      	bne.n	b647a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b6476:	f7ff ff6f 	bl	b6358 <_ZN9TCPClient12flush_bufferEv>
   b647a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b647c:	6808      	ldr	r0, [r1, #0]
   b647e:	2800      	cmp	r0, #0
   b6480:	db18      	blt.n	b64b4 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b6482:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b6486:	2d7f      	cmp	r5, #127	; 0x7f
   b6488:	d814      	bhi.n	b64b4 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b648a:	3104      	adds	r1, #4
   b648c:	2308      	movs	r3, #8
   b648e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b6492:	4429      	add	r1, r5
   b6494:	f7ff f9b0 	bl	b57f8 <sock_recv>
            if (ret > 0) {
   b6498:	2800      	cmp	r0, #0
   b649a:	dd13      	ble.n	b64c4 <_ZN9TCPClient9availableEv+0x64>
   b649c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b649e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b64a2:	b90a      	cbnz	r2, b64a8 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b64a4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b64a8:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b64aa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b64ae:	4410      	add	r0, r2
   b64b0:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b64b4:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b64b6:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b64ba:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b64be:	1ac0      	subs	r0, r0, r3
   b64c0:	b00b      	add	sp, #44	; 0x2c
   b64c2:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b64c4:	f7ff faf4 	bl	b5ab0 <__errno>
   b64c8:	6803      	ldr	r3, [r0, #0]
   b64ca:	2b0b      	cmp	r3, #11
   b64cc:	d0f2      	beq.n	b64b4 <_ZN9TCPClient9availableEv+0x54>
   b64ce:	f7ff faef 	bl	b5ab0 <__errno>
   b64d2:	6803      	ldr	r3, [r0, #0]
   b64d4:	2b0b      	cmp	r3, #11
   b64d6:	d0ed      	beq.n	b64b4 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b64d8:	2320      	movs	r3, #32
   b64da:	2500      	movs	r5, #0
   b64dc:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b64e0:	f7ff fae6 	bl	b5ab0 <__errno>
   b64e4:	6803      	ldr	r3, [r0, #0]
   b64e6:	9301      	str	r3, [sp, #4]
   b64e8:	4b08      	ldr	r3, [pc, #32]	; (b650c <_ZN9TCPClient9availableEv+0xac>)
   b64ea:	4909      	ldr	r1, [pc, #36]	; (b6510 <_ZN9TCPClient9availableEv+0xb0>)
   b64ec:	9300      	str	r3, [sp, #0]
   b64ee:	aa02      	add	r2, sp, #8
   b64f0:	462b      	mov	r3, r5
   b64f2:	2032      	movs	r0, #50	; 0x32
   b64f4:	f7ff fa18 	bl	b5928 <log_message>
                    sock_close(d_->sock);
   b64f8:	6963      	ldr	r3, [r4, #20]
   b64fa:	6818      	ldr	r0, [r3, #0]
   b64fc:	f7ff f96c 	bl	b57d8 <sock_close>
   b6500:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b6502:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6506:	601a      	str	r2, [r3, #0]
   b6508:	e7d4      	b.n	b64b4 <_ZN9TCPClient9availableEv+0x54>
   b650a:	bf00      	nop
   b650c:	000b7663 	.word	0x000b7663
   b6510:	000b765c 	.word	0x000b765c

000b6514 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b6514:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b6516:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b6518:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b651a:	6818      	ldr	r0, [r3, #0]
   b651c:	2800      	cmp	r0, #0
   b651e:	db01      	blt.n	b6524 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b6520:	f7ff f95a 	bl	b57d8 <sock_close>
   b6524:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b6526:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b652a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b652c:	6960      	ldr	r0, [r4, #20]
   b652e:	2211      	movs	r2, #17
   b6530:	2100      	movs	r1, #0
   b6532:	308c      	adds	r0, #140	; 0x8c
   b6534:	f000 fc6e 	bl	b6e14 <memset>
    flush_buffer();
   b6538:	4620      	mov	r0, r4
}
   b653a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b653e:	f7ff bf0b 	b.w	b6358 <_ZN9TCPClient12flush_bufferEv>

000b6542 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b6542:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b6544:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b6546:	4604      	mov	r4, r0
          total(0) {
   b6548:	6001      	str	r1, [r0, #0]
   b654a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b654e:	3088      	adds	r0, #136	; 0x88
   b6550:	f7ff fb94 	bl	b5c7c <_ZN9IPAddressC1Ev>
}
   b6554:	4620      	mov	r0, r4
   b6556:	bd10      	pop	{r4, pc}

000b6558 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b6558:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b655a:	2300      	movs	r3, #0
   b655c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6560:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b6564:	4a0e      	ldr	r2, [pc, #56]	; (b65a0 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b6566:	6103      	str	r3, [r0, #16]
   b6568:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b656a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b656c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b656e:	20ac      	movs	r0, #172	; 0xac
   b6570:	9101      	str	r1, [sp, #4]
   b6572:	f7fe f9c0 	bl	b48f6 <_Znwj>
	  auto __pi = ::new (__mem)
   b6576:	1e05      	subs	r5, r0, #0
   b6578:	f105 060c 	add.w	r6, r5, #12
   b657c:	d008      	beq.n	b6590 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b657e:	2301      	movs	r3, #1
   b6580:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6584:	4b07      	ldr	r3, [pc, #28]	; (b65a4 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b6586:	9901      	ldr	r1, [sp, #4]
   b6588:	602b      	str	r3, [r5, #0]
   b658a:	4630      	mov	r0, r6
   b658c:	f7ff ffd9 	bl	b6542 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b6590:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b6592:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b6596:	f7ff fedf 	bl	b6358 <_ZN9TCPClient12flush_bufferEv>
}
   b659a:	b002      	add	sp, #8
   b659c:	bd70      	pop	{r4, r5, r6, pc}
   b659e:	bf00      	nop
   b65a0:	000b7698 	.word	0x000b7698
   b65a4:	000b767c 	.word	0x000b767c

000b65a8 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b65a8:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b65aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b65ae:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b65b0:	f7ff ffd2 	bl	b6558 <_ZN9TCPClientC1Ei>
}
   b65b4:	4620      	mov	r0, r4
   b65b6:	bd10      	pop	{r4, pc}

000b65b8 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b65b8:	b510      	push	{r4, lr}
   b65ba:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b65bc:	6800      	ldr	r0, [r0, #0]
   b65be:	2800      	cmp	r0, #0
   b65c0:	db01      	blt.n	b65c6 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b65c2:	f7ff f909 	bl	b57d8 <sock_close>
    }
}
   b65c6:	4620      	mov	r0, r4
   b65c8:	bd10      	pop	{r4, pc}

000b65ca <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b65ca:	300c      	adds	r0, #12
   b65cc:	f7ff bff4 	b.w	b65b8 <_ZN9TCPClient4DataD1Ev>

000b65d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b65d0:	4b02      	ldr	r3, [pc, #8]	; (b65dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b65d2:	681a      	ldr	r2, [r3, #0]
   b65d4:	4b02      	ldr	r3, [pc, #8]	; (b65e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b65d6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b65d8:	4770      	bx	lr
   b65da:	bf00      	nop
   b65dc:	2003e2ac 	.word	0x2003e2ac
   b65e0:	2003e6f0 	.word	0x2003e6f0

000b65e4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b65e4:	4770      	bx	lr

000b65e6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b65e6:	7441      	strb	r1, [r0, #17]
}
   b65e8:	4770      	bx	lr

000b65ea <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b65ea:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b65ec:	7c00      	ldrb	r0, [r0, #16]
   b65ee:	f7ff f95b 	bl	b58a8 <hal_usart_available_data_for_write>
}
   b65f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b65f6:	bd08      	pop	{r3, pc}

000b65f8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b65f8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b65fa:	7c00      	ldrb	r0, [r0, #16]
   b65fc:	f7ff f92c 	bl	b5858 <hal_usart_available>
}
   b6600:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6604:	bd08      	pop	{r3, pc}

000b6606 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6606:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6608:	7c00      	ldrb	r0, [r0, #16]
   b660a:	f7ff f935 	bl	b5878 <hal_usart_peek>
}
   b660e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6612:	bd08      	pop	{r3, pc}

000b6614 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6614:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6616:	7c00      	ldrb	r0, [r0, #16]
   b6618:	f7ff f926 	bl	b5868 <hal_usart_read>
}
   b661c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6620:	bd08      	pop	{r3, pc}

000b6622 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6622:	7c00      	ldrb	r0, [r0, #16]
   b6624:	f7ff b930 	b.w	b5888 <hal_usart_flush>

000b6628 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6628:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b662a:	7c45      	ldrb	r5, [r0, #17]
{
   b662c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b662e:	b12d      	cbz	r5, b663c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6630:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6632:	b003      	add	sp, #12
   b6634:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6638:	f7ff b906 	b.w	b5848 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b663c:	7c00      	ldrb	r0, [r0, #16]
   b663e:	9101      	str	r1, [sp, #4]
   b6640:	f7ff f932 	bl	b58a8 <hal_usart_available_data_for_write>
   b6644:	2800      	cmp	r0, #0
   b6646:	9901      	ldr	r1, [sp, #4]
   b6648:	dcf2      	bgt.n	b6630 <_ZN11USARTSerial5writeEh+0x8>
}
   b664a:	4628      	mov	r0, r5
   b664c:	b003      	add	sp, #12
   b664e:	bd30      	pop	{r4, r5, pc}

000b6650 <_ZN11USARTSerialD0Ev>:
   b6650:	b510      	push	{r4, lr}
   b6652:	2114      	movs	r1, #20
   b6654:	4604      	mov	r4, r0
   b6656:	f7fe f952 	bl	b48fe <_ZdlPvj>
   b665a:	4620      	mov	r0, r4
   b665c:	bd10      	pop	{r4, pc}
	...

000b6660 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6660:	b510      	push	{r4, lr}
   b6662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6666:	4604      	mov	r4, r0
   b6668:	4608      	mov	r0, r1
   b666a:	4611      	mov	r1, r2
   b666c:	2200      	movs	r2, #0
   b666e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6672:	4b04      	ldr	r3, [pc, #16]	; (b6684 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6674:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6676:	2301      	movs	r3, #1
  _serial = serial;
   b6678:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b667a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b667c:	f7ff f91c 	bl	b58b8 <hal_usart_init_ex>
}
   b6680:	4620      	mov	r0, r4
   b6682:	bd10      	pop	{r4, pc}
   b6684:	000b7700 	.word	0x000b7700

000b6688 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6688:	7441      	strb	r1, [r0, #17]
}
   b668a:	4770      	bx	lr

000b668c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b668c:	4770      	bx	lr

000b668e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b668e:	4770      	bx	lr

000b6690 <_ZN9USBSerial4readEv>:
{
   b6690:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6692:	2100      	movs	r1, #0
   b6694:	7c00      	ldrb	r0, [r0, #16]
   b6696:	f7ff f92f 	bl	b58f8 <HAL_USB_USART_Receive_Data>
}
   b669a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b669e:	bd08      	pop	{r3, pc}

000b66a0 <_ZN9USBSerial4peekEv>:
{
   b66a0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b66a2:	2101      	movs	r1, #1
   b66a4:	7c00      	ldrb	r0, [r0, #16]
   b66a6:	f7ff f927 	bl	b58f8 <HAL_USB_USART_Receive_Data>
}
   b66aa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b66ae:	bd08      	pop	{r3, pc}

000b66b0 <_ZN9USBSerial17availableForWriteEv>:
{
   b66b0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b66b2:	7c00      	ldrb	r0, [r0, #16]
   b66b4:	f7ff f918 	bl	b58e8 <HAL_USB_USART_Available_Data_For_Write>
}
   b66b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b66bc:	bd08      	pop	{r3, pc}

000b66be <_ZN9USBSerial9availableEv>:
{
   b66be:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b66c0:	7c00      	ldrb	r0, [r0, #16]
   b66c2:	f7ff f909 	bl	b58d8 <HAL_USB_USART_Available_Data>
}
   b66c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b66ca:	bd08      	pop	{r3, pc}

000b66cc <_ZN9USBSerial5writeEh>:
{
   b66cc:	b513      	push	{r0, r1, r4, lr}
   b66ce:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b66d0:	7c00      	ldrb	r0, [r0, #16]
{
   b66d2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b66d4:	f7ff f908 	bl	b58e8 <HAL_USB_USART_Available_Data_For_Write>
   b66d8:	2800      	cmp	r0, #0
   b66da:	9901      	ldr	r1, [sp, #4]
   b66dc:	dc01      	bgt.n	b66e2 <_ZN9USBSerial5writeEh+0x16>
   b66de:	7c60      	ldrb	r0, [r4, #17]
   b66e0:	b120      	cbz	r0, b66ec <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b66e2:	7c20      	ldrb	r0, [r4, #16]
   b66e4:	f7ff f910 	bl	b5908 <HAL_USB_USART_Send_Data>
   b66e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b66ec:	b002      	add	sp, #8
   b66ee:	bd10      	pop	{r4, pc}

000b66f0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b66f0:	7c00      	ldrb	r0, [r0, #16]
   b66f2:	f7ff b911 	b.w	b5918 <HAL_USB_USART_Flush_Data>

000b66f6 <_ZN9USBSerialD0Ev>:
   b66f6:	b510      	push	{r4, lr}
   b66f8:	2114      	movs	r1, #20
   b66fa:	4604      	mov	r4, r0
   b66fc:	f7fe f8ff 	bl	b48fe <_ZdlPvj>
   b6700:	4620      	mov	r0, r4
   b6702:	bd10      	pop	{r4, pc}

000b6704 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6704:	b510      	push	{r4, lr}
   b6706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b670a:	4604      	mov	r4, r0
   b670c:	4608      	mov	r0, r1
   b670e:	2100      	movs	r1, #0
   b6710:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6714:	4b04      	ldr	r3, [pc, #16]	; (b6728 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6716:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6718:	2301      	movs	r3, #1
  _serial = serial;
   b671a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b671c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b671e:	4611      	mov	r1, r2
   b6720:	f7ff f8d2 	bl	b58c8 <HAL_USB_USART_Init>
}
   b6724:	4620      	mov	r0, r4
   b6726:	bd10      	pop	{r4, pc}
   b6728:	000b7730 	.word	0x000b7730

000b672c <_Z19acquireSerialBufferv>:
{
   b672c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b672e:	2214      	movs	r2, #20
{
   b6730:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6732:	2100      	movs	r1, #0
   b6734:	f000 fb6e 	bl	b6e14 <memset>
}
   b6738:	4620      	mov	r0, r4
   b673a:	bd10      	pop	{r4, pc}

000b673c <_Z16_fetch_usbserialv>:
{
   b673c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b673e:	4c0f      	ldr	r4, [pc, #60]	; (b677c <_Z16_fetch_usbserialv+0x40>)
{
   b6740:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6742:	a803      	add	r0, sp, #12
   b6744:	f7ff fff2 	bl	b672c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6748:	7821      	ldrb	r1, [r4, #0]
   b674a:	f3bf 8f5b 	dmb	ish
   b674e:	f011 0101 	ands.w	r1, r1, #1
   b6752:	d10f      	bne.n	b6774 <_Z16_fetch_usbserialv+0x38>
   b6754:	4620      	mov	r0, r4
   b6756:	9101      	str	r1, [sp, #4]
   b6758:	f7fe f8d3 	bl	b4902 <__cxa_guard_acquire>
   b675c:	9901      	ldr	r1, [sp, #4]
   b675e:	b148      	cbz	r0, b6774 <_Z16_fetch_usbserialv+0x38>
   b6760:	aa03      	add	r2, sp, #12
   b6762:	4807      	ldr	r0, [pc, #28]	; (b6780 <_Z16_fetch_usbserialv+0x44>)
   b6764:	f7ff ffce 	bl	b6704 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6768:	4620      	mov	r0, r4
   b676a:	f7fe f8cf 	bl	b490c <__cxa_guard_release>
   b676e:	4805      	ldr	r0, [pc, #20]	; (b6784 <_Z16_fetch_usbserialv+0x48>)
   b6770:	f000 fb34 	bl	b6ddc <atexit>
	return _usbserial;
}
   b6774:	4802      	ldr	r0, [pc, #8]	; (b6780 <_Z16_fetch_usbserialv+0x44>)
   b6776:	b008      	add	sp, #32
   b6778:	bd10      	pop	{r4, pc}
   b677a:	bf00      	nop
   b677c:	2003e6f4 	.word	0x2003e6f4
   b6780:	2003e6f8 	.word	0x2003e6f8
   b6784:	000b668d 	.word	0x000b668d

000b6788 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6788:	2200      	movs	r2, #0
   b678a:	6840      	ldr	r0, [r0, #4]
   b678c:	4611      	mov	r1, r2
   b678e:	f7ff b927 	b.w	b59e0 <network_ready>

000b6792 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6792:	2200      	movs	r2, #0
   b6794:	6840      	ldr	r0, [r0, #4]
   b6796:	4611      	mov	r1, r2
   b6798:	f7ff b942 	b.w	b5a20 <network_listening>

000b679c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b679c:	2200      	movs	r2, #0
   b679e:	6840      	ldr	r0, [r0, #4]
   b67a0:	4611      	mov	r1, r2
   b67a2:	f7ff b94d 	b.w	b5a40 <network_get_listen_timeout>

000b67a6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b67a6:	6840      	ldr	r0, [r0, #4]
   b67a8:	2200      	movs	r2, #0
   b67aa:	f7ff b941 	b.w	b5a30 <network_set_listen_timeout>

000b67ae <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b67ae:	6840      	ldr	r0, [r0, #4]
   b67b0:	2200      	movs	r2, #0
   b67b2:	f081 0101 	eor.w	r1, r1, #1
   b67b6:	f7ff b92b 	b.w	b5a10 <network_listen>

000b67ba <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b67ba:	2300      	movs	r3, #0
   b67bc:	6840      	ldr	r0, [r0, #4]
   b67be:	461a      	mov	r2, r3
   b67c0:	4619      	mov	r1, r3
   b67c2:	f7ff b91d 	b.w	b5a00 <network_off>

000b67c6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b67c6:	2300      	movs	r3, #0
   b67c8:	6840      	ldr	r0, [r0, #4]
   b67ca:	461a      	mov	r2, r3
   b67cc:	4619      	mov	r1, r3
   b67ce:	f7ff b90f 	b.w	b59f0 <network_on>

000b67d2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b67d2:	2200      	movs	r2, #0
   b67d4:	6840      	ldr	r0, [r0, #4]
   b67d6:	4611      	mov	r1, r2
   b67d8:	f7ff b8f2 	b.w	b59c0 <network_connecting>

000b67dc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b67dc:	6840      	ldr	r0, [r0, #4]
   b67de:	2200      	movs	r2, #0
   b67e0:	2102      	movs	r1, #2
   b67e2:	f7ff b8f5 	b.w	b59d0 <network_disconnect>

000b67e6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b67e6:	2300      	movs	r3, #0
   b67e8:	6840      	ldr	r0, [r0, #4]
   b67ea:	461a      	mov	r2, r3
   b67ec:	f7ff b8e0 	b.w	b59b0 <network_connect>

000b67f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b67f0:	4b02      	ldr	r3, [pc, #8]	; (b67fc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b67f2:	2204      	movs	r2, #4
   b67f4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b67f6:	4a02      	ldr	r2, [pc, #8]	; (b6800 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b67f8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b67fa:	4770      	bx	lr
   b67fc:	2003e70c 	.word	0x2003e70c
   b6800:	000b7760 	.word	0x000b7760

000b6804 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6804:	4b01      	ldr	r3, [pc, #4]	; (b680c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6806:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6808:	4770      	bx	lr
   b680a:	bf00      	nop
   b680c:	2003e2b0 	.word	0x2003e2b0

000b6810 <serialEventRun>:
{
   b6810:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6812:	4b0b      	ldr	r3, [pc, #44]	; (b6840 <serialEventRun+0x30>)
   b6814:	b143      	cbz	r3, b6828 <serialEventRun+0x18>
   b6816:	f7ff ff91 	bl	b673c <_Z16_fetch_usbserialv>
   b681a:	6803      	ldr	r3, [r0, #0]
   b681c:	691b      	ldr	r3, [r3, #16]
   b681e:	4798      	blx	r3
   b6820:	2800      	cmp	r0, #0
   b6822:	dd01      	ble.n	b6828 <serialEventRun+0x18>
        serialEvent();
   b6824:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6828:	4b06      	ldr	r3, [pc, #24]	; (b6844 <serialEventRun+0x34>)
   b682a:	b143      	cbz	r3, b683e <serialEventRun+0x2e>
   b682c:	f000 f99a 	bl	b6b64 <_Z22__fetch_global_Serial1v>
   b6830:	6803      	ldr	r3, [r0, #0]
   b6832:	691b      	ldr	r3, [r3, #16]
   b6834:	4798      	blx	r3
   b6836:	2800      	cmp	r0, #0
   b6838:	dd01      	ble.n	b683e <serialEventRun+0x2e>
        serialEvent1();
   b683a:	f3af 8000 	nop.w
}
   b683e:	bd08      	pop	{r3, pc}
	...

000b6848 <_post_loop>:
{
   b6848:	b508      	push	{r3, lr}
	serialEventRun();
   b684a:	f7ff ffe1 	bl	b6810 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b684e:	f7fe ff03 	bl	b5658 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6852:	4b01      	ldr	r3, [pc, #4]	; (b6858 <_post_loop+0x10>)
   b6854:	6018      	str	r0, [r3, #0]
}
   b6856:	bd08      	pop	{r3, pc}
   b6858:	2003e728 	.word	0x2003e728

000b685c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b685c:	4805      	ldr	r0, [pc, #20]	; (b6874 <_Z33system_initialize_user_backup_ramv+0x18>)
   b685e:	4a06      	ldr	r2, [pc, #24]	; (b6878 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6860:	4906      	ldr	r1, [pc, #24]	; (b687c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6862:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6864:	1a12      	subs	r2, r2, r0
   b6866:	f000 fac7 	bl	b6df8 <memcpy>
    __backup_sram_signature = signature;
   b686a:	4b05      	ldr	r3, [pc, #20]	; (b6880 <_Z33system_initialize_user_backup_ramv+0x24>)
   b686c:	4a05      	ldr	r2, [pc, #20]	; (b6884 <_Z33system_initialize_user_backup_ramv+0x28>)
   b686e:	601a      	str	r2, [r3, #0]
}
   b6870:	bd08      	pop	{r3, pc}
   b6872:	bf00      	nop
   b6874:	2003f400 	.word	0x2003f400
   b6878:	2003f404 	.word	0x2003f404
   b687c:	000b7ab0 	.word	0x000b7ab0
   b6880:	2003f400 	.word	0x2003f400
   b6884:	9a271c1e 	.word	0x9a271c1e

000b6888 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6888:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b688a:	2300      	movs	r3, #0
   b688c:	9300      	str	r3, [sp, #0]
   b688e:	461a      	mov	r2, r3
   b6890:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6894:	f7ff f872 	bl	b597c <system_ctrl_set_result>
}
   b6898:	b003      	add	sp, #12
   b689a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b68a0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b68a0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b68a2:	8843      	ldrh	r3, [r0, #2]
   b68a4:	2b0a      	cmp	r3, #10
   b68a6:	d008      	beq.n	b68ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b68a8:	2b50      	cmp	r3, #80	; 0x50
   b68aa:	d10b      	bne.n	b68c4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b68ac:	4b09      	ldr	r3, [pc, #36]	; (b68d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b68ae:	681b      	ldr	r3, [r3, #0]
   b68b0:	b14b      	cbz	r3, b68c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b68b2:	b003      	add	sp, #12
   b68b4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b68b8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b68ba:	f7ff ffe5 	bl	b6888 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b68be:	b003      	add	sp, #12
   b68c0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b68c4:	2300      	movs	r3, #0
   b68c6:	9300      	str	r3, [sp, #0]
   b68c8:	461a      	mov	r2, r3
   b68ca:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b68ce:	f7ff f855 	bl	b597c <system_ctrl_set_result>
}
   b68d2:	e7f4      	b.n	b68be <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b68d4:	2003e718 	.word	0x2003e718

000b68d8 <module_user_init_hook>:
{
   b68d8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b68da:	4812      	ldr	r0, [pc, #72]	; (b6924 <module_user_init_hook+0x4c>)
   b68dc:	2100      	movs	r1, #0
   b68de:	f7ff f8f7 	bl	b5ad0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b68e2:	4b11      	ldr	r3, [pc, #68]	; (b6928 <module_user_init_hook+0x50>)
   b68e4:	681a      	ldr	r2, [r3, #0]
   b68e6:	4b11      	ldr	r3, [pc, #68]	; (b692c <module_user_init_hook+0x54>)
   b68e8:	429a      	cmp	r2, r3
   b68ea:	4b11      	ldr	r3, [pc, #68]	; (b6930 <module_user_init_hook+0x58>)
   b68ec:	bf0c      	ite	eq
   b68ee:	2201      	moveq	r2, #1
   b68f0:	2200      	movne	r2, #0
   b68f2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b68f4:	d001      	beq.n	b68fa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b68f6:	f7ff ffb1 	bl	b685c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b68fa:	f7fe fea5 	bl	b5648 <HAL_RNG_GetRandomNumber>
   b68fe:	4604      	mov	r4, r0
    srand(seed);
   b6900:	f000 fa90 	bl	b6e24 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6904:	4b0b      	ldr	r3, [pc, #44]	; (b6934 <module_user_init_hook+0x5c>)
   b6906:	b113      	cbz	r3, b690e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6908:	4620      	mov	r0, r4
   b690a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b690e:	2100      	movs	r1, #0
   b6910:	4808      	ldr	r0, [pc, #32]	; (b6934 <module_user_init_hook+0x5c>)
   b6912:	f7ff f845 	bl	b59a0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b691a:	4807      	ldr	r0, [pc, #28]	; (b6938 <module_user_init_hook+0x60>)
   b691c:	2100      	movs	r1, #0
   b691e:	f7ff b823 	b.w	b5968 <system_ctrl_set_app_request_handler>
   b6922:	bf00      	nop
   b6924:	000b6805 	.word	0x000b6805
   b6928:	2003f400 	.word	0x2003f400
   b692c:	9a271c1e 	.word	0x9a271c1e
   b6930:	2003e714 	.word	0x2003e714
   b6934:	00000000 	.word	0x00000000
   b6938:	000b68a1 	.word	0x000b68a1

000b693c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b693c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b693e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6940:	d902      	bls.n	b6948 <pinAvailable+0xc>
    return false;
   b6942:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6944:	b002      	add	sp, #8
   b6946:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6948:	f1a0 030b 	sub.w	r3, r0, #11
   b694c:	2b02      	cmp	r3, #2
   b694e:	d81a      	bhi.n	b6986 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6950:	4c17      	ldr	r4, [pc, #92]	; (b69b0 <pinAvailable+0x74>)
   b6952:	7821      	ldrb	r1, [r4, #0]
   b6954:	f3bf 8f5b 	dmb	ish
   b6958:	f011 0101 	ands.w	r1, r1, #1
   b695c:	d10b      	bne.n	b6976 <pinAvailable+0x3a>
   b695e:	4620      	mov	r0, r4
   b6960:	9101      	str	r1, [sp, #4]
   b6962:	f7fd ffce 	bl	b4902 <__cxa_guard_acquire>
   b6966:	9901      	ldr	r1, [sp, #4]
   b6968:	b128      	cbz	r0, b6976 <pinAvailable+0x3a>
   b696a:	4812      	ldr	r0, [pc, #72]	; (b69b4 <pinAvailable+0x78>)
   b696c:	f7ff fafa 	bl	b5f64 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6970:	4620      	mov	r0, r4
   b6972:	f7fd ffcb 	bl	b490c <__cxa_guard_release>
   b6976:	4b0f      	ldr	r3, [pc, #60]	; (b69b4 <pinAvailable+0x78>)
   b6978:	7818      	ldrb	r0, [r3, #0]
   b697a:	f7fe ff5d 	bl	b5838 <hal_spi_is_enabled>
   b697e:	2800      	cmp	r0, #0
   b6980:	d1df      	bne.n	b6942 <pinAvailable+0x6>
  return true; // 'pin' is available
   b6982:	2001      	movs	r0, #1
   b6984:	e7de      	b.n	b6944 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6986:	2801      	cmp	r0, #1
   b6988:	d809      	bhi.n	b699e <pinAvailable+0x62>
   b698a:	f000 f8ab 	bl	b6ae4 <_Z19__fetch_global_Wirev>
   b698e:	2100      	movs	r1, #0
   b6990:	7c00      	ldrb	r0, [r0, #16]
   b6992:	f7fe fed1 	bl	b5738 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6996:	f080 0001 	eor.w	r0, r0, #1
   b699a:	b2c0      	uxtb	r0, r0
   b699c:	e7d2      	b.n	b6944 <pinAvailable+0x8>
   b699e:	3809      	subs	r0, #9
   b69a0:	2801      	cmp	r0, #1
   b69a2:	d8ee      	bhi.n	b6982 <pinAvailable+0x46>
   b69a4:	f000 f8de 	bl	b6b64 <_Z22__fetch_global_Serial1v>
   b69a8:	7c00      	ldrb	r0, [r0, #16]
   b69aa:	f7fe ff75 	bl	b5898 <hal_usart_is_enabled>
   b69ae:	e7f2      	b.n	b6996 <pinAvailable+0x5a>
   b69b0:	2003e71c 	.word	0x2003e71c
   b69b4:	2003e720 	.word	0x2003e720

000b69b8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b69b8:	2823      	cmp	r0, #35	; 0x23
{
   b69ba:	b538      	push	{r3, r4, r5, lr}
   b69bc:	4604      	mov	r4, r0
   b69be:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b69c0:	d80a      	bhi.n	b69d8 <pinMode+0x20>
   b69c2:	29ff      	cmp	r1, #255	; 0xff
   b69c4:	d008      	beq.n	b69d8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b69c6:	f7ff ffb9 	bl	b693c <pinAvailable>
   b69ca:	b128      	cbz	r0, b69d8 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b69cc:	4629      	mov	r1, r5
   b69ce:	4620      	mov	r0, r4
}
   b69d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b69d4:	f7fe be50 	b.w	b5678 <hal_gpio_mode>
}
   b69d8:	bd38      	pop	{r3, r4, r5, pc}

000b69da <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b69da:	b538      	push	{r3, r4, r5, lr}
   b69dc:	4604      	mov	r4, r0
   b69de:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b69e0:	f7fe fe52 	bl	b5688 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b69e4:	28ff      	cmp	r0, #255	; 0xff
   b69e6:	d010      	beq.n	b6a0a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b69e8:	2806      	cmp	r0, #6
   b69ea:	d804      	bhi.n	b69f6 <digitalWrite+0x1c>
   b69ec:	234d      	movs	r3, #77	; 0x4d
   b69ee:	fa23 f000 	lsr.w	r0, r3, r0
   b69f2:	07c3      	lsls	r3, r0, #31
   b69f4:	d409      	bmi.n	b6a0a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b69f6:	4620      	mov	r0, r4
   b69f8:	f7ff ffa0 	bl	b693c <pinAvailable>
   b69fc:	b128      	cbz	r0, b6a0a <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b69fe:	4629      	mov	r1, r5
   b6a00:	4620      	mov	r0, r4
}
   b6a02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b6a06:	f7fe be47 	b.w	b5698 <hal_gpio_write>
}
   b6a0a:	bd38      	pop	{r3, r4, r5, pc}

000b6a0c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b6a0c:	b510      	push	{r4, lr}
   b6a0e:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b6a10:	f7fe fe3a 	bl	b5688 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b6a14:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b6a16:	b2db      	uxtb	r3, r3
   b6a18:	2b01      	cmp	r3, #1
   b6a1a:	d908      	bls.n	b6a2e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b6a1c:	4620      	mov	r0, r4
   b6a1e:	f7ff ff8d 	bl	b693c <pinAvailable>
   b6a22:	b120      	cbz	r0, b6a2e <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b6a24:	4620      	mov	r0, r4
}
   b6a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b6a2a:	f7fe be3d 	b.w	b56a8 <hal_gpio_read>
}
   b6a2e:	2000      	movs	r0, #0
   b6a30:	bd10      	pop	{r4, pc}

000b6a32 <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b6a32:	280d      	cmp	r0, #13
{
   b6a34:	b510      	push	{r4, lr}
   b6a36:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b6a38:	bf9c      	itt	ls
   b6a3a:	340e      	addls	r4, #14
   b6a3c:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b6a3e:	4620      	mov	r0, r4
   b6a40:	f7ff ff7c 	bl	b693c <pinAvailable>
   b6a44:	b150      	cbz	r0, b6a5c <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b6a46:	2103      	movs	r1, #3
   b6a48:	4620      	mov	r0, r4
   b6a4a:	f7fe fe0d 	bl	b5668 <hal_pin_validate_function>
   b6a4e:	2803      	cmp	r0, #3
   b6a50:	d104      	bne.n	b6a5c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b6a52:	4620      	mov	r0, r4
}
   b6a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b6a58:	f7fe be36 	b.w	b56c8 <hal_adc_read>
}
   b6a5c:	2000      	movs	r0, #0
   b6a5e:	bd10      	pop	{r4, pc}

000b6a60 <_Z11analogWritetm>:

/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 */
void analogWrite(hal_pin_t pin, uint32_t value)
{
   b6a60:	b538      	push	{r3, r4, r5, lr}
   b6a62:	4604      	mov	r4, r0
   b6a64:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b6a66:	f7ff ff69 	bl	b693c <pinAvailable>
   b6a6a:	b1f0      	cbz	r0, b6aaa <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (hal_pin_validate_function(pin, PF_DAC) == PF_DAC)
   b6a6c:	2104      	movs	r1, #4
   b6a6e:	4620      	mov	r0, r4
   b6a70:	f7fe fdfa 	bl	b5668 <hal_pin_validate_function>
   b6a74:	2804      	cmp	r0, #4
   b6a76:	d105      	bne.n	b6a84 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b6a78:	b2a9      	uxth	r1, r5
   b6a7a:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b6a7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b6a80:	f7fe be1a 	b.w	b56b8 <HAL_DAC_Write>
    else if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
   b6a84:	2102      	movs	r1, #2
   b6a86:	4620      	mov	r0, r4
   b6a88:	f7fe fdee 	bl	b5668 <hal_pin_validate_function>
   b6a8c:	2802      	cmp	r0, #2
   b6a8e:	d10c      	bne.n	b6aaa <_Z11analogWritetm+0x4a>
        PinMode mode = hal_gpio_get_mode(pin);
   b6a90:	4620      	mov	r0, r4
   b6a92:	f7fe fdf9 	bl	b5688 <hal_gpio_get_mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b6a96:	2801      	cmp	r0, #1
   b6a98:	d001      	beq.n	b6a9e <_Z11analogWritetm+0x3e>
   b6a9a:	2804      	cmp	r0, #4
   b6a9c:	d105      	bne.n	b6aaa <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b6a9e:	4629      	mov	r1, r5
   b6aa0:	4620      	mov	r0, r4
}
   b6aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b6aa6:	f7fe be17 	b.w	b56d8 <hal_pwm_write_ext>
}
   b6aaa:	bd38      	pop	{r3, r4, r5, pc}

000b6aac <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6aac:	4770      	bx	lr
	...

000b6ab0 <_Z17acquireWireBufferv>:
{
   b6ab0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6ab2:	4b0a      	ldr	r3, [pc, #40]	; (b6adc <_Z17acquireWireBufferv+0x2c>)
   b6ab4:	6003      	str	r3, [r0, #0]
   b6ab6:	2301      	movs	r3, #1
{
   b6ab8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6aba:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6abc:	4908      	ldr	r1, [pc, #32]	; (b6ae0 <_Z17acquireWireBufferv+0x30>)
   b6abe:	2020      	movs	r0, #32
   b6ac0:	f000 f874 	bl	b6bac <_ZnajRKSt9nothrow_t>
	};
   b6ac4:	2520      	movs	r5, #32
   b6ac6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6ac8:	4905      	ldr	r1, [pc, #20]	; (b6ae0 <_Z17acquireWireBufferv+0x30>)
	};
   b6aca:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6acc:	4628      	mov	r0, r5
   b6ace:	f000 f86d 	bl	b6bac <_ZnajRKSt9nothrow_t>
	};
   b6ad2:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b6ad6:	4620      	mov	r0, r4
   b6ad8:	bd38      	pop	{r3, r4, r5, pc}
   b6ada:	bf00      	nop
   b6adc:	00010018 	.word	0x00010018
   b6ae0:	000b7794 	.word	0x000b7794

000b6ae4 <_Z19__fetch_global_Wirev>:
{
   b6ae4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6ae6:	4d0e      	ldr	r5, [pc, #56]	; (b6b20 <_Z19__fetch_global_Wirev+0x3c>)
   b6ae8:	7829      	ldrb	r1, [r5, #0]
   b6aea:	f3bf 8f5b 	dmb	ish
   b6aee:	f011 0401 	ands.w	r4, r1, #1
{
   b6af2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6af4:	d111      	bne.n	b6b1a <_Z19__fetch_global_Wirev+0x36>
   b6af6:	4628      	mov	r0, r5
   b6af8:	f7fd ff03 	bl	b4902 <__cxa_guard_acquire>
   b6afc:	b168      	cbz	r0, b6b1a <_Z19__fetch_global_Wirev+0x36>
   b6afe:	4668      	mov	r0, sp
   b6b00:	f7ff ffd6 	bl	b6ab0 <_Z17acquireWireBufferv>
   b6b04:	466a      	mov	r2, sp
   b6b06:	4621      	mov	r1, r4
   b6b08:	4806      	ldr	r0, [pc, #24]	; (b6b24 <_Z19__fetch_global_Wirev+0x40>)
   b6b0a:	f7ff f85f 	bl	b5bcc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6b0e:	4628      	mov	r0, r5
   b6b10:	f7fd fefc 	bl	b490c <__cxa_guard_release>
   b6b14:	4804      	ldr	r0, [pc, #16]	; (b6b28 <_Z19__fetch_global_Wirev+0x44>)
   b6b16:	f000 f961 	bl	b6ddc <atexit>
	return wire;
}
   b6b1a:	4802      	ldr	r0, [pc, #8]	; (b6b24 <_Z19__fetch_global_Wirev+0x40>)
   b6b1c:	b007      	add	sp, #28
   b6b1e:	bd30      	pop	{r4, r5, pc}
   b6b20:	2003e72c 	.word	0x2003e72c
   b6b24:	2003e730 	.word	0x2003e730
   b6b28:	000b6aad 	.word	0x000b6aad

000b6b2c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6b2c:	4770      	bx	lr
	...

000b6b30 <_Z20acquireSerial1Bufferv>:
{
   b6b30:	b538      	push	{r3, r4, r5, lr}
   b6b32:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6b34:	2514      	movs	r5, #20
   b6b36:	462a      	mov	r2, r5
   b6b38:	2100      	movs	r1, #0
   b6b3a:	f000 f96b 	bl	b6e14 <memset>
   b6b3e:	8025      	strh	r5, [r4, #0]
   b6b40:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6b42:	4907      	ldr	r1, [pc, #28]	; (b6b60 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6b44:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6b46:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6b48:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6b4a:	f000 f82f 	bl	b6bac <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6b4e:	4904      	ldr	r1, [pc, #16]	; (b6b60 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6b50:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6b52:	4628      	mov	r0, r5
   b6b54:	f000 f82a 	bl	b6bac <_ZnajRKSt9nothrow_t>
    };
   b6b58:	60e0      	str	r0, [r4, #12]
}
   b6b5a:	4620      	mov	r0, r4
   b6b5c:	bd38      	pop	{r3, r4, r5, pc}
   b6b5e:	bf00      	nop
   b6b60:	000b7794 	.word	0x000b7794

000b6b64 <_Z22__fetch_global_Serial1v>:
{
   b6b64:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6b66:	4d0e      	ldr	r5, [pc, #56]	; (b6ba0 <_Z22__fetch_global_Serial1v+0x3c>)
   b6b68:	7829      	ldrb	r1, [r5, #0]
   b6b6a:	f3bf 8f5b 	dmb	ish
   b6b6e:	f011 0401 	ands.w	r4, r1, #1
{
   b6b72:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6b74:	d111      	bne.n	b6b9a <_Z22__fetch_global_Serial1v+0x36>
   b6b76:	4628      	mov	r0, r5
   b6b78:	f7fd fec3 	bl	b4902 <__cxa_guard_acquire>
   b6b7c:	b168      	cbz	r0, b6b9a <_Z22__fetch_global_Serial1v+0x36>
   b6b7e:	a801      	add	r0, sp, #4
   b6b80:	f7ff ffd6 	bl	b6b30 <_Z20acquireSerial1Bufferv>
   b6b84:	aa01      	add	r2, sp, #4
   b6b86:	4621      	mov	r1, r4
   b6b88:	4806      	ldr	r0, [pc, #24]	; (b6ba4 <_Z22__fetch_global_Serial1v+0x40>)
   b6b8a:	f7ff fd69 	bl	b6660 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6b8e:	4628      	mov	r0, r5
   b6b90:	f7fd febc 	bl	b490c <__cxa_guard_release>
   b6b94:	4804      	ldr	r0, [pc, #16]	; (b6ba8 <_Z22__fetch_global_Serial1v+0x44>)
   b6b96:	f000 f921 	bl	b6ddc <atexit>
    return serial1;
}
   b6b9a:	4802      	ldr	r0, [pc, #8]	; (b6ba4 <_Z22__fetch_global_Serial1v+0x40>)
   b6b9c:	b007      	add	sp, #28
   b6b9e:	bd30      	pop	{r4, r5, pc}
   b6ba0:	2003e744 	.word	0x2003e744
   b6ba4:	2003e748 	.word	0x2003e748
   b6ba8:	000b6b2d 	.word	0x000b6b2d

000b6bac <_ZnajRKSt9nothrow_t>:
   b6bac:	f7fd bea5 	b.w	b48fa <_Znaj>

000b6bb0 <_ZSt25__throw_bad_function_callv>:
   b6bb0:	b508      	push	{r3, lr}
   b6bb2:	f7fe ff75 	bl	b5aa0 <abort>
	...

000b6bb8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b6bb8:	4901      	ldr	r1, [pc, #4]	; (b6bc0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b6bba:	f000 b8f9 	b.w	b6db0 <_ZNKSt9type_infoeqERKS_>
   b6bbe:	bf00      	nop
   b6bc0:	000b77b0 	.word	0x000b77b0

000b6bc4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b6bc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6bc6:	2400      	movs	r4, #0
   b6bc8:	2310      	movs	r3, #16
   b6bca:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b6bce:	6803      	ldr	r3, [r0, #0]
   b6bd0:	4615      	mov	r5, r2
   b6bd2:	699e      	ldr	r6, [r3, #24]
   b6bd4:	6812      	ldr	r2, [r2, #0]
   b6bd6:	466b      	mov	r3, sp
   b6bd8:	e9cd 4400 	strd	r4, r4, [sp]
   b6bdc:	47b0      	blx	r6
   b6bde:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6be2:	f003 0306 	and.w	r3, r3, #6
   b6be6:	2b06      	cmp	r3, #6
   b6be8:	bf03      	ittte	eq
   b6bea:	9b00      	ldreq	r3, [sp, #0]
   b6bec:	602b      	streq	r3, [r5, #0]
   b6bee:	2001      	moveq	r0, #1
   b6bf0:	4620      	movne	r0, r4
   b6bf2:	b004      	add	sp, #16
   b6bf4:	bd70      	pop	{r4, r5, r6, pc}

000b6bf6 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b6bf6:	9800      	ldr	r0, [sp, #0]
   b6bf8:	4290      	cmp	r0, r2
   b6bfa:	bf14      	ite	ne
   b6bfc:	2001      	movne	r0, #1
   b6bfe:	2006      	moveq	r0, #6
   b6c00:	4770      	bx	lr
	...

000b6c04 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b6c04:	b510      	push	{r4, lr}
   b6c06:	4b03      	ldr	r3, [pc, #12]	; (b6c14 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b6c08:	6003      	str	r3, [r0, #0]
   b6c0a:	4604      	mov	r4, r0
   b6c0c:	f000 f8cd 	bl	b6daa <_ZNSt9type_infoD1Ev>
   b6c10:	4620      	mov	r0, r4
   b6c12:	bd10      	pop	{r4, pc}
   b6c14:	000b77f0 	.word	0x000b77f0

000b6c18 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b6c18:	b510      	push	{r4, lr}
   b6c1a:	4604      	mov	r4, r0
   b6c1c:	f7ff fff2 	bl	b6c04 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6c20:	4620      	mov	r0, r4
   b6c22:	2108      	movs	r1, #8
   b6c24:	f7fd fe6b 	bl	b48fe <_ZdlPvj>
   b6c28:	4620      	mov	r0, r4
   b6c2a:	bd10      	pop	{r4, pc}

000b6c2c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b6c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6c30:	461f      	mov	r7, r3
   b6c32:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b6c36:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b6c3a:	4598      	cmp	r8, r3
   b6c3c:	4606      	mov	r6, r0
   b6c3e:	4615      	mov	r5, r2
   b6c40:	d107      	bne.n	b6c52 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6c42:	9907      	ldr	r1, [sp, #28]
   b6c44:	f000 f8b4 	bl	b6db0 <_ZNKSt9type_infoeqERKS_>
   b6c48:	b118      	cbz	r0, b6c52 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6c4a:	7165      	strb	r5, [r4, #5]
   b6c4c:	2000      	movs	r0, #0
   b6c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6c52:	4639      	mov	r1, r7
   b6c54:	4630      	mov	r0, r6
   b6c56:	f000 f8ab 	bl	b6db0 <_ZNKSt9type_infoeqERKS_>
   b6c5a:	2800      	cmp	r0, #0
   b6c5c:	d0f6      	beq.n	b6c4c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b6c5e:	2301      	movs	r3, #1
   b6c60:	f8c4 8000 	str.w	r8, [r4]
   b6c64:	7125      	strb	r5, [r4, #4]
   b6c66:	71a3      	strb	r3, [r4, #6]
   b6c68:	e7f0      	b.n	b6c4c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b6c6a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b6c6a:	b538      	push	{r3, r4, r5, lr}
   b6c6c:	4615      	mov	r5, r2
   b6c6e:	461c      	mov	r4, r3
   b6c70:	f000 f89e 	bl	b6db0 <_ZNKSt9type_infoeqERKS_>
   b6c74:	b120      	cbz	r0, b6c80 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b6c76:	2308      	movs	r3, #8
   b6c78:	60e3      	str	r3, [r4, #12]
   b6c7a:	2306      	movs	r3, #6
   b6c7c:	6025      	str	r5, [r4, #0]
   b6c7e:	7123      	strb	r3, [r4, #4]
   b6c80:	bd38      	pop	{r3, r4, r5, pc}

000b6c82 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b6c82:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6c84:	4605      	mov	r5, r0
   b6c86:	460c      	mov	r4, r1
   b6c88:	9201      	str	r2, [sp, #4]
   b6c8a:	461e      	mov	r6, r3
   b6c8c:	f000 f890 	bl	b6db0 <_ZNKSt9type_infoeqERKS_>
   b6c90:	b950      	cbnz	r0, b6ca8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6c92:	2e03      	cmp	r6, #3
   b6c94:	d808      	bhi.n	b6ca8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6c96:	6823      	ldr	r3, [r4, #0]
   b6c98:	9a01      	ldr	r2, [sp, #4]
   b6c9a:	695b      	ldr	r3, [r3, #20]
   b6c9c:	4629      	mov	r1, r5
   b6c9e:	4620      	mov	r0, r4
   b6ca0:	b002      	add	sp, #8
   b6ca2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6ca6:	4718      	bx	r3
   b6ca8:	b002      	add	sp, #8
   b6caa:	bd70      	pop	{r4, r5, r6, pc}

000b6cac <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b6cac:	b510      	push	{r4, lr}
   b6cae:	4b03      	ldr	r3, [pc, #12]	; (b6cbc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b6cb0:	6003      	str	r3, [r0, #0]
   b6cb2:	4604      	mov	r4, r0
   b6cb4:	f7ff ffa6 	bl	b6c04 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6cb8:	4620      	mov	r0, r4
   b6cba:	bd10      	pop	{r4, pc}
   b6cbc:	000b7850 	.word	0x000b7850

000b6cc0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b6cc0:	b510      	push	{r4, lr}
   b6cc2:	4604      	mov	r4, r0
   b6cc4:	f7ff fff2 	bl	b6cac <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b6cc8:	4620      	mov	r0, r4
   b6cca:	210c      	movs	r1, #12
   b6ccc:	f7fd fe17 	bl	b48fe <_ZdlPvj>
   b6cd0:	4620      	mov	r0, r4
   b6cd2:	bd10      	pop	{r4, pc}

000b6cd4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b6cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6cd6:	9f08      	ldr	r7, [sp, #32]
   b6cd8:	4297      	cmp	r7, r2
   b6cda:	4605      	mov	r5, r0
   b6cdc:	460e      	mov	r6, r1
   b6cde:	4614      	mov	r4, r2
   b6ce0:	d00a      	beq.n	b6cf8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b6ce2:	68a8      	ldr	r0, [r5, #8]
   b6ce4:	6802      	ldr	r2, [r0, #0]
   b6ce6:	9708      	str	r7, [sp, #32]
   b6ce8:	6a15      	ldr	r5, [r2, #32]
   b6cea:	4631      	mov	r1, r6
   b6cec:	4622      	mov	r2, r4
   b6cee:	46ac      	mov	ip, r5
   b6cf0:	b003      	add	sp, #12
   b6cf2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6cf6:	4760      	bx	ip
   b6cf8:	4619      	mov	r1, r3
   b6cfa:	9301      	str	r3, [sp, #4]
   b6cfc:	f000 f858 	bl	b6db0 <_ZNKSt9type_infoeqERKS_>
   b6d00:	9b01      	ldr	r3, [sp, #4]
   b6d02:	2800      	cmp	r0, #0
   b6d04:	d0ed      	beq.n	b6ce2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b6d06:	2006      	movs	r0, #6
   b6d08:	b003      	add	sp, #12
   b6d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6d0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b6d0c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6d10:	460d      	mov	r5, r1
   b6d12:	4619      	mov	r1, r3
   b6d14:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b6d18:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b6d1c:	4681      	mov	r9, r0
   b6d1e:	4617      	mov	r7, r2
   b6d20:	4698      	mov	r8, r3
   b6d22:	f000 f845 	bl	b6db0 <_ZNKSt9type_infoeqERKS_>
   b6d26:	b190      	cbz	r0, b6d4e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b6d28:	2d00      	cmp	r5, #0
   b6d2a:	6034      	str	r4, [r6, #0]
   b6d2c:	7137      	strb	r7, [r6, #4]
   b6d2e:	db09      	blt.n	b6d44 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b6d30:	1961      	adds	r1, r4, r5
   b6d32:	458a      	cmp	sl, r1
   b6d34:	bf0c      	ite	eq
   b6d36:	2106      	moveq	r1, #6
   b6d38:	2101      	movne	r1, #1
   b6d3a:	71b1      	strb	r1, [r6, #6]
   b6d3c:	2000      	movs	r0, #0
   b6d3e:	b001      	add	sp, #4
   b6d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6d44:	3502      	adds	r5, #2
   b6d46:	d1f9      	bne.n	b6d3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6d48:	2301      	movs	r3, #1
   b6d4a:	71b3      	strb	r3, [r6, #6]
   b6d4c:	e7f6      	b.n	b6d3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6d4e:	4554      	cmp	r4, sl
   b6d50:	d106      	bne.n	b6d60 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6d52:	4659      	mov	r1, fp
   b6d54:	4648      	mov	r0, r9
   b6d56:	f000 f82b 	bl	b6db0 <_ZNKSt9type_infoeqERKS_>
   b6d5a:	b108      	cbz	r0, b6d60 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6d5c:	7177      	strb	r7, [r6, #5]
   b6d5e:	e7ed      	b.n	b6d3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6d60:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b6d64:	6803      	ldr	r3, [r0, #0]
   b6d66:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b6d6a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b6d6e:	69dc      	ldr	r4, [r3, #28]
   b6d70:	463a      	mov	r2, r7
   b6d72:	4643      	mov	r3, r8
   b6d74:	4629      	mov	r1, r5
   b6d76:	46a4      	mov	ip, r4
   b6d78:	b001      	add	sp, #4
   b6d7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6d7e:	4760      	bx	ip

000b6d80 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b6d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6d84:	4607      	mov	r7, r0
   b6d86:	460c      	mov	r4, r1
   b6d88:	4615      	mov	r5, r2
   b6d8a:	461e      	mov	r6, r3
   b6d8c:	f7ff ff6d 	bl	b6c6a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b6d90:	b948      	cbnz	r0, b6da6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b6d92:	68b8      	ldr	r0, [r7, #8]
   b6d94:	6803      	ldr	r3, [r0, #0]
   b6d96:	699f      	ldr	r7, [r3, #24]
   b6d98:	462a      	mov	r2, r5
   b6d9a:	4633      	mov	r3, r6
   b6d9c:	4621      	mov	r1, r4
   b6d9e:	46bc      	mov	ip, r7
   b6da0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b6da4:	4760      	bx	ip
   b6da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6daa <_ZNSt9type_infoD1Ev>:
   b6daa:	4770      	bx	lr

000b6dac <_ZNKSt9type_info14__is_pointer_pEv>:
   b6dac:	2000      	movs	r0, #0
   b6dae:	4770      	bx	lr

000b6db0 <_ZNKSt9type_infoeqERKS_>:
   b6db0:	4281      	cmp	r1, r0
   b6db2:	b508      	push	{r3, lr}
   b6db4:	d00e      	beq.n	b6dd4 <_ZNKSt9type_infoeqERKS_+0x24>
   b6db6:	6840      	ldr	r0, [r0, #4]
   b6db8:	7803      	ldrb	r3, [r0, #0]
   b6dba:	2b2a      	cmp	r3, #42	; 0x2a
   b6dbc:	d00c      	beq.n	b6dd8 <_ZNKSt9type_infoeqERKS_+0x28>
   b6dbe:	6849      	ldr	r1, [r1, #4]
   b6dc0:	780b      	ldrb	r3, [r1, #0]
   b6dc2:	2b2a      	cmp	r3, #42	; 0x2a
   b6dc4:	bf08      	it	eq
   b6dc6:	3101      	addeq	r1, #1
   b6dc8:	f7fd fd48 	bl	b485c <strcmp>
   b6dcc:	fab0 f080 	clz	r0, r0
   b6dd0:	0940      	lsrs	r0, r0, #5
   b6dd2:	bd08      	pop	{r3, pc}
   b6dd4:	2001      	movs	r0, #1
   b6dd6:	e7fc      	b.n	b6dd2 <_ZNKSt9type_infoeqERKS_+0x22>
   b6dd8:	2000      	movs	r0, #0
   b6dda:	e7fa      	b.n	b6dd2 <_ZNKSt9type_infoeqERKS_+0x22>

000b6ddc <atexit>:
   b6ddc:	2300      	movs	r3, #0
   b6dde:	4601      	mov	r1, r0
   b6de0:	461a      	mov	r2, r3
   b6de2:	4618      	mov	r0, r3
   b6de4:	f000 b8ec 	b.w	b6fc0 <__register_exitproc>

000b6de8 <atoi>:
   b6de8:	220a      	movs	r2, #10
   b6dea:	2100      	movs	r1, #0
   b6dec:	f000 b8de 	b.w	b6fac <strtol>

000b6df0 <atol>:
   b6df0:	220a      	movs	r2, #10
   b6df2:	2100      	movs	r1, #0
   b6df4:	f000 b8da 	b.w	b6fac <strtol>

000b6df8 <memcpy>:
   b6df8:	440a      	add	r2, r1
   b6dfa:	4291      	cmp	r1, r2
   b6dfc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b6e00:	d100      	bne.n	b6e04 <memcpy+0xc>
   b6e02:	4770      	bx	lr
   b6e04:	b510      	push	{r4, lr}
   b6e06:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6e0a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6e0e:	4291      	cmp	r1, r2
   b6e10:	d1f9      	bne.n	b6e06 <memcpy+0xe>
   b6e12:	bd10      	pop	{r4, pc}

000b6e14 <memset>:
   b6e14:	4402      	add	r2, r0
   b6e16:	4603      	mov	r3, r0
   b6e18:	4293      	cmp	r3, r2
   b6e1a:	d100      	bne.n	b6e1e <memset+0xa>
   b6e1c:	4770      	bx	lr
   b6e1e:	f803 1b01 	strb.w	r1, [r3], #1
   b6e22:	e7f9      	b.n	b6e18 <memset+0x4>

000b6e24 <srand>:
   b6e24:	b538      	push	{r3, r4, r5, lr}
   b6e26:	4b10      	ldr	r3, [pc, #64]	; (b6e68 <srand+0x44>)
   b6e28:	681d      	ldr	r5, [r3, #0]
   b6e2a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6e2c:	4604      	mov	r4, r0
   b6e2e:	b9b3      	cbnz	r3, b6e5e <srand+0x3a>
   b6e30:	2018      	movs	r0, #24
   b6e32:	f7fe fe1d 	bl	b5a70 <malloc>
   b6e36:	4602      	mov	r2, r0
   b6e38:	63a8      	str	r0, [r5, #56]	; 0x38
   b6e3a:	b920      	cbnz	r0, b6e46 <srand+0x22>
   b6e3c:	4b0b      	ldr	r3, [pc, #44]	; (b6e6c <srand+0x48>)
   b6e3e:	480c      	ldr	r0, [pc, #48]	; (b6e70 <srand+0x4c>)
   b6e40:	2142      	movs	r1, #66	; 0x42
   b6e42:	f7fe fe3d 	bl	b5ac0 <__assert_func>
   b6e46:	490b      	ldr	r1, [pc, #44]	; (b6e74 <srand+0x50>)
   b6e48:	4b0b      	ldr	r3, [pc, #44]	; (b6e78 <srand+0x54>)
   b6e4a:	e9c0 1300 	strd	r1, r3, [r0]
   b6e4e:	4b0b      	ldr	r3, [pc, #44]	; (b6e7c <srand+0x58>)
   b6e50:	6083      	str	r3, [r0, #8]
   b6e52:	230b      	movs	r3, #11
   b6e54:	8183      	strh	r3, [r0, #12]
   b6e56:	2100      	movs	r1, #0
   b6e58:	2001      	movs	r0, #1
   b6e5a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6e5e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6e60:	2200      	movs	r2, #0
   b6e62:	611c      	str	r4, [r3, #16]
   b6e64:	615a      	str	r2, [r3, #20]
   b6e66:	bd38      	pop	{r3, r4, r5, pc}
   b6e68:	2003e2b0 	.word	0x2003e2b0
   b6e6c:	000b7889 	.word	0x000b7889
   b6e70:	000b78a0 	.word	0x000b78a0
   b6e74:	abcd330e 	.word	0xabcd330e
   b6e78:	e66d1234 	.word	0xe66d1234
   b6e7c:	0005deec 	.word	0x0005deec

000b6e80 <strncpy>:
   b6e80:	b510      	push	{r4, lr}
   b6e82:	3901      	subs	r1, #1
   b6e84:	4603      	mov	r3, r0
   b6e86:	b132      	cbz	r2, b6e96 <strncpy+0x16>
   b6e88:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b6e8c:	f803 4b01 	strb.w	r4, [r3], #1
   b6e90:	3a01      	subs	r2, #1
   b6e92:	2c00      	cmp	r4, #0
   b6e94:	d1f7      	bne.n	b6e86 <strncpy+0x6>
   b6e96:	441a      	add	r2, r3
   b6e98:	2100      	movs	r1, #0
   b6e9a:	4293      	cmp	r3, r2
   b6e9c:	d100      	bne.n	b6ea0 <strncpy+0x20>
   b6e9e:	bd10      	pop	{r4, pc}
   b6ea0:	f803 1b01 	strb.w	r1, [r3], #1
   b6ea4:	e7f9      	b.n	b6e9a <strncpy+0x1a>
	...

000b6ea8 <_strtol_l.constprop.0>:
   b6ea8:	2b01      	cmp	r3, #1
   b6eaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6eae:	d001      	beq.n	b6eb4 <_strtol_l.constprop.0+0xc>
   b6eb0:	2b24      	cmp	r3, #36	; 0x24
   b6eb2:	d906      	bls.n	b6ec2 <_strtol_l.constprop.0+0x1a>
   b6eb4:	f7fe fdfc 	bl	b5ab0 <__errno>
   b6eb8:	2316      	movs	r3, #22
   b6eba:	6003      	str	r3, [r0, #0]
   b6ebc:	2000      	movs	r0, #0
   b6ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6ec2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b6fa8 <_strtol_l.constprop.0+0x100>
   b6ec6:	460d      	mov	r5, r1
   b6ec8:	462e      	mov	r6, r5
   b6eca:	f815 4b01 	ldrb.w	r4, [r5], #1
   b6ece:	f814 700c 	ldrb.w	r7, [r4, ip]
   b6ed2:	f017 0708 	ands.w	r7, r7, #8
   b6ed6:	d1f7      	bne.n	b6ec8 <_strtol_l.constprop.0+0x20>
   b6ed8:	2c2d      	cmp	r4, #45	; 0x2d
   b6eda:	d132      	bne.n	b6f42 <_strtol_l.constprop.0+0x9a>
   b6edc:	782c      	ldrb	r4, [r5, #0]
   b6ede:	2701      	movs	r7, #1
   b6ee0:	1cb5      	adds	r5, r6, #2
   b6ee2:	2b00      	cmp	r3, #0
   b6ee4:	d05b      	beq.n	b6f9e <_strtol_l.constprop.0+0xf6>
   b6ee6:	2b10      	cmp	r3, #16
   b6ee8:	d109      	bne.n	b6efe <_strtol_l.constprop.0+0x56>
   b6eea:	2c30      	cmp	r4, #48	; 0x30
   b6eec:	d107      	bne.n	b6efe <_strtol_l.constprop.0+0x56>
   b6eee:	782c      	ldrb	r4, [r5, #0]
   b6ef0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b6ef4:	2c58      	cmp	r4, #88	; 0x58
   b6ef6:	d14d      	bne.n	b6f94 <_strtol_l.constprop.0+0xec>
   b6ef8:	786c      	ldrb	r4, [r5, #1]
   b6efa:	2310      	movs	r3, #16
   b6efc:	3502      	adds	r5, #2
   b6efe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b6f02:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b6f06:	f04f 0c00 	mov.w	ip, #0
   b6f0a:	fbb8 f9f3 	udiv	r9, r8, r3
   b6f0e:	4666      	mov	r6, ip
   b6f10:	fb03 8a19 	mls	sl, r3, r9, r8
   b6f14:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b6f18:	f1be 0f09 	cmp.w	lr, #9
   b6f1c:	d816      	bhi.n	b6f4c <_strtol_l.constprop.0+0xa4>
   b6f1e:	4674      	mov	r4, lr
   b6f20:	42a3      	cmp	r3, r4
   b6f22:	dd24      	ble.n	b6f6e <_strtol_l.constprop.0+0xc6>
   b6f24:	f1bc 0f00 	cmp.w	ip, #0
   b6f28:	db1e      	blt.n	b6f68 <_strtol_l.constprop.0+0xc0>
   b6f2a:	45b1      	cmp	r9, r6
   b6f2c:	d31c      	bcc.n	b6f68 <_strtol_l.constprop.0+0xc0>
   b6f2e:	d101      	bne.n	b6f34 <_strtol_l.constprop.0+0x8c>
   b6f30:	45a2      	cmp	sl, r4
   b6f32:	db19      	blt.n	b6f68 <_strtol_l.constprop.0+0xc0>
   b6f34:	fb06 4603 	mla	r6, r6, r3, r4
   b6f38:	f04f 0c01 	mov.w	ip, #1
   b6f3c:	f815 4b01 	ldrb.w	r4, [r5], #1
   b6f40:	e7e8      	b.n	b6f14 <_strtol_l.constprop.0+0x6c>
   b6f42:	2c2b      	cmp	r4, #43	; 0x2b
   b6f44:	bf04      	itt	eq
   b6f46:	782c      	ldrbeq	r4, [r5, #0]
   b6f48:	1cb5      	addeq	r5, r6, #2
   b6f4a:	e7ca      	b.n	b6ee2 <_strtol_l.constprop.0+0x3a>
   b6f4c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b6f50:	f1be 0f19 	cmp.w	lr, #25
   b6f54:	d801      	bhi.n	b6f5a <_strtol_l.constprop.0+0xb2>
   b6f56:	3c37      	subs	r4, #55	; 0x37
   b6f58:	e7e2      	b.n	b6f20 <_strtol_l.constprop.0+0x78>
   b6f5a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b6f5e:	f1be 0f19 	cmp.w	lr, #25
   b6f62:	d804      	bhi.n	b6f6e <_strtol_l.constprop.0+0xc6>
   b6f64:	3c57      	subs	r4, #87	; 0x57
   b6f66:	e7db      	b.n	b6f20 <_strtol_l.constprop.0+0x78>
   b6f68:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b6f6c:	e7e6      	b.n	b6f3c <_strtol_l.constprop.0+0x94>
   b6f6e:	f1bc 0f00 	cmp.w	ip, #0
   b6f72:	da05      	bge.n	b6f80 <_strtol_l.constprop.0+0xd8>
   b6f74:	2322      	movs	r3, #34	; 0x22
   b6f76:	6003      	str	r3, [r0, #0]
   b6f78:	4646      	mov	r6, r8
   b6f7a:	b942      	cbnz	r2, b6f8e <_strtol_l.constprop.0+0xe6>
   b6f7c:	4630      	mov	r0, r6
   b6f7e:	e79e      	b.n	b6ebe <_strtol_l.constprop.0+0x16>
   b6f80:	b107      	cbz	r7, b6f84 <_strtol_l.constprop.0+0xdc>
   b6f82:	4276      	negs	r6, r6
   b6f84:	2a00      	cmp	r2, #0
   b6f86:	d0f9      	beq.n	b6f7c <_strtol_l.constprop.0+0xd4>
   b6f88:	f1bc 0f00 	cmp.w	ip, #0
   b6f8c:	d000      	beq.n	b6f90 <_strtol_l.constprop.0+0xe8>
   b6f8e:	1e69      	subs	r1, r5, #1
   b6f90:	6011      	str	r1, [r2, #0]
   b6f92:	e7f3      	b.n	b6f7c <_strtol_l.constprop.0+0xd4>
   b6f94:	2430      	movs	r4, #48	; 0x30
   b6f96:	2b00      	cmp	r3, #0
   b6f98:	d1b1      	bne.n	b6efe <_strtol_l.constprop.0+0x56>
   b6f9a:	2308      	movs	r3, #8
   b6f9c:	e7af      	b.n	b6efe <_strtol_l.constprop.0+0x56>
   b6f9e:	2c30      	cmp	r4, #48	; 0x30
   b6fa0:	d0a5      	beq.n	b6eee <_strtol_l.constprop.0+0x46>
   b6fa2:	230a      	movs	r3, #10
   b6fa4:	e7ab      	b.n	b6efe <_strtol_l.constprop.0+0x56>
   b6fa6:	bf00      	nop
   b6fa8:	000b78fa 	.word	0x000b78fa

000b6fac <strtol>:
   b6fac:	4613      	mov	r3, r2
   b6fae:	460a      	mov	r2, r1
   b6fb0:	4601      	mov	r1, r0
   b6fb2:	4802      	ldr	r0, [pc, #8]	; (b6fbc <strtol+0x10>)
   b6fb4:	6800      	ldr	r0, [r0, #0]
   b6fb6:	f7ff bf77 	b.w	b6ea8 <_strtol_l.constprop.0>
   b6fba:	bf00      	nop
   b6fbc:	2003e2b0 	.word	0x2003e2b0

000b6fc0 <__register_exitproc>:
   b6fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6fc4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7080 <__register_exitproc+0xc0>
   b6fc8:	4606      	mov	r6, r0
   b6fca:	f8d8 0000 	ldr.w	r0, [r8]
   b6fce:	461f      	mov	r7, r3
   b6fd0:	460d      	mov	r5, r1
   b6fd2:	4691      	mov	r9, r2
   b6fd4:	f000 f856 	bl	b7084 <__retarget_lock_acquire_recursive>
   b6fd8:	4b25      	ldr	r3, [pc, #148]	; (b7070 <__register_exitproc+0xb0>)
   b6fda:	681c      	ldr	r4, [r3, #0]
   b6fdc:	b934      	cbnz	r4, b6fec <__register_exitproc+0x2c>
   b6fde:	4c25      	ldr	r4, [pc, #148]	; (b7074 <__register_exitproc+0xb4>)
   b6fe0:	601c      	str	r4, [r3, #0]
   b6fe2:	4b25      	ldr	r3, [pc, #148]	; (b7078 <__register_exitproc+0xb8>)
   b6fe4:	b113      	cbz	r3, b6fec <__register_exitproc+0x2c>
   b6fe6:	681b      	ldr	r3, [r3, #0]
   b6fe8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6fec:	6863      	ldr	r3, [r4, #4]
   b6fee:	2b1f      	cmp	r3, #31
   b6ff0:	dd07      	ble.n	b7002 <__register_exitproc+0x42>
   b6ff2:	f8d8 0000 	ldr.w	r0, [r8]
   b6ff6:	f000 f847 	bl	b7088 <__retarget_lock_release_recursive>
   b6ffa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7002:	b34e      	cbz	r6, b7058 <__register_exitproc+0x98>
   b7004:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7008:	b988      	cbnz	r0, b702e <__register_exitproc+0x6e>
   b700a:	4b1c      	ldr	r3, [pc, #112]	; (b707c <__register_exitproc+0xbc>)
   b700c:	b923      	cbnz	r3, b7018 <__register_exitproc+0x58>
   b700e:	f8d8 0000 	ldr.w	r0, [r8]
   b7012:	f000 f838 	bl	b7086 <__retarget_lock_release>
   b7016:	e7f0      	b.n	b6ffa <__register_exitproc+0x3a>
   b7018:	f44f 7084 	mov.w	r0, #264	; 0x108
   b701c:	f7fe fd28 	bl	b5a70 <malloc>
   b7020:	2800      	cmp	r0, #0
   b7022:	d0f4      	beq.n	b700e <__register_exitproc+0x4e>
   b7024:	2300      	movs	r3, #0
   b7026:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b702a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b702e:	6863      	ldr	r3, [r4, #4]
   b7030:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7034:	2201      	movs	r2, #1
   b7036:	409a      	lsls	r2, r3
   b7038:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b703c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7040:	4313      	orrs	r3, r2
   b7042:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7046:	2e02      	cmp	r6, #2
   b7048:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b704c:	bf02      	ittt	eq
   b704e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7052:	4313      	orreq	r3, r2
   b7054:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7058:	6863      	ldr	r3, [r4, #4]
   b705a:	f8d8 0000 	ldr.w	r0, [r8]
   b705e:	1c5a      	adds	r2, r3, #1
   b7060:	3302      	adds	r3, #2
   b7062:	6062      	str	r2, [r4, #4]
   b7064:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7068:	f000 f80e 	bl	b7088 <__retarget_lock_release_recursive>
   b706c:	2000      	movs	r0, #0
   b706e:	e7c6      	b.n	b6ffe <__register_exitproc+0x3e>
   b7070:	2003e7e8 	.word	0x2003e7e8
   b7074:	2003e75c 	.word	0x2003e75c
   b7078:	00000000 	.word	0x00000000
   b707c:	000b5a71 	.word	0x000b5a71
   b7080:	2003e314 	.word	0x2003e314

000b7084 <__retarget_lock_acquire_recursive>:
   b7084:	4770      	bx	lr

000b7086 <__retarget_lock_release>:
   b7086:	4770      	bx	lr

000b7088 <__retarget_lock_release_recursive>:
   b7088:	4770      	bx	lr

000b708a <link_code_end>:
	...

000b708c <dynalib_user>:
   b708c:	4881 000b 48bd 000b 48e5 000b 48e9 000b     .H...H...H...H..
   b709c:	0000 0000 6925 2500 696c 6900 006e 756f     ....%i.%li.in.ou
   b70ac:	0074 7770 006d 7764 6100 0077 3973 7262     t.pwm.dw.aw.s9br
   b70bc:	7053 4b48 4758 4a62 2d4b 6750 464c 716f     SpHKXGbJK-PgLFoq
   b70cc:	7342 4e69 744d 2d32 4c38 434f 6200 796c     BsiNMt2-8LOC.bly
   b70dc:	6b6e 632e 6f6c 6475 4200 7475 6f74 206e     nk.cloud.Button 
   b70ec:	6154 7070 6465 4800 7965 202c 6c42 6e79     Tapped.Hey, Blyn
   b70fc:	206b 7570 6873 6820 7265 2165 6e00 746f     k push here!.not
   b710c:	6669 0079 6d74 6c70 5400 504d 324c 7554     ify.tmpl.TMPL2Tu
   b711c:	6b34 4d64 634c 7600 0077 3225 332e 0066     4kdMLc.vw.%2.3f.

000b712c <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   b712c:	6c62 6b6e 6e69 0066 6576 0072 2e31 2e31     blnkinf.ver.1.1.
   b713c:	0030 2d68 6562 7461 3400 0035 7562 6666     0.h-beat.45.buff
   b714c:	692d 006e 3031 3432 6400 7665 5000 7261     -in.1024.dev.Par
   b715c:	6974 6c63 2065 7241 6f67 006e 7766 742d     ticle Argon.fw-t
   b716c:	7079 0065 4d54 4c50 5432 3475 646b 4c4d     ype.TMPL2Tu4kdML
   b717c:	0063 7562 6c69 0064 754a 206e 3932 3220     c.build.Jun 29 2
   b718c:	3230 2033 3931 353a 3a38 3030 0000 0000     023 19:58:00....

000b719c <_ZL22BlynkReadHandlerVector>:
   b719c:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b71ac:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b71bc:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b71cc:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b71dc:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b71ec:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b71fc:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b720c:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b721c:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b722c:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b723c:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b724c:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b725c:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b726c:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b727c:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b728c:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b729c:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b72ac:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b72bc:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b72cc:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b72dc:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b72ec:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b72fc:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b730c:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b731c:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b732c:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b733c:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b734c:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b735c:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b736c:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b737c:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..
   b738c:	545d 000b 545d 000b 545d 000b 545d 000b     ]T..]T..]T..]T..

000b739c <_ZL23BlynkWriteHandlerVector>:
   b739c:	5249 000b 545f 000b 545f 000b 545f 000b     IR.._T.._T.._T..
   b73ac:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..
   b73bc:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..
   b73cc:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..
   b73dc:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..
   b73ec:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..
   b73fc:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..
   b740c:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..
   b741c:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..
   b742c:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..
   b743c:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..
   b744c:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..
   b745c:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..
   b746c:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..
   b747c:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..
   b748c:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..
   b749c:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..
   b74ac:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..
   b74bc:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..
   b74cc:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..
   b74dc:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..
   b74ec:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..
   b74fc:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..
   b750c:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..
   b751c:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..
   b752c:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..
   b753c:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..
   b754c:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..
   b755c:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..
   b756c:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..
   b757c:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..
   b758c:	545f 000b 545f 000b 545f 000b 545f 000b     _T.._T.._T.._T..

000b759c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b75a4 <_ZTVN5spark13EthernetClassE>:
	...
   b75ac:	5b57 000b 5b4d 000b 5b43 000b 5b39 000b     W[..M[..C[..9[..
   b75bc:	5b2d 000b 5b21 000b 5d75 000b 5d7d 000b     -[..![..u]..}]..
   b75cc:	5b15 000b 5b0d 000b 5b03 000b 5af9 000b     .[...[...[...Z..
   b75dc:	5dad 000b                                   .]..

000b75e0 <_ZTV7TwoWire>:
	...
   b75e8:	5b75 000b 5bbf 000b 5b97 000b 5b77 000b     u[...[...[..w[..
   b75f8:	5b9f 000b 5ba7 000b 5baf 000b 5bb7 000b     .[...[...[...[..

000b7608 <_ZTV9IPAddress>:
	...
   b7610:	5c19 000b 5c09 000b 5c0b 000b 7061 0070     .\...\...\..app.

000b7620 <_ZTVN5spark12NetworkClassE>:
	...
   b7628:	5d35 000b 5d3f 000b 5d49 000b 5d53 000b     5]..?]..I]..S]..
   b7638:	5d5d 000b 5d69 000b 5d75 000b 5d7d 000b     ]]..i]..u]..}]..
   b7648:	5d85 000b 5d91 000b 5d99 000b 5da3 000b     .]...]...]...]..
   b7658:	5dad 000b 6977 6972 676e 7200 6365 2076     .]..wiring.recv 
   b7668:	7265 6f72 2072 203d 6425 0000               error = %d..

000b7674 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b767c:	6075 000b 6099 000b 65cb 000b 60a7 000b     u`...`...e...`..
   b768c:	6079 000b                                   y`..

000b7690 <_ZTV9TCPClient>:
	...
   b7698:	6125 000b 6159 000b 5ff1 000b 600b 000b     %a..Ya..._...`..
   b76a8:	6461 000b 6035 000b 62d7 000b 6069 000b     ad..5`...b..i`..
   b76b8:	6369 000b 61a9 000b 6305 000b 6515 000b     ic...a...c...e..
   b76c8:	62a5 000b 606b 000b 601d 000b 60ad 000b     .b..k`...`...`..
   b76d8:	6189 000b 5925 252d 2d6d 6425 2554 3a48     .a..%Y-%m-%dT%H:
   b76e8:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b76f8 <_ZTV11USARTSerial>:
	...
   b7700:	65e5 000b 6651 000b 6629 000b 5e99 000b     .e..Qf..)f...^..
   b7710:	65f9 000b 6615 000b 6607 000b 6623 000b     .e...f...f..#f..
   b7720:	65e7 000b 65eb 000b                         .e...e..

000b7728 <_ZTV9USBSerial>:
	...
   b7730:	668f 000b 66f7 000b 66cd 000b 5e99 000b     .f...f...f...^..
   b7740:	66bf 000b 6691 000b 66a1 000b 66f1 000b     .f...f...f...f..
   b7750:	66b1 000b 6689 000b                         .f...f..

000b7758 <_ZTVN5spark9WiFiClassE>:
	...
   b7760:	67e7 000b 67dd 000b 67d3 000b 6789 000b     .g...g...g...g..
   b7770:	67c7 000b 67bb 000b 5d75 000b 5d7d 000b     .g...g..u]..}]..
   b7780:	67af 000b 67a7 000b 679d 000b 6793 000b     .g...g...g...g..
   b7790:	5dad 000b                                   .]..

000b7794 <_ZSt7nothrow>:
	...

000b7795 <_ZTSSt19_Sp_make_shared_tag>:
   b7795:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b77a5:	6572 5f64 6174 0067 0000                     red_tag....

000b77b0 <_ZTISt19_Sp_make_shared_tag>:
   b77b0:	77f0 000b 7795 000b                         .w...w..

000b77b8 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b77b8:	7850 000b 77c4 000b 7874 000b               Px...w..tx..

000b77c4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b77c4:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b77d4:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b77e4:	0045 0000                                   E...

000b77e8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b77e8:	0000 0000 77b8 000b 6c05 000b 6c19 000b     .....w...l...l..
   b77f8:	6dad 000b 6dad 000b 6c83 000b 6bc5 000b     .m...m...l...k..
   b7808:	6c6b 000b 6c2d 000b 6bf7 000b               kl..-l...k..

000b7814 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b7814:	7850 000b 7820 000b 77b8 000b               Px.. x...w..

000b7820 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b7820:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b7830:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b7840:	666e 456f 0000 0000                         nfoE....

000b7848 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b7848:	0000 0000 7814 000b 6cad 000b 6cc1 000b     .....x...l...l..
   b7858:	6dad 000b 6dad 000b 6c83 000b 6bc5 000b     .m...m...l...k..
   b7868:	6d81 000b 6d0d 000b 6cd5 000b               .m...m...l..

000b7874 <_ZTISt9type_info>:
   b7874:	77f0 000b 787c 000b                         .w..|x..

000b787c <_ZTSSt9type_info>:
   b787c:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b788c:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b789c:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   b78ac:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b78bc:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b78cc:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b78dc:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b78ec:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000b78f9 <_ctype_>:
   b78f9:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b7909:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b7919:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b7929:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b7939:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b7949:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b7959:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b7969:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b7979:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b79fa <link_const_data_end>:
	...

000b79fc <link_constructors_location>:
   b79fc:	000b540d 	.word	0x000b540d
   b7a00:	000b5ae9 	.word	0x000b5ae9
   b7a04:	000b5b61 	.word	0x000b5b61
   b7a08:	000b5d25 	.word	0x000b5d25
   b7a0c:	000b5e85 	.word	0x000b5e85
   b7a10:	000b5f59 	.word	0x000b5f59
   b7a14:	000b5fcd 	.word	0x000b5fcd
   b7a18:	000b65d1 	.word	0x000b65d1
   b7a1c:	000b67f1 	.word	0x000b67f1
